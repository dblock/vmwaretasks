<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SandcastleBuilder.Utils</name>
    </assembly>
    <members>
        <member name="T:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg">
            <summary>
            This form is used to edit user-defined project properties
            </summary>
            <remarks>Note that the MSBuild project object does not provide a way
            to delete or rename properties.  As such, you have to edit the project
            file by hand to do those tasks.</remarks>
        </member>
        <member name="F:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.#ctor(SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Constructor
            </summary>
            <param name="project">The project file reference</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.CheckProjectIsEditable">
            <summary>
            This is used to see if the project can be edited.  If not, abort
            the change by throwing an exception.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.UserDefinedPropertyEditorDlg_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Store changes to modified properties when the dialog is closed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.btnClose_Click(System.Object,System.EventArgs)">
            <summary>
            Close the form
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.btnHelp_Click(System.Object,System.EventArgs)">
            <summary>
            View help for this form
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.btnAdd_Click(System.Object,System.EventArgs)">
            <summary>
            This is used to add a new user-defined property to the project
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.btnRemove_Click(System.Object,System.EventArgs)">
            <summary>
            Remove a user defined property
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.lbProperties_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Update the property grid with the selected item
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.pgProps_PropertyValueChanged(System.Object,System.Windows.Forms.PropertyValueChangedEventArgs)">
            <summary>
            Refresh the list box item when a property changes
            </summary>
            <param name="s">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.UserDefinedProperties">
            <summary>
            This is used to get or set the user-defined property collection
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.Project">
            <summary>
            This is used to get or set the project file reference
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.PropertyItem">
            <summary>
            This is used to edit the user-defined project property items
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.PropertyItem.#ctor(SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg,Microsoft.Build.Evaluation.ProjectProperty)">
            <summary>
            Constructor
            </summary>
            <param name="owner">The owning dialog</param>
            <param name="buildProperty">The build property to edit or null
            for a new property</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.PropertyItem.ToString">
            <summary>
            Return the name of the build property
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.PropertyItem.Owner">
            <summary>
            This is used to get or set the owning dialog
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.PropertyItem.UnderlyingProperty">
            <summary>
            The underlying project property if any
            </summary>
            <value>This returns null for new properties</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.PropertyItem.WasModified">
            <summary>
            This read-only property indicates whether or not the project
            property was modified.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.PropertyItem.Name">
            <summary>
            This is used to get or set the property name
            </summary>
            <remarks>Existing properties cannot be renamed as the MSBuild
            project object doesn't provide a way to do it.  Nor does it
            allow deleting properties.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.PropertyItem.Condition">
            <summary>
            This is used to get or set the Condition attribute value for
            the property.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg.PropertyItem.Value">
            <summary>
            This is used to get or set the value for the property
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.XPath.XPathFunctionContext">
            <summary>
            This class is used to provide a custom regular expression search
            function to XPath queries using an XSLT context.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.XPath.XPathFunctionContext.CompareDocument(System.String,System.String)">
            <summary>
            This is not used by this class.
            </summary>
            <param name="baseUri">The base URI of the first document to compare</param>
            <param name="nextbaseUri">The base URI of the second document to compare</param>
            <returns>Always returns zero (equal).</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.XPath.XPathFunctionContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
            <summary>
            This is not used by this class.
            </summary>
            <param name="node">The whitespace node to preserve or strip</param>
            <returns>For this class, this always returns true to preserve
            whitespace.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.XPath.XPathFunctionContext.ResolveVariable(System.String,System.String)">
            <summary>
            This is not used by this class.
            </summary>
            <param name="prefix">The prefix of the variable as it appears
            in the expression</param>
            <param name="name">The name of the variable</param>
            <returns>Always returns null</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.XPath.XPathFunctionContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
            <summary>
            Resolves a function reference and return an
            <see cref="T:System.Xml.Xsl.IXsltContextFunction"/> representing the function. The
            <see cref="T:System.Xml.Xsl.IXsltContextFunction"/> is used at execution time to get
            the return value of the function.
            </summary>
            <param name="prefix">The prefix of the function as it appears in
            the XPath expression</param>
            <param name="name">The name of the function</param>
            <param name="ArgTypes">An array of argument types for the function
            being resolved. This allows you to select between methods with the
            same name (for example, overloaded methods).</param>
            <returns>An <see cref="T:System.Xml.Xsl.IXsltContextFunction"/> representing the
            function</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.XPath.XPathFunctionContext.Whitespace">
            <summary>
            This is not used by this class.
            </summary>
            <value>Always returns true to include whitespace in the output</value>
        </member>
        <member name="T:SandcastleBuilder.Utils.BuildEngine.BuildProcess">
            <summary>
            This class is used to handle all aspects of the build process in a
            separate thread.
            </summary>
            <summary>
            This class is used to handle all aspects of the build process in a
            separate thread.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ApplyVisibilityProperties">
            <summary>
            Apply the project's Visibility category properties to the
            reflection information file.
            </summary>
            <remarks>This is used to remove entries from the reflection
            information file so that it does not appear in the help file.
            See the <b>Document*</b> properties in the
            <see cref="T:SandcastleBuilder.Utils.SandcastleProject"/> class for information on the
            items removed.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.RemoveAttributes">
            <summary>
            Remove attribute information
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.RemoveExplicitInterfaceImplementations">
            <summary>
            Remove explicit interface implementation information
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.RemoveInheritedMembers">
            <summary>
            Remove inherited member information from each type's element list
            based on the project settings.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.RemoveMembers(System.String,System.String)">
            <summary>
            Remove member information matching the specified XPath query.
            </summary>
            <param name="xpath">The XPath query used to find the members.</param>
            <param name="memberDesc">A description of the members removed.</param>
            <returns>The number of members to be removed</returns>
            <remarks>Actual removal of the members is deferred.  On very large
            files, the XPath queries took to long when removing the
            &lt;elemen&gt; members.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ModifyProtectedInternalVisibility">
            <summary>
            Change the visibility of "protected internal" members to
            "protected".
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.RemoveSealedProtected">
            <summary>
            Remove protected members from sealed classes.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.OnExcludeElement(System.Text.RegularExpressions.Match)">
            <summary>
            This is used as the match evaluator for the regular expression
            that finds the &lt;element&gt; entries to remove from the
            reflection information file.
            </summary>
            <param name="m">The match found</param>
            <returns>The string with which to replace the match</returns>
            <remarks>The removals are done this way as it proved to be a very
            slow process to remove the child elements at the time they
            were found with an XPath query on very large files.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.DetermineApiContentPlacement">
            <summary>
            This is used to determine the best placement for the API content
            based on the project settings.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.CombineIntermediateTocFiles">
            <summary>
            This combines the conceptual and API intermediate TOC files into
            one file ready for transformation to the help format-specific
            TOC file formats.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.CopyStandardHelpContent">
            <summary>
            This is called to create the help project output folder and copy
            the standard content files (art, media, scripts, and styles) to the
            help project folders.
            </summary>
            <remarks>This creates the base folder <b>Output\</b>, one folder
            for each help file format, and an <b>.\html</b> folder under each of
            those.  It then copies the stock art, icon, media, script, and
            stylesheet files from the <b>{@PresentationPath}\art</b>,
            <b>{@PresentationPath}\icons</b>,
            <b>{@PresentationPath}\media</b>,
            <b>{@PresentationPath}\scripts</b>, and
            <b>{@PresentationPath}\styles</b> folders which are located in the
            Sandcastle installation folder.  The art, icons, and media folders
            may or may not exist based on the style.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.RecursiveCopy(System.String,System.String)">
            <summary>
            This copies files from the specified source folder to the specified
            destination folder.  If any subfolders are found below the source
            folder and the wildcard is "*.*", the subfolders are also copied
            recursively.
            </summary>
            <param name="sourcePath">The source path from which to copy</param>
            <param name="destPath">The destination path to which to copy</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.HelpProjectFileList(System.String,SandcastleBuilder.Utils.HelpFileFormat)">
            <summary>
            This returns a complete list of files for inclusion in the
            compiled help file.
            </summary>
            <param name="folder">The folder to expand</param>
            <param name="format">The HTML help file format</param>
            <returns>The full list of all files for the help project</returns>
            <remarks>The help file list is expanded to ensure that we get
            all additional content including all nested subfolders.  The
            <b>format</b> parameter determines the format of the returned
            file list.  For HTML Help 1, it returns a list of the filenames.
            For MS Help 2, it returns the list formatted with the necessary
            XML markup.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.GenerateWebsite">
            <summary>
            This is used to generate the website helper files and copy the
            output to the project output folder ready for use as a website.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.GenerateHtmlToc">
            <summary>
            This is called to generate the HTML table of contents when creating
            the website output.
            </summary>
            <returns>The HTML to insert for the table of contents.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.AppendTocEntry(System.Xml.XPath.XPathNodeIterator,System.Text.StringBuilder)">
            <summary>
            This is called to recursively append the child nodes to the
            HTML table of contents in the specified string builder.
            </summary>
            <param name="entries">The list over which to iterate
            recursively.</param>
            <param name="sb">The string builder to which the entries are
            appended.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ModifyHelpTopicFilenames">
            <summary>
            This is used to change the filenames assigned to each member
            in the reflection information file.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.EnsureOutputFoldersExist(System.String)">
            <summary>
            This is used to ensure that all output folders exist based on the
            selected help file format(s).
            </summary>
            <param name="subFolder">The subfolder name or null to ensure that
            the base folders exist</param>
            <remarks>This creates the named folder under the help format
            specific folder beneath the <b>.\Output</b> folder.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.OnBuildStepChanged(SandcastleBuilder.Utils.BuildEngine.BuildProgressEventArgs)">
            <summary>
            This raises the <see cref="E:SandcastleBuilder.Utils.BuildEngine.BuildProcess.BuildStepChanged"/> event.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.OnBuildProgress(SandcastleBuilder.Utils.BuildEngine.BuildProgressEventArgs)">
            <summary>
            This raises the <see cref="E:SandcastleBuilder.Utils.BuildEngine.BuildProcess.BuildProgress"/> event.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.#ctor(SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Constructor
            </summary>
            <param name="buildProject">The project to build</param>
            <overloads>There are two overloads for the constructor.</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.#ctor(SandcastleBuilder.Utils.SandcastleProject,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="buildProject">The project to build</param>
            <param name="partialBuild">Pass true to perform a partial build</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.Build">
            <summary>
            Call this method to perform the build on the project.
            </summary>
            <event cref="E:SandcastleBuilder.Utils.BuildEngine.BuildProcess.BuildStepChanged">This event fires when the
            current build step changes.</event>
            <event cref="E:SandcastleBuilder.Utils.BuildEngine.BuildProcess.BuildProgress">This event fires to report progress
            information.</event>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ReportProgress(System.String,System.Object[])">
            <summary>
            This is used to report progress during the build process
            within the current step.
            </summary>
            <param name="message">The message to report</param>
            <param name="args">A list of arguments to format into the message
            text</param>
            <overloads>This method has two overloads.</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ReportError(SandcastleBuilder.Utils.BuildEngine.BuildStep,System.String,System.String,System.Object[])">
            <summary>
            This is used to report an error that will abort the build
            </summary>
            <param name="step">The current build step</param>
            <param name="errorCode">The error code</param>
            <param name="message">The message to report</param>
            <param name="args">A list of arguments to format into the message
            text</param>
            <remarks>This just reports the error.  The caller must abort the
            build.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ReportWarning(System.String,System.String,System.Object[])">
            <summary>
            This is used to report a warning that may need attention
            </summary>
            <param name="warningCode">The warning code</param>
            <param name="message">The message to report</param>
            <param name="args">A list of arguments to format into the message
            text</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ReportProgress(SandcastleBuilder.Utils.BuildEngine.BuildStep,System.String,System.Object[])">
            <summary>
            This is used to report progress during the build process
            and possibly update the current step.
            </summary>
            <param name="step">The current build step</param>
            <param name="message">The message to report</param>
            <param name="args">A list of arguments to format into the
            message text</param>
            <event cref="E:SandcastleBuilder.Utils.BuildEngine.BuildProcess.BuildStepChanged">This event fires when the
            current build step changes.</event>
            <event cref="E:SandcastleBuilder.Utils.BuildEngine.BuildProcess.BuildProgress">This event fires to report progress
            information.</event>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.GarbageCollect">
            <summary>
            Force garbage collection to reduce memory usage.
            </summary>
            <remarks>The reflection information file and XML comments files
            can be quite large.  To reduce memory usage, we force a garbage
            collection to get rid of all the discarded objects.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.VerifySafePath(System.String,System.String,System.String)">
            <summary>
            Make sure the path isn't one the user would regret having nuked
            without warning.
            </summary>
            <param name="propertyName">The name of the path property</param>
            <param name="propertyValue">It's current value</param>
            <param name="projectPath">The path to the current project</param>
            <remarks>Since most people don't read the help file and also ignore
            the warning in the property grid description pane, we'll take some
            steps to idiot-proof the dangerous path properties.  I'm starting
            to lose count of the number of people that point WorkingPath at the
            root of their C:\ drive and wonder why all their files disappear.
            <p/>Paths checked for include root references to hard drives and
            network shares, most common well-known folders, and the project's
            root folder.</remarks>
            <exception cref="T:SandcastleBuilder.Utils.BuilderException">This is thrown if the path is
            one of the ones that probably should not be used.</exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.GatherBuildOutputFilenames">
            <summary>
            This is used to gather a list of files produced by the build
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.FindTools">
            <summary>
            Find the Sandcastle tools and the HTML help compiler
            </summary>
            <exception cref="T:SandcastleBuilder.Utils.BuilderException">This is thrown if any of
            the tools cannot be found.</exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.FindOnFixedDrives(System.String)">
            <summary>
            Find a folder by searching the Program Files folders on all fixed
            drives.
            </summary>
            <param name="path">The path for which to search</param>
            <returns>The path if found or an empty string if not found</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.FindSdkExecutable(System.String)">
            <summary>
            This is used to find the named executable in one of the Visual
            Studio SDK installation folders.
            </summary>
            <param name="exeName">The name of the executable to find</param>
            <returns>The path if found or an empty string if not found</returns>
            <remarks>The search looks in all "Visual*" folders under the
            Program Files special folder on all fixed drives.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ValidateDocumentationSources">
            <summary>
            Validate the documentation source information and copy the files to
            the working folder.
            </summary>
            <exception cref="T:SandcastleBuilder.Utils.BuilderException">This is thrown if any of
            the information is invalid.</exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.RunProcess(System.String,System.String)">
            <summary>
            This is used to run a step in the build process
            </summary>
            <param name="fileToRun">The file to execute.  This will be one of
            the template batch files with all the necessary values for the
            paths and options plugged into it.</param>
            <param name="args">The arguments to pass to the file if any.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ReadStdOut">
            <summary>
            This is the thread procedure used to capture standard ouput text
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ReadStdErr">
            <summary>
            This is the thread procedure used to capture standard error text
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ReportToolOutput(System.String)">
            <summary>
            Report the output from the currently running tool
            </summary>
            <param name="line">The line to report</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.CleanUpCollectionFiles">
            <summary>
            This is used to clean up the MS Help 2 collection files so that
            they are ready for use in registering the collection.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.OpenCollectionFile(System.String)">
            <summary>
            Open the specified collection file and return it as an
            <see cref="T:System.Xml.XmlDocument"/> ready for editing.
            </summary>
            <param name="file">The file to open</param>
            <remarks>The DTD is removed before returning it.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.GenerateNamespaceSummaries">
            <summary>
            This is called to generate the namespace summary file
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.AddNamespaceComments(System.Xml.XmlNode,System.String)">
            <summary>
            Add project or namespace comments
            </summary>
            <param name="member">The member node to modify.</param>
            <param name="summaryText">The summary text to add.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.LoadPlugIns">
            <summary>
            Load and initialize the plug-ins used by this project
            </summary>
            <exception cref="T:SandcastleBuilder.Utils.BuilderException">This is thrown if a requested
            plug-in is not found or has a version that is not supported by
            this version of the help file builder.</exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ExecutePlugIns(SandcastleBuilder.Utils.PlugIn.ExecutionBehaviors)">
            <summary>
            Execute all plug-ins that need to execute in the given build step
            that have the given execution behavior.
            </summary>
            <param name="behavior">The execution behavior</param>
            <returns>True if at least one plug-in was executed or false if
            no plug-ins were executed.</returns>
            <remarks>Plug-ins will execute based on their execution priority.
            Those with a higher priority value will execute before those with
            a lower value.  Plug-ins with identical priority values may execute
            in any order within their group.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ExecuteBeforeStepPlugIns">
            <summary>
            This can be used by plug-ins using the
            <see cref="F:SandcastleBuilder.Utils.PlugIn.ExecutionBehaviors.InsteadOf"/> execution behavior to
            execute plug-ins that want to run before the plug-in executes its
            main processing.
            </summary>
            <remarks>This will only run once per step.  Any subsequent calls by
            other plug-ins will be ignored.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ExecuteAfterStepPlugIns">
            <summary>
            This can be used by plug-ins using the
            <see cref="F:SandcastleBuilder.Utils.PlugIn.ExecutionBehaviors.InsteadOf"/> execution behavior to
            execute plug-ins that want to run after the plug-in has executed
            its main processing.
            </summary>
            <remarks>This will only run once per step.  Any subsequent calls by
            other plug-ins will be ignored.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.CopyAdditionalContent">
            <summary>
            This is called to copy the additional content files and build a
            list of them for the help file project.
            </summary>
            <remarks>Note that for wilcard content items, the folders are
            copied recursively.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.MergeConceptualAndAdditionalContentTocInfo">
            <summary>
            This is used to merge the conceptual content table of contents with
            any additional content table of contents information.
            </summary>
            <remarks>This will also split the table of contents if any entry
            has the "split" option.  A split in the conceptual content will
            take precedence as additional content is always appended to
            the end of the conceptual content.  Likewise, a default topic in
            the conceptual content will take precedence over a default topic
            in the additional content.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.MergeTocInfo(SandcastleBuilder.Utils.ConceptualContent.TocEntry)">
            <summary>
            This is used to merge destination file information into the site
            map TOC.
            </summary>
            <param name="site">The site entry to update</param>
            <remarks>In addition, files in the site map that do not exist in
            the TOC built from the defined content will be processed and
            copied to the root folder.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.GetTocInfo(System.String)">
            <summary>
            This is used to extract table of contents information from a file
            that will appear in the help file's table of contents.
            </summary>
            <param name="filename">The file from which to extract the 
            information</param>
            <returns>The table of contents entry</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ResolveLinksAndCopy(System.String,System.String,SandcastleBuilder.Utils.ConceptualContent.TocEntry)">
            <summary>
            This is called to load an additional content file, resolve links
            to namespace content and copy it to the output folder.
            </summary>
            <param name="sourceFile">The source filename to copy</param>
            <param name="destFile">The destination filename</param>
            <param name="entry">The entry being resolved.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.OnLinkMatch(System.Text.RegularExpressions.Match)">
            <summary>
            Replace a link to a namespace item with a link to the HTML page
            for it.
            </summary>
            <param name="match">The match that was found</param>
            <returns>The string to use as the replacement</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.OnContentMatch(System.Text.RegularExpressions.Match)">
            <summary>
            Replace a shared content item with it's value.  Note that these
            may be nested.
            </summary>
            <param name="match">The match that was found</param>
            <returns>The string to use as the replacement</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.OnCodeBlockMatch(System.Text.RegularExpressions.Match)">
            <summary>
            This is used to load a code block from an external file.
            </summary>
            <returns>The HTML encoded block extracted from the file and
            wrapped in a &lt;pre&gt; tag ready for colorizing.</returns>
            <remarks>If a region attribute is found, only the named region
            is returned.  If n region attribute is found, the whole file is
            returned.  Relative paths are assumed to be relative to the
            project folder.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.XslTransform(System.String)">
            <summary>
            This is used to transform a *.topic file into a *.html file using
            an XSLT transformation based on the presentation style.
            </summary>
            <param name="sourceFile">The source topic filename</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.GenerateApiFilter">
            <summary>
            This is used to generate the API filter collection used by
            MRefBuilder to exclude items from the reflection information file.
            </summary>
            <remarks>Namespaces and members with an <code>&lt;exclude /&gt;</code>
            tag in their comments are removed using the ripping feature as it
            is more efficient than searching for and removing them from the
            reflection file after it has been generated especially on large
            projects.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ApplyManualApiFilter(SandcastleBuilder.Utils.ApiFilterCollection,System.String)">
            <summary>
            This is used to manually apply the specified API filter to the
            specified reflection information file.
            </summary>
            <param name="apiFilter">The API filter to apply</param>
            <param name="reflectionFilename">The reflection information file</param>
            <remarks>This can be used by any plug-in that does not produce a
            reflection information file using <b>MRefBuilder.exe</b>.  In such
            cases, the API filter is not applied unless the plug-in uses this
            method.  If the reflection information file is produced by
            <b>MRefBuilder.exe</b>, there is no need to use this method as it
            will apply the API filter automatically to the file that it
            produces.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ApplyMemberFilter(System.Xml.XmlNode,SandcastleBuilder.Utils.ApiFilter)">
            <summary>
            Apply a member filter to the specified type.
            </summary>
            <param name="apis">The APIs node from which to remove info</param>
            <param name="typeFilter">The type filter to be processed</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.RemoveNamespace(System.Xml.XmlNode,System.String)">
            <summary>
            Remove an entire namespace and all of its members
            </summary>
            <param name="apis">The APIs node from which to remove info</param>
            <param name="id">The namespace ID to remove</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.RemoveType(System.Xml.XmlNode,System.String)">
            <summary>
            Remove an entire type and all of its members
            </summary>
            <param name="apis">The APIs node from which to remove info</param>
            <param name="id">The type ID to remove</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.TransformText(System.String,System.Object[])">
            <summary>
            Transform the specified template text by inserting the necessary
            values into the place holders tags.
            </summary>
            <param name="templateText">The template text to transform</param>
            <param name="args">An optional list of arguments to format into the 
            template before transforming it.</param>
            <returns>The transformed text</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.TransformTemplate(System.String,System.String,System.String)">
            <summary>
            Transform the specified template by inserting the necessary
            values into the place holders and saving it to the working folder.
            </summary>
            <param name="template">The template to transform</param>
            <param name="sourceFolder">The folder where the template is
            located</param>
            <param name="destFolder">The folder in which to save the
            transformed file</param>
            <returns>The path to the transformed file</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ReadWithEncoding(System.String,System.Text.Encoding@)">
            <summary>
            This is used to read in a file using an appropriate encoding method
            </summary>
            <param name="filename">The file to load</param>
            <param name="encoding">Pass the default encoding to use.  On
            return, it contains the actual encoding for the file.</param>
            <returns>The contents of the file.</returns>
            <remarks>When reading the file, use the default encoding specified
            but detect the encoding if byte order marks are present.  In
            addition, if the template is an XML file and it contains an
            encoding identifier in the XML tag, the file is read using
            that encoding.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.OnFieldMatch(System.Text.RegularExpressions.Match)">
            <summary>
            Replace a field tag with a value from the project
            </summary>
            <param name="match">The match that was found</param>
            <returns>The string to use as the replacement</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.SilverlightFrameworkLocations(System.String)">
            <summary>
            This is used to get a list of Silverlight Framework assembly locations
            </summary>
            <param name="version">The framework version for which to get
            comments files.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.DotNetFrameworkLocations(System.String)">
            <summary>
            This is used to get a list of .NET Framework assembly locations
            </summary>
            <param name="version">The framework version for which to get
            comments files.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.FrameworkCommentList(System.String)">
            <summary>
            This is used to generate an appropriate list of entries that
            represent .NET Framework comments file locations for the various
            configuration files.
            </summary>
            <param name="listType">The type of list to generate
            (frameworkcommentlist, importframeworkcommentlist, or
            cachedframeworkcommentlist)</param>
            <returns>The list of framework comments file sources in the
            appropriate format.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.MergeComponentConfigurations">
            <summary>
            This is used to merge the component configurations from the
            project with the <b>sandcastle.config</b> file.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProcess.MergeComponent(System.String,SandcastleBuilder.Utils.BuildComponent.BuildComponentInfo,System.Xml.XmlNode,System.Xml.XmlNode,System.Boolean)">
            <summary>
            This handles merging of the custom component configurations into
            the configuration file including dependencies.
            </summary>
            <param name="id">The ID of the component to merge</param>
            <param name="info">The build component definition</param>
            <param name="rootNode">The root container node</param>
            <param name="configNode">The configuration node to merge</param>
            <param name="isConceptualConfig">True if this is a conceptual
            content configuration file or false if it is a reference build
            configuration file.</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.MSBuildExePath">
            <summary>
            This returns the path to MSBuild.exe
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.HelpFileBuilderFolder">
            <summary>
            This returns the location of the help file builder executables
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.TemplateFolder">
            <summary>
            This returns the location of the help file builder template
            folder.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ProjectFolder">
            <summary>
            This returns the project folder name
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ProjectFilename">
            <summary>
            This returns the project filename without the folder
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.OutputFolder">
            <summary>
            This returns the output folder where the log file and help file
            can be found after the build process has finished.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.WorkingFolder">
            <summary>
            This returns the name of the working files folder
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.SandcastleFolder">
            <summary>
            This returns the name of the main Sandcastle folder determined
            by the build process.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.Help1CompilerFolder">
            <summary>
            This returns the name of the HTML Help 1 compiler folder determined
            by the build process.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.Help2CompilerFolder">
            <summary>
            This returns the name of the MS Help 2 compiler folder determined
            by the build process.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.PresentationStyleFolder">
            <summary>
            This returns the name of the main Sandcastle presentation style
            folder determined by the build process.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.HelpFormatOutputFolders">
            <summary>
            This read-only property returns a collection of the output folders
            specific to each help file format produced by the build.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.LogFilename">
            <summary>
            This returns the name of the log file used for saving the
            build progress messages.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ReflectionInfoFilename">
            <summary>
            This returns the name of the reflection information file
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.CurrentProject">
            <summary>
            This returns the current project being used for the build
            </summary>
            <remarks>Although there is nothing stopping it, project options
            should not be modified during a build.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.CurrentFormat">
            <summary>
            This returns the current help file format being generated
            </summary>
            <remarks>The <b>GenerateHelpFormatTableOfContents</b>,
            <b>GenerateHelpFileIndex</b>, <b>GenerateHelpProject</b>,
            and <b>CompilingHelpFile</b> steps will run once for each help file
            format selected.  This property allows a plug-in to determine which
            files it may need to work with during those steps or to skip processing
            if it is not relevant.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.IsPartialBuild">
            <summary>
            This read-only property is used to get the partial build flag
            </summary>
            <remarks>Partial builds occur when editing the namespace summaries,
            editing the API filter, and as part of some plug-ins and may not
            require all build options.  In a partial build, build steps after
            <b>ApplyVisibilityProperties</b> are not executed.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ConceptualContent">
            <summary>
            This is used to get the conceptual content settings in effect for
            the build.
            </summary>
            <remarks>This will not return a useable value until after the
            <b>CopyStandardContent</b> <see cref="T:SandcastleBuilder.Utils.BuildEngine.BuildStep"/>.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.Help1Files">
            <summary>
            This returns a list of the HTML Help 1 (CHM) files that were built
            </summary>
            <remarks>If the HTML Help 1 format was not built, this returns an
            empty collection.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.Help2Files">
            <summary>
            This returns a list of the MS Help 2 (HxS) files that were built
            </summary>
            <remarks>If the MS Help 2 format was not built, this returns an
            empty collection.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.HelpViewerFiles">
            <summary>
            This returns a list of the MS Help Viewer (MSHC) files that were built
            </summary>
            <remarks>If the MS Help Viewer format was not built, this returns
            an empty collection.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.WebsiteFiles">
            <summary>
            This returns a list of the website files that were built
            </summary>
            <remarks>If the website format was not built, this returns an
            empty collection.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.SuppressApiFilter">
            <summary>
            This controls whether or not the API filter is suppressed.
            </summary>
            <value>By default, it is not suppressed and the API filter will be
            applied.  The API Filter designer uses this to suppress the filter
            so that all members are obtained.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ApiTocParentId">
            <summary>
            This is used to get or set the table of contents parent for the API
            content.
            </summary>
            <remarks>If not set, <see cref="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.RootContentContainerId"/> is used if
            it is set.  If it is not, <see cref="P:SandcastleBuilder.Utils.SandcastleProject.TocParentId"/> is
            used.  If this property is set, the value should be the ID of a topic in
            the project's conceptual content.  The topic must appear in a content layout
            file and must have its <c>Visible</c> property set to True in the layout file.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.ApiTocOrder">
            <summary>
            This is used to get or set the sort order for API content so that it
            appears within its parent in the correct position.
            </summary>
            <remarks>The default is -1 to let the build engine determine the best
            value to use based on the other project properties.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.RootContentContainerId">
            <summary>
            This is used to get or set the topic ID to use for the root content
            container node.
            </summary>
            <remarks>If not set, all content will appear at the root level
            in the <see cref="P:SandcastleBuilder.Utils.SandcastleProject.TocParentId"/>.  If set, the
            value should be the ID of a topic in the project's conceptual content.
            The topic must appear in a content layout file and must have its
            <c>Visible</c> property set to False in the layout file.</remarks>
        </member>
        <member name="E:SandcastleBuilder.Utils.BuildEngine.BuildProcess.BuildStepChanged">
            <summary>
            This event is raised to report a change in the build step
            </summary>
        </member>
        <member name="E:SandcastleBuilder.Utils.BuildEngine.BuildProcess.BuildProgress">
            <summary>
            This event is raised to report progress information throughout
            each build step.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.CommentsFiles">
            <summary>
            This read-only property returns the XML comments files collection
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.LoadedPlugIns">
            <summary>
            This returns a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing
            the currently loaded plug-ins.
            </summary>
            <value>The key is the plug in name.  The value is a reference to
            an <see cref="T:SandcastleBuilder.Utils.PlugIn.IPlugIn"/> interface for the plug-in.</value>
            <remarks>This allows you to access other plug-ins to facilitate
            sharing of information between them.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProcess.BuildApiFilter">
            <summary>
            This read-only property returns the API filter that is used at
            build-time to filter the API elements.
            </summary>
            <remarks>This is a combination of the project's API filter,
            namespace exclusions, and <code>&lt;exclude /&gt;</code> tag
            exclusions.</remarks>
        </member>
        <member name="T:SandcastleBuilder.Utils.Controls.DividerLabel">
            <summary>
            This is a simple derived label control that draws the label text
            followed by a dividing line to the right of the text.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.DividerLabel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.DividerLabel.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This is overridden to draw the text and the dividing line
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:SandcastleBuilder.Utils.PropertyBasedCollectionItem">
            <summary>
            This is the base class for collection items that are stored in an
            MSBuild property element.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.PropertyBasedCollectionItem.#ctor(SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Constructor
            </summary>
            <param name="project">The owning project</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.PropertyBasedCollectionItem.CheckProjectIsEditable">
            <summary>
            This is used to see if the project can be edited.  If not, abort
            the change by throwing an exception.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.PropertyBasedCollectionItem.ProjectFile">
            <summary>
            This is used to get the owning project file
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.PropertyBasedCollectionItem.IsDirty">
            <summary>
            This is used to get or set the dirty state of the item
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.PlugIn.PlugInInfo">
            <summary>
            This class contains information about the loaded plug-ins
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.PlugInInfo.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="t">Type information for the plug-in</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.PlugInInfo.NewInstance">
            <summary>
            Get a new instance of the plug-in
            </summary>
            <returns>A new instance of the plug-in</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.PlugInInfo.Name">
            <summary>
            This read-only property returns the name of the plug-in
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.PlugInInfo.Copyright">
            <summary>
            This read-only property returns the copyright information for the
            plug-in.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.PlugInInfo.Description">
            <summary>
            This read-only property returns a description of the plug-in
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.PlugInInfo.Version">
            <summary>
            This read-only property returns the version number of the plug-in
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.PlugInInfo.PlugInType">
            <summary>
            This read-only property returns type information for the plug-in
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.PlugIn.PlugInConfigurationDictionary">
            <summary>
            This dictionary class is used to hold the configurations for third
            party build process plug-ins such as the AjaxDoc plug-in.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.PlugInConfigurationDictionary.OnDictionaryChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This raises the <see cref="E:SandcastleBuilder.Utils.PlugIn.PlugInConfigurationDictionary.DictionaryChanged"/> event.
            </summary>
            <param name="e">The event arguments</param>
            <remarks>The dictionary doesn't raise events automatically so
            this is raised manually as needed.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.PlugInConfigurationDictionary.#ctor(SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Default constructor
            </summary>
            <param name="project">The project that owns the collection</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.PlugInConfigurationDictionary.FromXml(System.String)">
            <summary>
            This is used to load existing plug-in configuration items from
            the project file.
            </summary>
            <param name="plugIns">The plug-in items</param>
            <remarks>The information is stored as an XML fragment</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.PlugInConfigurationDictionary.ToXml">
            <summary>
            This is used to write the plug-in configuration info to an XML
            fragment ready for storing in the project file.
            </summary>
            <returns>The XML fragment containing the plug-in configuration
            info.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.PlugInConfigurationDictionary.Add(System.String,System.Boolean,System.String)">
            <summary>
            Add a new item to the dictionary
            </summary>
            <param name="id">The plug-in ID</param>
            <param name="enabled">True for enabled, false disabled</param>
            <param name="config">The plug-in configuration</param>
            <returns>The <see cref="T:SandcastleBuilder.Utils.PlugIn.PlugInConfiguration"/> added to the
            project.  If the ID already exists in the collection, the existing
            item is returned.</returns>
            <remarks>The <see cref="T:SandcastleBuilder.Utils.PlugIn.PlugInConfiguration"/> constructor is
            internal so that we control creation of the items and can
            associate them with the project.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.PlugInConfigurationDictionary.ProjectFile">
            <summary>
            This returns a reference to the owning project file
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.PlugInConfigurationDictionary.IsDirty">
            <summary>
            This is used to get or set the dirty state of the collection
            </summary>
        </member>
        <member name="E:SandcastleBuilder.Utils.PlugIn.PlugInConfigurationDictionary.DictionaryChanged">
            <summary>
            This event is raised when the dictionary is modified
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.MSHelpAttrCollection">
            <summary>
            This collection class is used to hold the help attribute items for a
            project.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpAttrCollection.#ctor(SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Constructor
            </summary>
            <param name="project">The project that owns the collection or
            null for a standalone collection</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpAttrCollection.Sort">
            <summary>
            This is used to sort the collection
            </summary>
            <remarks>Values are sorted by attribute name and value</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpAttrCollection.FromXml(System.String)">
            <summary>
            This is used to load existing help attribute items from the project
            file.
            </summary>
            <param name="helpAttrs">The help attribute items</param>
            <remarks>The information is stored as an XML fragment</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpAttrCollection.ReadXml(System.Xml.XmlReader)">
            <summary>
            Load the help attributes from the given XML text reader
            </summary>
            <param name="xr"></param>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpAttrCollection.ToXml">
            <summary>
            This is used to write the help attribute info to an XML fragment
            ready for storing in the project file.
            </summary>
            <returns>The XML fragment containing the help attribute info</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpAttrCollection.WriteXml(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Write the collection to the given XML text writer
            </summary>
            <param name="xw">The XML text writer to which the information
            is written.</param>
            <param name="includeContainer">True to write out the containing
            <b>HelpAttributes</b> element, false to exclude it.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpAttrCollection.Add(System.String,System.String)">
            <summary>
            Add a new item to the collection
            </summary>
            <param name="name">The attribute name</param>
            <param name="value">The attribute value</param>
            <returns>The <see cref="T:SandcastleBuilder.Utils.MSHelpAttr"/> added to the project.  If
            If the item already exists in the collection, the existing item is
            returned.</returns>
            <remarks>The <see cref="T:SandcastleBuilder.Utils.MSHelpAttr"/> constructor is internal so
            that we control creation of the items and can associate them with
            the project.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpAttrCollection.ToConfigurationString">
            <summary>
            Convert the collection to its string form for use in the
            <b>sandcastle.config</b> file.
            </summary>
            <returns>The help attribute collection in string form ready for
            use in the Sandcastle BuildAssembler configuration file.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpAttrCollection.MarkAsDirty">
            <summary>
            This is used to mark the collection as changed when there is no
            associated project.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpAttrCollection.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This is overridden to mark the collection as dirty when it changes
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSHelpAttrCollection.IsDirty">
            <summary>
            This is used to get or set the dirty state of the collection
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.MSHelpKeywordEditorDlg">
            <summary>
            This form is used to edit the help index keyword collection
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpKeywordEditorDlg.#ctor(SandcastleBuilder.Utils.MSHelpKeywordCollection)">
            <summary>
            Constructor
            </summary>
            <param name="currentKeywords">The item collection to edit</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpKeywordEditorDlg.btnClose_Click(System.Object,System.EventArgs)">
            <summary>
            Close the form
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpKeywordEditorDlg.btnDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Delete the selected keyword
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpKeywordEditorDlg.btnHelp_Click(System.Object,System.EventArgs)">
            <summary>
            View help for this form
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpKeywordEditorDlg.dgvKeywords_CellValueChanged(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Mark the collection as dirty if changed
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="F:SandcastleBuilder.Utils.Design.MSHelpKeywordEditorDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpKeywordEditorDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpKeywordEditorDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.ComponentConfigurationEditorDlg">
            <summary>
            This is used to select and edit the third-party build component
            configurations.
            </summary>
            <remarks>To be editable, the build component configuration file must
            be present in the <b>.\Build Components</b> folder or a subfolder
            beneath it.  The build components folder is found under the common
            application data folder.</remarks>
        </member>
        <member name="F:SandcastleBuilder.Utils.Design.ComponentConfigurationEditorDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ComponentConfigurationEditorDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ComponentConfigurationEditorDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ComponentConfigurationEditorDlg.#ctor(SandcastleBuilder.Utils.BuildComponent.ComponentConfigurationDictionary)">
            <summary>
            Constructor
            </summary>
            <param name="configs">The current configurations</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ComponentConfigurationEditorDlg.btnClose_Click(System.Object,System.EventArgs)">
            <summary>
            Close this form
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ComponentConfigurationEditorDlg.lbAvailableComponents_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Update the build component details when the selected index changes
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ComponentConfigurationEditorDlg.lbProjectComponents_ItemCheck(System.Object,System.Windows.Forms.ItemCheckEventArgs)">
            <summary>
            Update the enabled state of the build component based on its
            checked state.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ComponentConfigurationEditorDlg.btnAddComponent_Click(System.Object,System.EventArgs)">
            <summary>
            Add the selected build component to the project with a default
            configuration.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ComponentConfigurationEditorDlg.btnConfigure_Click(System.Object,System.EventArgs)">
            <summary>
            Edit the selected build component's project configuration
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ComponentConfigurationEditorDlg.CurrentDomain_AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            This is handled to resolve dependent assemblies and load them
            when necessary.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="args">The event arguments</param>
            <returns>The loaded assembly</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ComponentConfigurationEditorDlg.btnDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Delete the selected build component from the project
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ComponentConfigurationEditorDlg.btnHelp_Click(System.Object,System.EventArgs)">
            <summary>
            View help for this form
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:SandcastleBuilder.Utils.ConceptualContent.TokenCollection">
            <summary>
            This collection class is used to hold the conceptual content tokens
            for an associated token file.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TokenCollection.#ctor(SandcastleBuilder.Utils.FileItem)">
            <summary>
            Constructor
            </summary>
            <param name="file">The token file associated with the collection.</param>
            <remarks>Tokens are not loaded until the <see cref="M:SandcastleBuilder.Utils.ConceptualContent.TokenCollection.Load"/> method
            is called.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TokenCollection.Sort">
            <summary>
            This is used to sort the collection
            </summary>
            <remarks>Values are sorted by token name and value.  Comparisons
            are case-sensitive.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TokenCollection.Load">
            <summary>
            Load the collection from the related file
            </summary>
            <remarks>This will be done automatically at constructor.  This can
            be called to reload the collection if needed.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TokenCollection.Save">
            <summary>
            Save the token collection to its related file ready for use by
            <b>BuildAssembler</b>.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TokenCollection.FileItem">
            <summary>
            This read-only property returns the project file item associated
            with the collection.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.COMReferenceItem">
            <summary>
            This represents a COM reference item that can be used by
            <b>MRefBuilder</b> to locate assembly dependencies for the assemblies
            being documented.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.ReferenceItem">
            <summary>
            This represents a reference item that can be used by <b>MRefBuilder</b>
            to locate assembly dependencies for the assemblies being documented.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.BaseBuildItem">
            <summary>
            This is a base wrapper class for a build item in the project
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BaseBuildItem.#ctor(SandcastleBuilder.Utils.ProjectElement)">
            <summary>
            Constructor
            </summary>
            <param name="element">The project element associated with the
            instance</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.BaseBuildItem.ProjectElement">
            <summary>
            This returns the project element associated with the instance
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.ShouldSerializeHintPath">
            <summary>
            This is used to see if the <see cref="P:SandcastleBuilder.Utils.ReferenceItem.HintPath"/> property should
            be serialized.
            </summary>
            <returns>True to serialize it, false if it matches the default
            and should not be serialized.  This property cannot be reset
            as it should always have a value.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.hintPath_PersistablePathChanging(System.Object,System.EventArgs)">
            <summary>
            This is used to handle changes in the <see cref="P:SandcastleBuilder.Utils.ReferenceItem.HintPath"/>
            properties such that the hint path gets stored in the project file.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.#ctor(SandcastleBuilder.Utils.ProjectElement)">
            <summary>
            Internal Constructor
            </summary>
            <param name="element">The project element</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.Equals(System.Object)">
            <summary>
            See if specified item equals this one by name alone
            </summary>
            <param name="obj">The object to compare to this one</param>
            <returns>True if equal, false if not</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.GetHashCode">
            <summary>
            Get a hash code for this item
            </summary>
            <returns>Returns the hash code for the reference description</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.ToString">
            <summary>
            Return a string representation of the item
            </summary>
            <returns>Returns the reference description</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.GetAttributes">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.GetClassName">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.GetComponentName">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.GetConverter">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.GetDefaultEvent">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.GetDefaultProperty">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.GetEditor(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.GetEvents(System.Attribute[])">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.GetEvents">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.GetProperties(System.Attribute[])">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.GetProperties">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItem.FilterProperties(System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            This is used to filter out the <see cref="P:SandcastleBuilder.Utils.ReferenceItem.HintPath"/> property if
            not used.
            </summary>
            <param name="pdc">The property descriptor collection to filter</param>
            <returns>The filtered property descriptor collection</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.ReferenceItem.HintPath">
            <summary>
            This is used to set or path to the dependency
            </summary>
            <value>For GAC dependencies, this should be null.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ReferenceItem.Reference">
            <summary>
            This is used to get the reference description
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.COMReferenceItem.#ctor(SandcastleBuilder.Utils.ProjectElement)">
            <summary>
            Internal Constructor
            </summary>
            <param name="element">The project element</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.COMReferenceItem.HintPath">
            <summary>
            Hint path isn't applicable to COM references
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.COMReferenceItem.Guid">
            <summary>
            This is used to get the project reference's GUID
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.COMReferenceItem.VersionMajor">
            <summary>
            This is used to get the major version number
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.COMReferenceItem.VersionMinor">
            <summary>
            This is used to get the minor version number
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.COMReferenceItem.WrapperTool">
            <summary>
            This is used to get the wrapper tool
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.MSBuild.BuildHelpViewerFile">
            <summary>
            This task is used to compress the help content into a Microsoft Help
            Container (a ZIP file with a .mshc extension).
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.BuildHelpViewerFile.Execute">
            <summary>
            This is used to execute the task and perform the build
            </summary>
            <returns>True on success or false on failure.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.BuildHelpViewerFile.zip_AddProgress(System.Object,Ionic.Zip.AddProgressEventArgs)">
            <summary>
            This is used to report progress as files are added to the archive
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.BuildHelpViewerFile.zip_SaveProgress(System.Object,Ionic.Zip.SaveProgressEventArgs)">
            <summary>
            This is used to report progress as the archive is saved
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildHelpViewerFile.WorkingFolder">
            <summary>
            This is used to pass in the working folder where the files to
            compress are located.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildHelpViewerFile.OutputFolder">
            <summary>
            This is used to pass in the output folder where the compressed
            output file is stored.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildHelpViewerFile.HtmlHelpName">
            <summary>
            This is used to pass in the name of the help file (no path or
            extension).
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.SyntaxFilterTypeConverter">
            <summary>
            This type converter ensures that syntax filter values are correct.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.SyntaxFilterTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.SyntaxFilterTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
            <returns>A comma-separated list of recognized syntax filter IDs</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.SyntaxFilterTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:SandcastleBuilder.Utils.ConceptualContent.ApiParentMode">
            <summary>
            This public enumerated type defines the API parent mode for a conceptual
            topic.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ConceptualContent.ApiParentMode.None">
            <summary>Not a parent to the API content</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ConceptualContent.ApiParentMode.InsertBefore">
            <summary>Insert the API content before this element</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ConceptualContent.ApiParentMode.InsertAfter">
            <summary>Insert the API content after this element</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ConceptualContent.ApiParentMode.InsertAsChild">
            <summary>Insert the API content as a child of this element</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.DocumentationSource">
            <summary>
            This represents an assembly, an XML comments file, a Visual Studio
            Solution (C#, VB.NET, or J#), or a Visual Studio solution containing
            one or more C#, VB.NET or J# projects to use for building a help file.
            </summary>
            <remarks>Wildcards are supported in the <see cref="P:SandcastleBuilder.Utils.DocumentationSource.SourceFile"/>
            property.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.DocumentationSource.sourceFile_PersistablePathChanging(System.Object,System.EventArgs)">
            <summary>
            This is used to handle changes in the <see cref="T:SandcastleBuilder.Utils.FilePath"/>
            properties such that the source path gets stored in the project
            file.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.DocumentationSource.ExtractProjectsFromSolution(System.String,System.String,System.String,System.Collections.ObjectModel.Collection{SandcastleBuilder.Utils.ProjectFileConfiguration})">
            <summary>
            Extract all project files from the given Visual Studio solution file
            </summary>
            <param name="solutionFile">The Visual Studio solution from which to
            extract the projects.</param>
            <param name="configuration">The configuration to use</param>
            <param name="platform">The platform to use</param>
            <param name="projectFiles">The collection used to return the
            extracted projects.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.DocumentationSource.#ctor(System.String,System.String,System.String,System.Boolean,SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Internal constructor
            </summary>
            <param name="filename">The filename of the documentation source</param>
            <param name="projConfig">The configuration to use for projects</param>
            <param name="projPlatform">The platform to use for projects</param>
            <param name="subFolders">True to include subfolders, false to
            only search the top-level folder.</param>
            <param name="project">The owning project</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.DocumentationSource.Equals(System.Object)">
            <summary>
            See if specified item equals this one
            </summary>
            <param name="obj">The object to compare to this one</param>
            <returns>True if equal, false if not</returns>
            <remarks>For documentation sources, equality is based solely on
            the <see cref="P:SandcastleBuilder.Utils.DocumentationSource.SourceFile"/> value.  The configuration and
            platform settings are not considered.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.DocumentationSource.GetHashCode">
            <summary>
            Get a hash code for this item
            </summary>
            <returns>Returns the hash code for the assembly path and
            XML comments path.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.DocumentationSource.ToString">
            <summary>
            Return a string representation of the item
            </summary>
            <returns>Returns the assembly path and XML comments path separated
            by a comma.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.DocumentationSource.Assemblies(System.String,System.Boolean)">
            <summary>
            This returns a collection of assemblies based on the specified
            wildcard.
            </summary>
            <param name="wildcard">The wildcard to use to find assemblies.</param>
            <param name="includeSubfolders">If true and the wildcard parameter
            includes wildcard characters, subfolders will be searched as well.
            If not, only the top-level folder is searched.</param>
            <returns>A list of assemblies matching the wildcard</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.DocumentationSource.CommentsFiles(System.String,System.Boolean)">
            <summary>
            This returns a collection of XML comments files based on the
            specified wildcard.
            </summary>
            <param name="wildcard">The wildcard to use to find comments
            files.</param>
            <param name="includeSubfolders">If true and the wildcard parameter
            includes wildcard characters, subfolders will be searched as well.
            If not, only the top-level folder is searched.</param>
            <returns>A list of XML comments files matching the wildcard</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.DocumentationSource.Projects(System.String,System.Boolean,System.String,System.String)">
            <summary>
            This returns a collection of MSBuild project filenames based on the
            specified wildcard.
            </summary>
            <param name="wildcard">The wildcard to use to find solutions and
            projects.</param>
            <param name="includeSubfolders">If true and the wildcard parameter
            includes wildcard characters, subfolders will be searched as well.
            If not, only the top-level folder is searched.</param>
            <param name="configuration">The configuration to use</param>
            <param name="platform">The platform to use</param>
            <returns>A list of projects matching the wildcard.  Any solution
            files (.sln) found are returned last, each followed by the projects
            extracted from it.</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.DocumentationSource.Configuration">
            <summary>
            This is used to get or set the project configuration to use when
            the source path refers to a Visual Studio solution or project.
            </summary>
            <value>If not set, the configuration value from the owning help
            file project will be used.  This will be ignored for assembly
            and XML comments file entries.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.DocumentationSource.Platform">
            <summary>
            This is used to get or set the project platform to use when the
            source path refers to a Visual Studio solution or project.
            </summary>
            <value>If not set, the platform value from the owning help file
            project will be used.  This will be ignored for assembly and XML
            comments file entries.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.DocumentationSource.SourceFile">
            <summary>
            This is used to set or get the documentation source file path
            </summary>
            <value>Wildcards are supported.  If used, all files matching
            the wildcard will be included as long as their extension is one of
            the following: .exe, .dll, .*proj, .sln.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.DocumentationSource.IncludeSubFolders">
            <summary>
            This is used to get or set whether subfolders are included when
            searching for files if the <see cref="P:SandcastleBuilder.Utils.DocumentationSource.SourceFile"/> value
            contains wildcards.
            </summary>
            <value>If set to true and the source file value contains wildcards,
            subfolders will be included.  If set to false, the default, or the
            source file value does not contain wildcards, only the top-level
            folder is included in the search.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.DocumentationSource.SourceDescription">
            <summary>
            This returns a description of the entry suitable for display in a
            bound list control.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.ReferenceItemCollection">
            <summary>
            This collection class is used to hold the reference items for a project
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItemCollection.#ctor(SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Internal constructor
            </summary>
            <param name="project">The project that owns the collection</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItemCollection.Sort">
            <summary>
            This is used to sort the collection in ascending order.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItemCollection.EnsureCurrent(System.Boolean)">
            <summary>
            This is used to ensure that the collection has up to date
            information about the reference build items in the project.
            </summary>
            <param name="refresh">True to refresh if out of date or false
            to only load the references if not already done.</param>
            <remarks>The collection is only loaded when necessary</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItemCollection.AddReference(System.String,System.String)">
            <summary>
            Add a new GAC or file reference item to the collection
            </summary>
            <param name="referenceName">The reference name.  This will be the
            GAC name or the base filename for file reference.</param>
            <param name="hintPath">The hint path for file references.  For
            GAC references, this should be null.</param>
            <returns>The <see cref="T:SandcastleBuilder.Utils.ReferenceItem"/> added to the
            project.  If the named item already exists in the collection
            a reference to the existing item is returned.</returns>
            <remarks>The <see cref="T:SandcastleBuilder.Utils.ReferenceItem"/> constructor is internal
            so that we control creation of the items and can associate them
            with a project element.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItemCollection.AddProjectReference(System.String)">
            <summary>
            Add a new project reference item to the collection
            </summary>
            <param name="projectPath">The path to the project</param>
            <returns>The <see cref="T:SandcastleBuilder.Utils.ProjectReferenceItem"/> added to the
            project.  If the named item already exists in the collection
            a reference to the existing item is returned.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItemCollection.RemoveItem(System.Int32)">
            <summary>
            Remove an item from the collection and from the project file
            </summary>
            <param name="index">The index of the item to remove</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ReferenceItemCollection.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This is overridden to suppress the event when loading references
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:SandcastleBuilder.Utils.NamingMethod">
            <summary>
            This public enumerated type defines the naming method to use for the
            help topic filenames.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.NamingMethod.Guid">
            <summary>Use the default GUID file naming method.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.NamingMethod.MemberName">
            <summary>Use the member name without parameters as the
            filename.  The characters ":", ".", "#", and "`" in the name are
            replaced with an underscore (i.e. T:CustomType becomes
            T_CustomType, M:CustomType.#ctor becomes M_CustomType__ctor,
            P:CustomType.Property becomes P:CustomType_Property, etc).
            Duplicate names will have an incrementing value appended to the
            end of the name (i.e. M_CustomType_Method,
            M_CustomType.Method_1, M_CustomType_Method_2, etc).</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.NamingMethod.HashedMemberName">
            <summary>Use the hashed member name without parameters as the
            filename.  No character replacements are made for this option
            and the <b>GetHashCode</b> method is used to generate the hash
            value and it is formatted as a hex value.  This is useful for
            extremely long type names that cause the filename to exceed the
            maximum length when the full path is included.  Duplicate names
            will have an incrementing value appended to the name prior to
            creating the hash value as needed.</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.ProjectElement">
            <summary>
            This class is a wrapper for build items in the project.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.BuildAction">
            <summary>Build action</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.IncludePath">
            <summary>Include item</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.HintPath">
            <summary>File reference hint path</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.LinkPath">
            <summary>Linked item path</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.ProjectGuid">
            <summary>Project GUID item</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.Name">
            <summary>Project name item</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.Guid">
            <summary>Project COM object's GUID</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.VersionMajor">
            <summary>Project COM object's major version</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.VersionMinor">
            <summary>Project COM object's minor version</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.WrapperTool">
            <summary>Project COM object's wrapper tool</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.Configuration">
            <summary>Configuration setting</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.Platform">
            <summary>Platform setting</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.OutDir">
            <summary>Output directory setting</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.ImageId">
            <summary>Image ID</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.AlternateText">
            <summary>Alternate text</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.CopyToMedia">
            <summary>Copy to media folder</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.ExcludeFromToc">
            <summary>Exclude from table of contents</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.SortOrder">
            <summary>Sort order</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.SolutionPath">
            <summary>Solution path (directory and filename)</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.SolutionDir">
            <summary>Solution directory</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.SolutionFileName">
            <summary>Solution filename (no path)</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.SolutionName">
            <summary>Solution name (no path or extension)</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ProjectElement.SolutionExt">
            <summary>Solution extension</summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ProjectElement.#ctor(SandcastleBuilder.Utils.SandcastleProject,Microsoft.Build.Evaluation.ProjectItem)">
            <summary>
            This constructor is used to wrap an existing project item.
            </summary>
            <param name="project">The project that owns the item</param>
            <param name="existingItem">The existing item</param>
            <overloads>There are two overloads for the constructor</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.ProjectElement.#ctor(SandcastleBuilder.Utils.SandcastleProject,System.String,System.String)">
            <summary>
            This constructor is used to create a new build item and add it to
            the project.
            </summary>
            <param name="project">The project that will own the item</param>
            <param name="itemType">The type of build item to create</param>
            <param name="itemPath">The path to the item.  This can be relative
            or absolute and may contain variable references.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ProjectElement.CheckProjectIsEditable">
            <summary>
            This is used to see if the project can be edited.  If not, abort
            the change by throwing an exception.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ProjectElement.HasMetadata(System.String)">
            <summary>
            See if the named metadata item exists
            </summary>
            <param name="name">The metadata name for which to check</param>
            <returns>True if present, false if not</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ProjectElement.GetMetadata(System.String)">
            <summary>
            Get a metadata value from a project element
            </summary>
            <param name="name">The name of the metadata element to get</param>
            <returns>The value of the metadata element</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ProjectElement.SetMetadata(System.String,System.String)">
            <summary>
            Set a metadata value in the project item
            </summary>
            <param name="name">The name of the metadata element</param>
            <param name="value">The value to store in the element</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ProjectElement.RemoveFromProjectFile">
            <summary>
            Remove the item from the project
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ProjectElement.op_Equality(SandcastleBuilder.Utils.ProjectElement,SandcastleBuilder.Utils.ProjectElement)">
            <summary>
            Overload for equal operator
            </summary>
            <param name="element1">The first element object</param>
            <param name="element2">The second element object</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ProjectElement.op_Inequality(SandcastleBuilder.Utils.ProjectElement,SandcastleBuilder.Utils.ProjectElement)">
            <summary>
            Overload for not equal operator
            </summary>
            <param name="element1">The first element object</param>
            <param name="element2">The second element object</param>
            <returns>True if not equal, false if they are equal.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ProjectElement.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ProjectElement.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:SandcastleBuilder.Utils.ProjectElement.ItemName">
            <summary>
            This is used to set or get the item name (a.k.a BuildAction)
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ProjectElement.Include">
            <summary>
            This is used to set or get the filename (Include attribute)
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ProjectElement.Project">
            <summary>
            This read-only property is used to get the containing project
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.PlugIn.ExecutionContext">
            <summary>
            This class defines the execution context in which the plug-in is being
            called during the build process.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.ExecutionContext.#ctor(SandcastleBuilder.Utils.BuildEngine.BuildStep,SandcastleBuilder.Utils.PlugIn.ExecutionBehaviors)">
            <summary>
            Constructor
            </summary>
            <param name="plugInBuildStep">The current build step.</param>
            <param name="plugInBehavior">The behavior of the plug-in for the
            current context.</param>
            <exception cref="T:System.ArgumentException">This is thrown if an attempt
            is made to specify more than one behavior type.</exception>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.ExecutionContext.BuildStep">
            <summary>
            This read-only property returns the current build step
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.ExecutionContext.Behavior">
            <summary>
            This read-only property returns the execution behavior for the
            plug-in in the current context.
            </summary>
            <value><b>Before</b> indicates that it is being called before the
            normal help file builder processing.  <b>After</b> indicates that
            it is being called after the normal help file builder processing.
            <b>InsteadOf</b> indicates that it is being called instead of the
            normal help file builder processing.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.ExecutionContext.Executed">
            <summary>
            This property is used to set or get whether or not the plug-in
            actually executed.
            </summary>
            <value>It is true by default.  Set it to false if the plug-in
            did not execute.</value>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.FilePathObjectEditor">
            <summary>
            This is a type editor that can display a file dialog to allow
            selection of a file path at design time for a <see cref="T:SandcastleBuilder.Utils.FilePath"/>
            object.
            </summary>
            <remarks>It is used in conjunction with the
            <see cref="T:SandcastleBuilder.Utils.Design.FileDialogAttribute"/> to specify the file dialog title,
            filter, and type</remarks>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.FilePathStringEditor">
            <summary>
            This is a type editor that can display a file dialog to allow
            selection of a file path at design time for a string object.
            </summary>
            <remarks>It is used in conjunction with the
            <see cref="T:SandcastleBuilder.Utils.Design.FileDialogAttribute"/> to specify the file dialog title,
            filter, and type</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FilePathStringEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This is overridden to edit the value using a file dialog.
            </summary>
            <param name="context">The descriptor context</param>
            <param name="provider">The provider</param>
            <param name="value">The file path as an object</param>
            <returns>The selected file path as an object</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FilePathStringEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to specify the editor's edit style
            </summary>
            <param name="context">The descriptor context</param>
            <returns>Always returns <b>Modal</b> as long as there is a context
            and an instance.  Otherwise, it returns <b>None</b>.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FilePathObjectEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This is overridden to edit the value using a file dialog.
            </summary>
            <param name="context">The descriptor context</param>
            <param name="provider">The provider</param>
            <param name="value">The file path as an object</param>
            <returns>The selected file path as an object</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.ContentPlacement">
            <summary>
            This public enumerated type defines the placement of the additional
            content items in the table of contents if any are defined.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ContentPlacement.AboveNamespaces">
            <summary>Additional content appears above the namespaces</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ContentPlacement.BelowNamespaces">
            <summary>Additional content appears below the namespaces</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg">
            <summary>
            This form is used to edit namespace summaries and to indicate which
            namespaces should appear in the help file.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.#ctor(SandcastleBuilder.Utils.NamespaceSummaryItemCollection)">
            <summary>
            Constructor
            </summary>
            <param name="items">The namespace summary item collection to edit</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.buildProcess_BuildStepChanged(System.Object,SandcastleBuilder.Utils.BuildEngine.BuildProgressEventArgs)">
            <summary>
            This is called by the build process thread to update the main
            window with the current build step.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.buildProcess_BuildProgress(System.Object,SandcastleBuilder.Utils.BuildEngine.BuildProgressEventArgs)">
            <summary>
            This is called by the build process thread to update the main
            window with information about its progress.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.LoadNamespaces(System.String)">
            <summary>
            Load the namespace information from the reflection information
            </summary>
            <param name="reflectionFile">The reflection information filename</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.NamespacesDlg_Load(System.Object,System.EventArgs)">
            <summary>
            Do a partial build on load to gather new namespace information that
            isn't currently in the project's namespace list.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.NamespacesDlg_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Shut down the build process thread and clean up on exit
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.btnClose_Click(System.Object,System.EventArgs)">
            <summary>
            Store the changes and close the dialog box
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.btnHelp_Click(System.Object,System.EventArgs)">
            <summary>
            View help for this form
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.lbNamespaces_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            When the item changes, show its summary in the text box and set
            the Appears In list box data source.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.lbNamespaces_ItemCheck(System.Object,System.Windows.Forms.ItemCheckEventArgs)">
            <summary>
            Mark the summary item as documented or not when the check state
            changes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.txtSummary_Enter(System.Object,System.EventArgs)">
            <summary>
            Clear the selection to prevent accidental deletion of the text
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.txtSummary_Leave(System.Object,System.EventArgs)">
            <summary>
            Store changes to the summary when the textbox loses focus
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.btnDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Delete an old namespace entry that is no longer needed.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.btnApplyFilter_Click(System.Object,System.EventArgs)">
            <summary>
            Apply the namespace filter to the namespace list
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.btnAll_Click(System.Object,System.EventArgs)">
            <summary>
            Mark all namespaces as included
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.btnNone_Click(System.Object,System.EventArgs)">
            <summary>
            Mark all namespaces as excluded
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
            <remarks>Note that at least one will need to be selected or the
            build will fail due to lack of information to document.</remarks>
        </member>
        <member name="F:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.BuildAction">
            <summary>
            This defines the build action (item name) for build items in a project
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildAction.None">
            <summary>No action, the item is ignored</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildAction.Image">
            <summary>Conceptual content image file</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildAction.CodeSnippets">
            <summary>Conceptual content code snippets file</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildAction.Tokens">
            <summary>Conceptual content token file</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildAction.ContentLayout">
            <summary>Conceptual content layout file</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildAction.SiteMap">
            <summary>Additional content site map file</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildAction.TopicTransform">
            <summary>Additional content topic transformation file</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildAction.Content">
            <summary>General content file (HTML, stylesheet, images not
            related to conceptual content, etc.)</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildAction.ResourceItems">
            <summary>Resource items file</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildAction.Folder">
            <summary>A folder (project explorer designation only, not a build
            action)</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildAction.Project">
            <summary>The project (project explorer designation only, not a
            build action)</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildAction.DocumentationSource">
            <summary>A documentation source (project explorer designation only,
            not a build action)</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildAction.ReferenceItem">
            <summary>A reference item (project explorer designation only, not a
            build action)</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.MissingTags">
            <summary>
            This public enumerated type defines the missing documentation tags for
            which to search.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.MissingTags.None">
            <summary>Do not search for any missing tags.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.MissingTags.Summary">
            <summary>Search for missing <c>&lt;summary&gt;</c> tags.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.MissingTags.Parameter">
            <summary>Search for missing <c>&lt;param&gt;</c> tags.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.MissingTags.Returns">
            <summary>Search for missing <c>&lt;returns&gt;</c> tags.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.MissingTags.Value">
            <summary>Search for missing <c>&lt;value&gt;</c> tags.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.MissingTags.Remarks">
            <summary>Search for missing <c>&lt;remarks&gt;</c> tags.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.MissingTags.AutoDocumentCtors">
            <summary>Automatically document constructors if they are missing a
            <c>&lt;summary&gt;</c> tag.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.MissingTags.Namespace">
            <summary>Search for missing namespace comments.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.MissingTags.TypeParameter">
            <summary>Search for missing &lt;typeparam&gt; tags.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.MissingTags.IncludeTargets">
            <summary>Search for missing &lt;include&gt; target documentation.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.MissingTags.AutoDocumentDispose">
            <summary>Automatically document dispose methods if they are missing
            <c>&lt;summary&gt;</c> and/or <c>&lt;param&gt;</c> tag.</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.XPath.MatchesRegexFunction">
             <summary>
             This class is a custom XPath function used to perform a regular
             expression search in XPath queries.
             </summary>
             <remarks>The function should be passed a value to compare, the regular
             expression to use, and a Boolean indicating whether or not to do a
             case-insensitive match.</remarks>
             <example>
             Some examples of XPath queries using the function:
             <code lang="none">
             //apis/api[matches-regex(string(@id), 'utils.*proj', boolean(true))
            
             //apis/api[matches-regex(string(@id), 'Proj|Filt|Excep', boolean(false))
             </code>
             </example>
        </member>
        <member name="M:SandcastleBuilder.Utils.XPath.MatchesRegexFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
            <summary>
            This is called to invoke the <b>matches-regex</b> method.
            </summary>
            <param name="xsltContext">The XSLT context for the function call</param>
            <param name="args">The arguments for the function call</param>
            <param name="docContext">The context node for the function call</param>
            <returns>An object representing the return value of the function
            (true for a match, false for no match).</returns>
            <exception cref="T:System.ArgumentException">This is thrown if the
            number of arguments for the function is not three.</exception>
        </member>
        <member name="P:SandcastleBuilder.Utils.XPath.MatchesRegexFunction.ArgTypes">
            <summary>
            Gets the supplied XPath types for the function's argument list.
            This information can be used to discover the signature of the
            function which allows you to differentiate between overloaded
            functions.
            </summary>
            <value>Always returns an array with two String types and a Boolean
            type specified</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.XPath.MatchesRegexFunction.Minargs">
            <summary>
            Gets the minimum number of arguments for the function. This enables
            the user to differentiate between overloaded functions.
            </summary>
            <value>Always returns three</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.XPath.MatchesRegexFunction.Maxargs">
            <summary>
            Gets the maximum number of arguments for the function. This enables
            the user to differentiate between overloaded functions.
            </summary>
            <value>Always returns three</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.XPath.MatchesRegexFunction.ReturnType">
            <summary>
            Gets the XPath type returned by the function
            </summary>
            <value>Always returns Boolean</value>
        </member>
        <member name="T:SandcastleBuilder.Utils.MSHelpKeywordCollection">
            <summary>
            This collection class is used to hold the help index keyword items for
            a project.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpKeywordCollection.Sort">
            <summary>
            This is used to sort the collection
            </summary>
            <remarks>Values are sorted by index name and term</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpKeywordCollection.ReadXml(System.Xml.XmlReader)">
            <summary>
            This is used to load the keyword collection from the project
            file.
            </summary>
            <param name="xr">The XML text reader from which the information
            is loaded.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpKeywordCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            This is used to save the keyword collection to the project
            file.
            </summary>
            <param name="xw">The XML text writer to which the information
            is written.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpKeywordCollection.MarkAsDirty">
            <summary>
            This is used to mark the collection as changed when there is no
            associated project.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.MSBuild.BuildAssembler">
            <summary>
            This task is used to run BuildAssembler.exe which is used to generate
            help topics.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.BuildAssembler.ValidateParameters">
            <summary>
            Validate the parameters
            </summary>
            <returns>True if the parameters are valid, false if not</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.BuildAssembler.GenerateFullPathToTool">
            <summary>
            This returns the full path to the tool
            </summary>
            <returns>The full path to the tool</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.BuildAssembler.GenerateCommandLineCommands">
            <summary>
            Generate the command line parameters
            </summary>
            <returns>The command line parameters</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.BuildAssembler.GetWorkingDirectory">
            <summary>
            This is overridden to return the working folder for the build
            </summary>
            <returns>The working folder for the build</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildAssembler.ToolName">
            <summary>
            This read-only property returns the tool name (BuildAssembler.exe)
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildAssembler.StandardErrorLoggingImportance">
            <summary>
            This is overridden to force all standard error info to be logged
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildAssembler.StandardOutputLoggingImportance">
            <summary>
            This is overridden to force all standard output info to be logged
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildAssembler.SandcastlePath">
            <summary>
            This is used to pass in the path to the Sandcastle tools
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildAssembler.ConfigurationFile">
            <summary>
            This is used to pass in the configuration filename
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildAssembler.ManifestFile">
            <summary>
            This is used to pass in the manifest filename
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildAssembler.WorkingFolder">
            <summary>
            This is used to pass in the working folder where the files are
            located.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.MSHelpAttrEditorDlg">
            <summary>
            This form is used to edit the help attribute collection
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.Design.MSHelpAttrEditorDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpAttrEditorDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpAttrEditorDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpAttrEditorDlg.#ctor(SandcastleBuilder.Utils.MSHelpAttrCollection,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="currentAttributes">The item collection to edit</param>
            <param name="isTopic">If true, the Default button is hidden as
            topics don't need to include the default attributes.  They are
            added automatically at build time.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpAttrEditorDlg.btnClose_Click(System.Object,System.EventArgs)">
            <summary>
            Close the form
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpAttrEditorDlg.btnAdd_Click(System.Object,System.EventArgs)">
            <summary>
            Add new help attribute
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpAttrEditorDlg.btnDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Delete the selected attribute
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpAttrEditorDlg.btnDefault_Click(System.Object,System.EventArgs)">
            <summary>
            Insert a default set of attributes if they are not already there
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpAttrEditorDlg.btnHelp_Click(System.Object,System.EventArgs)">
            <summary>
            View help for this form
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpAttrEditorDlg.dgvAttributes_CellValueChanged(System.Object,System.Windows.Forms.DataGridViewCellEventArgs)">
            <summary>
            Mark the collection as dirty if changed
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:SandcastleBuilder.Utils.ConceptualContent.ImageReference">
            <summary>
            This represents a conceptual content image that can be used to insert
            a reference to an image in a topic.
            </summary>
            <remarks>This class is serializable so that it can be copied to the
            clipboard.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ImageReference.#ctor(SandcastleBuilder.Utils.FileItem)">
            <summary>
            Constructor
            </summary>
            <param name="buildItem">The build item to associate with the
            image reference.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ImageReference.ToMediaLink">
            <summary>
            Convert the image reference to a <c>&lt;mediaLink&gt;</c> element.
            </summary>
            <returns>The image in its <c>&lt;mediaLink&gt;</c> element form</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ImageReference.ToMediaLinkInline">
            <summary>
            Convert the image reference to a <c>&lt;mediaLinkInline&gt;</c>
            element.
            </summary>
            <returns>The image in its <c>&lt;mediaLinkInline&gt;</c> element form</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ImageReference.ToExternalLink">
            <summary>
            Convert the image reference to an <c>&lt;externalLink&gt;</c> element.
            </summary>
            <returns>The image in its <c>&lt;externalLink&gt;</c> element form</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ImageReference.ToImageLink">
            <summary>
            Convert the image reference to an <c>&lt;img&gt;</c> element.
            </summary>
            <returns>The image in its <c>&lt;img&gt;</c> element form</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ImageReference.Filename">
            <summary>
            This is used to get the image filename
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ImageReference.FullPath">
            <summary>
            This is used to get the full path to the image file
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ImageReference.Id">
            <summary>
            This is used to get the unique ID of the image
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ImageReference.CopyToMedia">
            <summary>
            This is used to get or set whether or not to copy the image to the
            <b>.\Output\[HelpFormat]\media</b> folder if it is not referenced
            in a media link.
            </summary>
            <value>The default is false and the image will not be copied
            unless it is referenced in a media link.  If set to true, the
            image will be copied even if it is not referenced.  This is useful
            for forcing the copy of images referenced in external links
            which are not handled by the art reference build component.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ImageReference.AlternateText">
            <summary>
            This is used to get or set the optional alternate text for the image
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ImageReference.DisplayTitle">
            <summary>
            This read-only property is used to get a title for display
            (i.e. in the designer).
            </summary>
            <value>If there is <see cref="P:SandcastleBuilder.Utils.ConceptualContent.ImageReference.AlternateText"/> specified, it is
            returned along with the filename and the image ID in parentheses.
            If not, the filename is returned along with the image ID in
            parentheses.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ImageReference.FileItem">
            <summary>
            This is used to get the file item associated with the image
            reference.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.BuildEngine.FrameworkCommentsFileLocation">
            <summary>
            This is used to represent a framework XML comments file location
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.FrameworkCommentsFileLocation.Folder">
            <summary>The folder location</summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.FrameworkCommentsFileLocation.CacheFilename">
            <summary>Cache filename for the cached build components</summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.FrameworkCommentsFileLocation.CanHaveLocalizedVersion">
            <summary>
            Specify true if the XML comments can have localized versions in
            a language sub-folder.
            </summary>
            <value>The default is false to not check for language-specific
            versions of the XML comments files.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.FrameworkCommentsFileLocation.Recurse">
            <summary>
            Specify true to recurse this folder for additional comments files
            or false to only look in the given folder.
            </summary>
            <value>The default is false to no recurse sub-folders</value>
        </member>
        <member name="T:SandcastleBuilder.Utils.FileItemCollection">
            <summary>
            This collection class is used to hold build items from a project.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItemCollection.#ctor(SandcastleBuilder.Utils.SandcastleProject,SandcastleBuilder.Utils.BuildAction)">
            <summary>
            Constructor
            </summary>
            <param name="project">The project file containing the build items</param>
            <param name="action">The build action for the items to hold in
            the collection.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItemCollection.Sort">
            <summary>
            This is used to sort the collection
            </summary>
            <remarks>Values are sorted by display title and ID.  Comparisons
            are case-insensitive.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItemCollection.SortContentLayout(SandcastleBuilder.Utils.FileItem,SandcastleBuilder.Utils.FileItem)">
            <summary>
            Sort content layout files
            </summary>
            <param name="x">The first file item</param>
            <param name="y">The second file item</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItemCollection.GeneralSort(SandcastleBuilder.Utils.FileItem,SandcastleBuilder.Utils.FileItem)">
            <summary>
            General sort
            </summary>
            <param name="x">The first file item</param>
            <param name="y">The second file item</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItemCollection.Refresh">
            <summary>
            This is used to refresh the collection by loading the build items
            from the project.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.FrameworkVersionTypeConverter">
            <summary>
            This type converter allows you to select a .NET Framework or Silverlight
            Framework version from those currently installed on the system.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FrameworkVersionTypeConverter.InitializeStandardValues">
            <summary>
            This is used to get the standard values by searching for the
            .NET Framework and Silverlight Framework versions installed on the
            current system.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FrameworkVersionTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to return the values for the type converter's
            dropdown list.
            </summary>
            <param name="context">The format context object</param>
            <returns>Returns the standard values for the type</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FrameworkVersionTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to indicate that the values are exclusive
            and values outside the list cannot be entered.
            </summary>
            <param name="context">The format context object</param>
            <returns>Always returns true</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FrameworkVersionTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to indicate that standard values are supported
            and can be chosen from a list.
            </summary>
            <param name="context">The format context object</param>
            <returns>Always returns true</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FrameworkVersionTypeConverter.IsPresent(System.String)">
            <summary>
            This is used to find out if the specified version of the .NET
            Framework is present on the system.
            </summary>
            <param name="version">The version for which to look</param>
            <returns>True if present, false if not found</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FrameworkVersionTypeConverter.LatestFrameworkMatching(System.String)">
            <summary>
            This is used to get the latest framework version that starts with
            the given value.
            </summary>
            <param name="version">The version for which to look.  The value
            can be prefixed with ".NET" or "Silverlight".  If not specified,
            ".NET" is assumed.</param>
            <returns>The latest framework version starting with the specified
            value or the most recent version if not found.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FrameworkVersionTypeConverter.LatestFrameworkNumberMatching(System.String)">
            <summary>
            This is used to get the latest framework version number that starts
            with the given value.
            </summary>
            <param name="version">The version for which to look.  The value
            can be prefixed with ".NET" or "Silverlight".  If not specified,
            ".NET" is assumed.</param>
            <returns>The latest framework version number starting with the
            specified value or the most recent version if not found.</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.FolderPathStringEditor">
            <summary>
            This is a type editor that can display a folder browser dialog to
            allow selection of a folder path at design time.
            </summary>
            <remarks>This can be used in conjunction with the
            <see cref="T:SandcastleBuilder.Utils.Design.FolderDialogAttribute"/> to specify the folder browser
            dialog's properties.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FolderPathStringEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This is overridden to edit the value using a folder browser dialog.
            </summary>
            <param name="context">The descriptor context</param>
            <param name="provider">The provider</param>
            <param name="value">The folder path as an object</param>
            <returns>The selected folder path as an object</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FolderPathStringEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to specify the editor's edit style
            </summary>
            <param name="context">The descriptor context</param>
            <returns>Always returns <b>Modal</b> as long as there is a context
            and an instance.  Otherwise, it returns <b>None</b>.</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.MSBuild.MRefBuilder">
            <summary>
            This task is used to generate the MRefBuilder response file and run
            MRefBuilder.exe.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.MRefBuilder.ValidateParameters">
            <summary>
            Validate the parameters
            </summary>
            <returns>True if the parameters are valid, false if not</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.MRefBuilder.GenerateFullPathToTool">
            <summary>
            This returns the full path to the tool
            </summary>
            <returns>The full path to the tool</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.MRefBuilder.GenerateCommandLineCommands">
            <summary>
            Generate the command line parameters
            </summary>
            <returns>The command line parameters</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.MRefBuilder.GenerateResponseFileCommands">
            <summary>
            Generate the response file commands
            </summary>
            <returns>An empty string</returns>
            <remarks>Rather than letting the tool task create the response
            file, we'll create it ourself in the working folder so that we can
            look at it if the build fails.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.MRefBuilder.GetWorkingDirectory">
            <summary>
            This is overridden to return the working folder for the build
            </summary>
            <returns>The working folder for the build</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.MRefBuilder.ToolName">
            <summary>
            This read-only property returns the tool name (MRefBuilder.exe)
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.MRefBuilder.StandardErrorLoggingImportance">
            <summary>
            This is overridden to force all standard error info to be logged
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.MRefBuilder.StandardOutputLoggingImportance">
            <summary>
            This is overridden to force all standard output info to be logged
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.MRefBuilder.DocumentInternals">
            <summary>
            This is used to pass in the Document Internals flag setting
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.MRefBuilder.SandcastlePath">
            <summary>
            This is used to pass in the path to the Sandcastle tools
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.MRefBuilder.WorkingFolder">
            <summary>
            This is used to pass in the working folder where the files are
            located.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.MRefBuilder.Assemblies">
            <summary>
            This is used to pass in the assemblies to reflect over
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.MRefBuilder.References">
            <summary>
            This is used to pass in the resolved references
            </summary>
            <value>References are optional.</value>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.PlugInConfigurationEditor">
            <summary>
            This is a type editor that displays the
            <see cref="T:SandcastleBuilder.Utils.Design.PlugInConfigurationEditorDlg"/> to edit the build process
            plug-in configurations.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PlugInConfigurationEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This is overridden to edit the value using the
            <see cref="T:SandcastleBuilder.Utils.Design.PlugInConfigurationEditorDlg"/> dialog.
            </summary>
            <param name="context">The descriptor context</param>
            <param name="provider">The provider</param>
            <param name="value">The plug-in configuration dictionary as an
            object</param>
            <returns>The edited plug-in configuration dictionary as an
            object</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PlugInConfigurationEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to specify the editor's edit style
            </summary>
            <param name="context">The descriptor context</param>
            <returns>Always returns <b>Modal</b> as long as there is a context
            and an instance.  Otherwise, it returns <b>None</b>.</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.Conversion.ConvertFromShfbFile">
            <summary>
            This class is used to convert version 1.7.0.0 and prior SHFB project
            files to the new MSBuild format project files.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Conversion.ConvertToMSBuildFormat">
            <summary>
            This class is an abstract base class used to convert a project in
            another format to the new MSBuild format project files used by
            SHFB 1.8.0.0 and later.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertToMSBuildFormat.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="oldProjectFile">The old project filename</param>
            <param name="folder">The folder in which to place the new project
            and its related files.  This cannot be the same folder as the
            old project file.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertToMSBuildFormat.Finalize">
            <summary>
            This handles garbage collection to ensure proper disposal of the
            Sandcastle project if not done explicity with <see cref="M:SandcastleBuilder.Utils.Conversion.ConvertToMSBuildFormat.Dispose"/>.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertToMSBuildFormat.Dispose">
            <summary>
            This implements the Dispose() interface to properly dispose of
            the Sandcastle project object.
            </summary>
            <overloads>There are two overloads for this method.</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertToMSBuildFormat.Dispose(System.Boolean)">
            <summary>
            This can be overridden by derived classes to add their own
            disposal code if necessary.
            </summary>
            <param name="disposing">Pass true to dispose of the managed
            and unmanaged resources or false to just dispose of the
            unmanaged resources.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertToMSBuildFormat.ConvertProject">
            <summary>
            This is used to perform the actual conversion
            </summary>
            <returns>The new project filename on success.  An exception is
            thrown if the conversion fails.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertToMSBuildFormat.CreateFolderItems">
            <summary>
            This can be called after all additional content has been added
            to create the <b>Folder</b> build items in the project.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertToMSBuildFormat.SetProperty(System.String,System.String)">
            <summary>
            This is used to set the named property to the specified value
            using Reflection.
            </summary>
            <param name="name">The name of the property to set</param>
            <param name="value">The value to which it is set</param>
            <remarks>Property name matching is case insensitive as are the
            values themselves.  This is used to allow setting of simple project
            properties (non-collection) using command line parameters in the
            console mode builder.</remarks>
            <exception cref="T:System.ArgumentNullException">This is thrown if the
            name parameter is null or an empty string.</exception>
            <exception cref="T:SandcastleBuilder.Utils.BuilderException">This is thrown if an error
            occurs while trying to set the named property.</exception>
            <returns>The parsed object value to which the property was set.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertToMSBuildFormat.FullPath(System.String)">
            <summary>
            This converts a relative path to a full path using the old
            project's folder.
            </summary>
            <param name="path">The path to convert</param>
            <returns>The fully qualified path</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertToMSBuildFormat.ExpandWildcard(System.String,System.Boolean)">
            <summary>
            This is used to expand a wildcard into all matching files
            </summary>
            <param name="wildcard">The wildcard to expand.</param>
            <param name="includeSubFolders">True to include subfolders, false
            to only include the given folder.</param>
            <returns>An enumerable list of matching files.</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.Conversion.ConvertToMSBuildFormat.Reader">
            <summary>
            Get the XML text reader used for the conversion
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Conversion.ConvertToMSBuildFormat.ProjectFolder">
            <summary>
            Get the new project folder
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Conversion.ConvertToMSBuildFormat.OldFolder">
            <summary>
            Get the old project folder
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Conversion.ConvertToMSBuildFormat.OldProjectFile">
            <summary>
            Get the old project filename
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Conversion.ConvertToMSBuildFormat.Project">
            <summary>
            Get the new project
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromShfbFile.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="oldProjectFile">The old project filename</param>
            <param name="folder">The folder in which to place the new project
            and its related files.  This cannot be the same folder as the
            old project file.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromShfbFile.ConvertProject">
            <summary>
            This is used to perform the actual conversion
            </summary>
            <returns>The new project filename on success.  An exception is
            thrown if the conversion fails.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromShfbFile.ConvertAdditionalContent">
            <summary>
            Convert the additional content
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromShfbFile.ConvertAssemblies">
            <summary>
            Convert the assemblies
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromShfbFile.ConvertComponentConfigs">
            <summary>
            Convert the component configurations
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromShfbFile.ConvertPlugInConfigs">
            <summary>
            Convert the plug-in configurations
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromShfbFile.ConvertNamespaceSummaries">
            <summary>
            Convert the namespace summaries
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromShfbFile.ConvertApiFilter">
            <summary>
            Convert the API filter
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromShfbFile.ConvertHelpAttributes">
            <summary>
            Convert the help attributes
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromShfbFile.ConvertDependencies">
            <summary>
            Convert the dependencies
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromShfbFile.UpdateSiteMap(System.String)">
            <summary>
            This is used to copy the files referenced in a site map file into
            the project and update the URLs in it to point to the new copies.
            </summary>
            <param name="siteMap">The site map file to update.</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.Conversion.ConvertFromShfbFile.Reader">
            <summary>
            Get the XML text reader used for the conversion
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.FileItem">
            <summary>
            This class represents a file that is part of the project
            (MAML/additional content, site map, stylesheet, etc.).
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItem.includePath_PersistablePathChanging(System.Object,System.EventArgs)">
            <summary>
            This is used to handle changes in the <see cref="P:SandcastleBuilder.Utils.FileItem.Include"/>
            properties such that the path gets stored in the project file.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItem.linkPath_PersistablePathChanging(System.Object,System.EventArgs)">
            <summary>
            This is used to handle changes in the <see cref="P:SandcastleBuilder.Utils.FileItem.Link"/>
            properties such that the path gets stored in the project file.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItem.#ctor(SandcastleBuilder.Utils.ProjectElement)">
            <summary>
            Internal Constructor
            </summary>
            <param name="element">The project element</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItem.RefreshPaths">
            <summary>
            Refresh the paths due to a parent path being renamed
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItem.GetAttributes">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItem.GetClassName">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItem.GetComponentName">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItem.GetConverter">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItem.GetDefaultEvent">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItem.GetDefaultProperty">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItem.GetEditor(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItem.GetEvents(System.Attribute[])">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItem.GetEvents">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItem.GetProperties(System.Attribute[])">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItem.GetProperties">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItem.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.FileItem.FilterProperties(System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            This is used to filter the properties based on the
            <see cref="P:SandcastleBuilder.Utils.FileItem.BuildAction"/>.
            </summary>
            <param name="pdc">The property descriptor collection to filter</param>
            <returns>The filtered property descriptor collection</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.FileItem.BuildAction">
            <summary>
            This is used to set or get the build action of the item
            </summary>
            <value>If set to <b>Image</b>, <see cref="P:SandcastleBuilder.Utils.FileItem.ImageId"/> and
            <see cref="P:SandcastleBuilder.Utils.FileItem.AlternateText"/> will be set to the filename if not
            set already.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.FileItem.Include">
            <summary>
            This is used to set or get the filename (include path)
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.FileItem.Link">
            <summary>
            This is used to set or get the link path
            </summary>
            <value>If the item has no link path, this returns the
            <see cref="P:SandcastleBuilder.Utils.FileItem.Include"/> path.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.FileItem.FullPath">
            <summary>
            This is used to get the full path to the item
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.FileItem.Name">
            <summary>
            This is used to set or get the name of the item
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.FileItem.ImageId">
            <summary>
            This is used to get or set an ID for a conceptual content image
            </summary>
            <remarks>This is used to indicate that an image file is part of
            the conceptual content.  Image items without an ID are not
            valid and will be ignored.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.FileItem.AlternateText">
            <summary>
            This is used to get or set alternate text for an image
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.FileItem.CopyToMedia">
            <summary>
            This is used to get or set whether an item is copied to the output
            folder during a build.
            </summary>
            <remarks>If this is set to true, the image will always be copied to
            the build's media folder.  If false, it is only copied if referenced
            in a topic.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.FileItem.ExcludeFromToc">
            <summary>
            For content items such as HTML pages, this is used to get or set
            whether or not the item is excluded from the table of contents.
            </summary>
            <remarks>If true, the item is not included in the table of contents.
            If false, it will be included.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.FileItem.SortOrder">
            <summary>
            This is used to get or set the sort order for content layout and
            site map files.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.SyntaxFilterValueEditor">
            <summary>
            This is a type editor that displays a checked list box as the drop-down
            editor for a string containing a list of language syntax filter IDs.
            This makes it easy to select multiple values with the drop-down.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.SyntaxFilterValueEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This is overridden to edit the value using a checked list box
            control as the drop-down editor.
            </summary>
            <param name="context">The descriptor context</param>
            <param name="provider">The provider</param>
            <param name="value">The enumerated type object to edit</param>
            <returns>The edited enumerated type object</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.SyntaxFilterValueEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to specify the editor's edit style
            </summary>
            <param name="context">The descriptor context</param>
            <returns>Always returns <b>DropDown</b> as long as there is a
            context and an instance.  Otherwise, it returns <b>None</b>.</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.Constants">
            <summary>
            This class holds a set of constants that define various application
            values such as the application name, common data folder, etc.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.Constants.CompanyName">
            <summary>The company name</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.Constants.AppName">
            <summary>The application name</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.Constants.ProgramDataFolder">
            <summary>The application folder in which the component and user
            data files are stored.</summary>
            <remarks>This folder will be located under the
            <see cref="T:System.Environment.SpecialFolder">CommonApplicationData</see>
            or <see cref="T:System.Environment.SpecialFolder">LocalApplicationData</see>
            folder.</remarks>
        </member>
        <member name="F:SandcastleBuilder.Utils.Constants.ItemTemplates">
            <summary>This folder is located under the
            <see cref="T:System.Environment.SpecialFolder">LocalApplicationData</see>
            folder and contains user-defined item templates that can be added
            to a project.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.Constants.ConceptualTemplates">
            <summary>This folder is located under the
            <see cref="T:System.Environment.SpecialFolder">LocalApplicationData</see>
            folder and contains user-defined conceptual content topic templates
            that can be added to a project.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.Constants.ComponentsAndPlugInsFolder">
            <summary>This folder is located under the
            <see cref="T:System.Environment.SpecialFolder">CommonApplicationData</see>
            folder and contains custom build components that can be added to a
            project.</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.SandcastleProject">
            <summary>
            This class represents all of the properties that make up a Sandcastle
            Help File Builder project.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.IBasePathProvider">
            <summary>
            This interface defines the properties used to obtain a base path for
            a <see cref="T:SandcastleBuilder.Utils.FilePath"/> object.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.IBasePathProvider.ResolvePath(System.String)">
            <summary>
            Implement this method to supply custom path resolution such as
            handling of MSBuild variables in the path.
            </summary>
            <param name="path">The path to use</param>
            <returns>A copy of the path after performing any custom resolutions</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.IBasePathProvider.BasePath">
            <summary>
            This read-only property returns the base path
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.SandcastleProject.DefaultConfiguration">
            <summary>The default configuration</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.SandcastleProject.DefaultPlatform">
            <summary>The default platform</summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.ResolvePath(System.String)">
            <summary>
            This method resolves any MSBuild environment variables in the
            path objects.
            </summary>
            <param name="path">The path to use</param>
            <returns>A copy of the path after performing any custom resolutions</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.OnQueryEditProjectFile(System.ComponentModel.CancelEventArgs)">
            <summary>
            This raises the <see cref="E:SandcastleBuilder.Utils.SandcastleProject.QueryEditProjectFile"/> event.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.OnProjectPropertyChanged(SandcastleBuilder.Utils.ProjectPropertyChangedEventArgs)">
            <summary>
            This raises the <see cref="E:SandcastleBuilder.Utils.SandcastleProject.ProjectPropertyChanged"/> event.
            </summary>
            <param name="e">The event arguments</param>
            <remarks>This will also mark the project as dirty</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.OnDirtyChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:SandcastleBuilder.Utils.SandcastleProject.DirtyChanged"/> event.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.OnDocumentationSourcesChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:SandcastleBuilder.Utils.SandcastleProject.DocumentationSourcesChanged"/> event.
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.ShouldSerializeFrameworkVersion">
            <summary>
            This is used to see if the <see cref="P:SandcastleBuilder.Utils.SandcastleProject.FrameworkVersion"/> property
            should be serialized.
            </summary>
            <returns>True to serialize it, false if it matches the default
            and should not be serialized.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.ResetFrameworkVersion">
            <summary>
            This is used to reset the <see cref="P:SandcastleBuilder.Utils.SandcastleProject.FrameworkVersion"/> property
            to its default value.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.ShouldSerializePresentationStyle">
            <summary>
            This is used to see if the <see cref="P:SandcastleBuilder.Utils.SandcastleProject.PresentationStyle"/> property
            should be serialized.
            </summary>
            <returns>True to serialize it, false if it matches the default
            and should not be serialized.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.ResetPresentationStyle">
            <summary>
            This is used to reset the <see cref="P:SandcastleBuilder.Utils.SandcastleProject.PresentationStyle"/> property
            to its default value.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.ShouldSerializeNamespaceSummaries">
            <summary>
            This is used to see if the <see cref="P:SandcastleBuilder.Utils.SandcastleProject.NamespaceSummaries"/>
            property should be serialized.
            </summary>
            <returns>True to serialize it, false if it matches the default
            and should not be serialized.</returns>
            <remarks>We do not allow resetting this property as it is a
            collection and we don't want to lose all items accidentally.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.ShouldSerializeComponentConfigurations">
            <summary>
            This is used to see if the <see cref="P:SandcastleBuilder.Utils.SandcastleProject.ComponentConfigurations"/>
            property should be serialized.
            </summary>
            <returns>True to serialize it, false if it matches the default
            and should not be serialized.</returns>
            <remarks>We do not allow resetting this property as it is a
            dictionary and we don't want to lose all items accidentally.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.ShouldSerializePlugInConfigurations">
            <summary>
            This is used to see if the <see cref="P:SandcastleBuilder.Utils.SandcastleProject.PlugInConfigurations"/>
            property should be serialized.
            </summary>
            <returns>True to serialize it, false if it matches the default
            and should not be serialized.</returns>
            <remarks>We do not allow resetting this property as it is a
            dictionary and we don't want to lose all items accidentally.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.ShouldSerializeApiFilter">
            <summary>
            This is used to see if the <see cref="P:SandcastleBuilder.Utils.SandcastleProject.ApiFilter"/> property
            should be serialized.
            </summary>
            <returns>True to serialize it, false if it matches the default
            and should not be serialized.</returns>
            <remarks>We do not allow resetting this property as it is a
            collection and we don't want to lose all items accidentally.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.ShouldSerializeHelpAttributes">
            <summary>
            This is used to see if the <see cref="P:SandcastleBuilder.Utils.SandcastleProject.HelpAttributes"/> property
            should be serialized.
            </summary>
            <returns>True to serialize it, false if it matches the default
            and should not be serialized.</returns>
            <remarks>We do not allow resetting this property as it is a
            collection and we don't want to lose all items accidentally.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.ShouldSerializeUserDefinedProperties">
            <summary>
            This is used to see if the <see cref="P:SandcastleBuilder.Utils.SandcastleProject.UserDefinedProperties"/>
            property should be serialized.
            </summary>
            <returns>True to serialize it, false if it matches the default
            and should not be serialized.</returns>
            <remarks>We do not allow resetting this property as it is a
            design-time only property.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.InitializePropertyCache">
            <summary>
            This is used to initialize the local property info and property
            descriptor caches.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.docSources_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This is handled to mark the project as dirty when the list of
            documentation sources changes.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.ItemList_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This is handled to mark the project as dirty when the various
            collection properties are modified.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event parameters</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.PathProperty_Changing(System.Object,System.EventArgs)">
            <summary>
            This is used to ensure that the project is editable before a
            sub-property on a project path property object is changed.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.PathProperty_Changed(System.Object,System.EventArgs)">
            <summary>
            This is used to ensure that path properties are written to the
            project when one of their sub-properties is edited.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.OnCharacterMatch(System.Text.RegularExpressions.Match)">
            <summary>
            Replace a \xNN value in the copyright text with its actual
            character.
            </summary>
            <param name="match">The match that was found</param>
            <returns>The string to use as the replacement</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.OnBuildVarMatch(System.Text.RegularExpressions.Match)">
            <summary>
            Resolve references to MSBuild variables in a path value
            </summary>
            <param name="match">The match that was found</param>
            <returns>The string to use as the replacement</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.LoadProperties">
            <summary>
            This is used to load the properties from the project file
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.SetLocalProperty(System.String,System.String)">
            <summary>
            This is used to set the named property to the specified value
            using Reflection.
            </summary>
            <param name="name">The name of the property to set</param>
            <param name="value">The value to which it is set</param>
            <returns>The parsed object value to which the property was set.</returns>
            <remarks>Property name matching is case insensitive as are the
            values.  This is used to allow setting of simple project properties
            (non-collection) from the MSBuild project file.  Unknown properties
            are ignored.</remarks>
            <exception cref="T:System.ArgumentNullException">This is thrown if the
            name parameter is null or an empty string.</exception>
            <exception cref="T:SandcastleBuilder.Utils.BuilderException">This is thrown if an error
            occurs while trying to set the named property.</exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.SetProjectProperty(System.String,System.Object)">
            <summary>
            Set the value of an MSBuild project property that matches a
            property on this class by name.
            </summary>
            <param name="propertyName">Name of property</param>
            <param name="propertyValue">Value of property</param>
            <exception cref="T:System.ArgumentException">This is thrown if the property
            name is null, an empty string, or is not a recognized property
            name.</exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.GetUserDefinedProperties">
            <summary>
            Get a collection containing all user-defined properties
            </summary>
            <returns>A collection containing all properties determined not to
            be help file builder project properties, MSBuild build engine
            related properties, or environment variables.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.IsValidUserDefinedPropertyName(System.String)">
            <summary>
            This is used to determine whether or not the given name can be
            used for a user-defined project property.
            </summary>
            <param name="name">The name to check</param>
            <returns>True if it can be used, false if it cannot be used</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.#ctor">
            <summary>
            Constructor
            </summary>
            <overloads>There are five overloads for the constructor</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.#ctor(System.String,System.Boolean)">
            <summary>
            Load a Sandcastle Builder project from the given filename.
            </summary>
            <param name="filename">The filename to load</param>
            <param name="mustExist">Specify true if the file must exist
            or false if a new project should be created if the file does
            not exist.</param>
            <exception cref="T:System.ArgumentException">This is thrown if a filename
            is not specified or if it does not exist and <c>mustExist</c> is
            true.</exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.#ctor(Microsoft.Build.Evaluation.Project)">
            <summary>
            This is used to create a Sandcastle Builder project from an
            existing MSBuild project instance.
            </summary>
            <param name="existingProject">The existing project instance</param>
            <remarks>It is assumed that the project has been loaded, the
            property values are current, and that the configuration and platform
            have been set in the MSBuild project global properties in order to
            get the correct final values.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.#ctor(SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            This is used to clone an existing project in order to build it
            without affecting the existing project's properties.
            </summary>
            <param name="cloneProject">The project to clone</param>
            <remarks>This is used to perform partial builds where we may want
            to use alternate property values.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.Finalize">
            <summary>
            This handles garbage collection to ensure proper disposal of the
            Sandcastle project if not done explicity with <see cref="M:SandcastleBuilder.Utils.SandcastleProject.Dispose"/>.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.Dispose">
            <summary>
            This implements the Dispose() interface to properly dispose of
            the Sandcastle project object.
            </summary>
            <overloads>There are two overloads for this method.</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.Dispose(System.Boolean)">
            <summary>
            This can be overridden by derived classes to add their own
            disposal code if necessary.
            </summary>
            <param name="disposing">Pass true to dispose of the managed
            and unmanaged resources or false to just dispose of the
            unmanaged resources.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.MarkAsDirty">
            <summary>
            This is used to mark the project as dirty and in need of being
            saved.
            </summary>
            <event cref="E:SandcastleBuilder.Utils.SandcastleProject.DirtyChanged">This event is raised to let interested
            parties know that the project's dirty state has been changed.</event>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.DefaultBuildAction(System.String)">
            <summary>
            This is used to determine the default build action for a file based
            on its extension.
            </summary>
            <param name="filename">The filename to use</param>
            <returns>The build action based on the extension</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.AddFolderToProject(System.String)">
            <summary>
            Add a new folder build item to the project
            </summary>
            <param name="folder">The folder name</param>
            <returns>The new <see cref="T:SandcastleBuilder.Utils.FileItem"/>.</returns>
            <remarks>If the folder does not exist in the project, it is added
            and created if not already there.  If the folder is already part of
            the project, the existing item is returned.</remarks>
            <exception cref="T:System.ArgumentException">This is thrown if the path
            matches the project root path or is not below it.</exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.AddFileToProject(System.String,System.String)">
            <summary>
            Add a new file build item to the project
            </summary>
            <param name="sourceFile">The source filename</param>
            <param name="destFile">The optional destination path.  If empty,
            null, or it does not start with the project folder, the file is
            copied to the root folder of the project.</param>
            <returns>The new <see cref="T:SandcastleBuilder.Utils.FileItem"/>.</returns>
            <remarks>If the file does not exist in the project, it is copied to
            the destination path or project folder if not already there.  The
            default build action is determined based on the filename's
            extension.  If the file is already part of the project, the
            existing item is returned.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.FindFile(System.String)">
            <summary>
            This is used to locate a file by name in the project
            </summary>
            <param name="fileToFind">The fully qualified file path to find</param>
            <returns>The file item if found or null if not found</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.EnsureProjectIsCurrent(System.Boolean)">
            <summary>
            This is used to ensure that all local collection project properties
            have been stored in the MSBuild project file and that path-type
            properties are current based on the current project location.
            </summary>
            <param name="forceUpdate">True to force an update of all affected
            properties or false to only update those that need it.</param>
            <remarks>This only affects the property-based collection properties
            and path-type properties.  Simple types and item group element
            properties are stored when modified.  This will also ensure that
            the <c>SHFBSchemaVersion</c> is set to the current version too.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.SaveProject(System.String)">
            <summary>
            This is used to save the project file
            </summary>
            <param name="filename">The filename for the project</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.SandcastleProject.HasItems(SandcastleBuilder.Utils.BuildAction)">
            <summary>
            This returns true if the project contains items using the
            given build action.
            </summary>
            <param name="buildAction">The build action for which to check</param>
            <returns>True if at least one item has the given build action or
            false if there are no items with the given build action.</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.ProjectPropertyCache">
            <summary>
            This read-only property returns the MSBuild project property cache
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.MSBuildProject">
            <summary>
            This read-only property is used to get the underlying MSBuild
            project.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.UsingFinalValues">
            <summary>
            This read-only property is used to get whether or not the project
            is using final values for the project properties.
            </summary>
            <value>If true, final values (i.e. evaluated values used at build
            time) are being returned by the properties in this instance.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.Filename">
            <summary>
            This read-only property is used to get the filename for the project
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.Configuration">
            <summary>
            This is used to get or set the configuration to use when building
            the project.
            </summary>
            <value>This value is used for project documentation sources and
            project references so that the correct items are used from them.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.Platform">
            <summary>
            This is used to get or set the platform to use when building the
            project.
            </summary>
            <value>This value is used for project documentation sources and
            project references so that the correct items are used from them.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.MSBuildOutDir">
            <summary>
            This is used to get or set the MSBuild <c>OutDir</c> property value
            that is defined when using Team Build.
            </summary>
            <value>This value is used for project documentation sources and
            project references so that the correct items are used from them.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.FrameworkVersionNumber">
            <summary>
            This read-only helper property returns the framework version number
            from the <see cref="P:SandcastleBuilder.Utils.SandcastleProject.FrameworkVersion"/> property without the
            framework type prefix.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.IsDirty">
            <summary>
            This is used to get the dirty state of the project
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.References">
            <summary>
            This is used to get a collection of reference dependencies (files,
            GAC, COM, or project) for MRefBuilder if needed.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.DocumentationSources">
            <summary>
            Returns the list of documentation sources to use in building the
            help file.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.LogFileLocation">
            <summary>
            This read-only property is used to get the build log file
            location.
            </summary>
            <value>If <see cref="P:SandcastleBuilder.Utils.SandcastleProject.BuildLogFile"/> is set, it returns its
            value.  If not set, it returns the full path created by using
            the <see cref="P:SandcastleBuilder.Utils.SandcastleProject.OutputPath"/> property value and a filename of
            <b>LastBuild.log</b>.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.DecodedCopyrightText">
            <summary>
            This is used to get the copyright notice that appears in the footer
            of each page with any hex value place holders replaced with their
            actual character.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.MissingTags">
            <summary>
            This read-only helper property returns the flags to use when
            looking for missing tags.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.VisibleItems">
            <summary>
            This read-only helper property returns the flags used to indicate
            which optional items to document.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.FileItems">
            <summary>
            This returns a collection of all build items in the project that
            represent folders and files.
            </summary>
            <remarks>This collection is generated each time the property is
            used.  As such, cache a copy if you need to use it repeatedly.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.NamespaceSummaries">
            <summary>
            Returns the list of namespace summaries
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.ProjectSummary">
            <summary>
            This is used to get or set the project summary comments
            </summary>
            <remarks>These notes will appear in the root namespaces page if
            entered.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.HtmlHelp1xCompilerPath">
            <summary>
            This is used to get or set the path to the HTML Help 1 compiler
            (HHC.EXE).
            </summary>
            <value>You only need to set this if the builder cannot determine
            the path for itself.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.HtmlHelp2xCompilerPath">
            <summary>
            This is used to get or set the path to the MS Help 2 compiler
            (HXCOMP.EXE).
            </summary>
            <value>You only need to set this if the builder cannot determine
            the path for itself.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.OutputPath">
            <summary>
            This is used to get or set the path to which the help files
            will be generated.
            </summary>
            <remarks>The default is to create it in a folder called
            <b>Help</b> in the same folder as the project file.
            <p/><b>Warning:</b> If building a web site, the output folder's
            prior content will be erased without warning prior to copying
            the new web site content to it!</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.SandcastlePath">
            <summary>
            This is used to get or set the path to the Sandcastle components
            </summary>
            <value>You only need to set this if the builder cannot determine
            the path for itself.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.WorkingPath">
            <summary>
            This is used to get or set the path to the working folder used
            during the build process to store the intermediate files.
            </summary>
            <value>This can be used to perform the build in a different
            location with a shorter path if you encounter errors due to long
            file path names.  If not specified, it defaults to a folder
            called <b>.\Working</b> under the folder specified by the
            <see cref="P:SandcastleBuilder.Utils.SandcastleProject.OutputPath"/> property.
            <p/><b>Warning:</b> All files and folders in the path specified
            in this property will be erased without warning when the build
            starts.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.CleanIntermediates">
            <summary>
            This is used to get or set whether intermediate files are
            deleted after a successful build.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.KeepLogFile">
            <summary>
            This is used to get or set whether or not the log file is retained
            after a successful build.
            </summary>
            <value>The default value is true.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.BuildLogFile">
            <summary>
            This is used to get or set the path and filename of the build
            log file.
            </summary>
            <value>If not specified, a default name of <b>LastBuild.log</b>
            is used and the file is saved in the path identified in the
            <see cref="P:SandcastleBuilder.Utils.SandcastleProject.OutputPath"/> property.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.HelpFileFormat">
            <summary>
            This is used to get or set the help file format generated by the
            build process.
            </summary>
            <value>The default is to produce an HTML Help 1 format file
            built using HHC.exe.</value>
            <remarks>If building a web site, the output folder will be cleared
            before the new content is copied to it.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.DisableCodeBlockComponent">
            <summary>
            This is used to disable the custom Code Block Component so that
            <c>&lt;code&gt;</c> elements are rendered in their standard format
            by the Sandcastle XSL transformations.
            </summary>
            <value>The default is false so that the Code Block Component is
            used by default.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.CppCommentsFixup">
            <summary>
            This is used to get or set whether to fix-up the XML comments files
            to work around an issue with those generated by the C++ compiler.
            </summary>
            <value>The default value is false.</value>
            <remarks>The C++ compiler generates method signatures that differ
            from the other .NET compilers for methods that take generics as
            parameters.  These methods fail to get documented as they do not
            match the output of <b>MRefBuilder</b>.  The C# and VB.NET
            compilers generate names that do match it and this option is not
            needed for comments files generated by them.  Set this to true if
            the project contains C++ compiler generated XML comments files and
            your project contains methods that take generic types for
            parameters.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.FrameworkVersion">
            <summary>
            This is used to get or set the .NET Framework or Silverlight
            Framework version used to resolve references to system types.
            </summary>
            <remarks>If not found, it will default to the most recent version
            of the .NET Framework installed.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.ComponentConfigurations">
            <summary>
            This is used to get a dictionary of build component configurations.
            </summary>
            <remarks>This allows you to configure the settings for third
            party build components if they support it.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.PlugInConfigurations">
            <summary>
            This is used to get a dictionary of build process plug-in
            configurations.
            </summary>
            <remarks>This allows you to select and configure the settings for
            third party build process plug-ins.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.UserDefinedProperties">
            <summary>
            This is used to present a design-time property that is used for
            editing user-defined project file properties.
            </summary>
            <remarks>The designer attached to the property handles updating
            the user-defined project properties.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.ContentPlacement">
            <summary>
            This is used to get or set the placement of any additional and
            conceptual content items in the table of contents.
            </summary>
            <value>The default is to place additional and conceptual content
            items above the namespaces.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.IndentHtml">
            <summary>
            This is used to get or set whether or not the HTML rendered by
            <b>BuildAssembler</b> is indented.
            </summary>
            <value>This is mainly a debugging aid.  Leave it set to false,
            the default to produce more compact HTML.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.Preliminary">
            <summary>
            This is used to get or set whether or not all pages should be
            marked with a "preliminary documentation" warning in the page
            header.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.RootNamespaceContainer">
            <summary>
            This is used to get or set whether or not a root namespace entry
            is added to the table of contents to act as a container for the
            namespaces from the documented assemblies.
            </summary>
            <value>If true, a root <b>Namespaces</b> table of contents entry
            will be created as the container of the namespaces in the
            documented assemblies.  If false, the default, the namespaces are
            listed in the table of contents as root entries.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.RootNamespaceTitle">
            <summary>
            This is used to get or set an alternate title for the root
            namespaces page and the root table of contents container that
            appears when <see cref="P:SandcastleBuilder.Utils.SandcastleProject.RootNamespaceContainer"/> is set to true.
            </summary>
            <value>If left blank (the default), the localized version of the
            text "Namespaces" will be used.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.HelpTitle">
            <summary>
            This is used to get or set the help file's title
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.HtmlHelpName">
            <summary>
            This is used to get or set the name of the compiled help file.
            Do not include a path or the extension.  For MS Help 2 builds,
            this is also used as the collection namespace name (avoid spaces).
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.Language">
            <summary>
            This is used to get or set the language option for the help file
            and to determine which set of presentation resource files to use.
            </summary>
            <value>If a matching set of presentation resources cannot be
            found for the specified language, the US English set will be
            used.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.CopyrightHref">
            <summary>
            This is used to get or set the URL to use as the link for the
            copyright notice.
            </summary>
            <value>If not set, the see cref="CopyrighText"/> (if any) is not
            turned into a clickable link.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.CopyrightText">
            <summary>
            This is used to get or set the copyright notice that appears in
            the footer of each page.
            </summary>
            <remarks>If not set, no copyright note will appear.  If a
            <see cref="P:SandcastleBuilder.Utils.SandcastleProject.CopyrightHref"/> is specified without copyright text,
            the URL appears instead.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.FeedbackEMailAddress">
            <summary>
            This is used to get or set the feedback e-mail address that
            appears in the footer of each page.
            </summary>
            <remarks>If not set, no feedback link will appear.  If
            <see cref="P:SandcastleBuilder.Utils.SandcastleProject.FeedbackEMailLinkText"/> is set, that text will appear
            as the text for the link.  If not set, the e-mail address is used
            as the link text.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.FeedbackEMailLinkText">
            <summary>
            This is used to get or set the feedback e-mail link text that
            appears in the feedback e-mail link in the footer of each page.
            </summary>
            <remarks>If set, this text will appear as the link text for the
            <see cref="P:SandcastleBuilder.Utils.SandcastleProject.FeedbackEMailAddress"/> link.  If not set, the e-mail
            address is used for the link text.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.HeaderText">
            <summary>
            This is used to get or set additional text that should appear
            in the header of every page.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.FooterText">
            <summary>
            This is used to get or set additional text that should appear
            in the footer of every page.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.SdkLinkTarget">
            <summary>
            This is used to get or set the target window for MSDN SDK links.
            </summary>
            <value>The default is <b>Blank</b> to open the MSDN topics in a
            new window.  This option only has an effect on the
            <see cref="P:SandcastleBuilder.Utils.SandcastleProject.HtmlSdkLinkType"/>, <see cref="P:SandcastleBuilder.Utils.SandcastleProject.MSHelp2SdkLinkType"/>,
            <see cref="P:SandcastleBuilder.Utils.SandcastleProject.MSHelpViewerSdkLinkType"/>, and <see cref="P:SandcastleBuilder.Utils.SandcastleProject.WebsiteSdkLinkType"/> 
            properties if they are set to <b>MSDN</b>.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.PresentationStyle">
            <summary>
            This is used to get or set the presentation style for the help
            topic pages.
            </summary>
            <value>The default is to use the VS2005 style.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.NamingMethod">
            <summary>
            This is used to get or set the naming method used to generate the
            help topic filenames.
            </summary>
            <value>The default is to use GUID values as the filenames.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.SyntaxFilters">
            <summary>
            This is used to get or set the language filters which determines
            which languages appear in the <b>Syntax</b> section of the help
            topics.
            </summary>
            <value>The default is <b>Standard</b> (C#, VB.NET, and C++).</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.BinaryTOC">
            <summary>
            This is used to get or set the path to the Sandcastle components
            </summary>
            <remarks>This can significantly reduce the amount of time
            required to load a very large help document.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.HtmlSdkLinkType">
            <summary>
            This is used to get or set the type of links used to reference
            other help topics referring to framework (SDK) help topics in
            HTML Help 1 help files.
            </summary>
            <value>The default is to produce links to online MSDN content.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.IncludeFavorites">
            <summary>
            This is used to get or set whether or not a Favorites tab will
            appear in the help file.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.CollectionTocStyle">
            <summary>
            This is used to get or set the collection table of contents style
            used when plugged into an MS Help 2 collection.
            </summary>
            <remarks>The default is <b>Hierarchical</b>.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.MSHelp2SdkLinkType">
            <summary>
            This is used to get or set the type of links used to reference
            other help topics referring to framework (SDK) help topics in
            MS Help 2 help files.
            </summary>
            <value>The default is to produce links to online MSDN content.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.IncludeStopWordList">
            <summary>
            This is used to get or set whether or not to include the stop word
            list used to identify words to omit from the Help 2 full text
            search index.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.PlugInNamespaces">
            <summary>
            This is used to get or set a comma-separated list of namespaces
            that the collection will be plugged into when deployed using
            <b>H2Reg.exe</b>.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.HelpFileVersion">
            <summary>
            This is used to get or set the version number applied to the
            help file.
            </summary>
            <remarks>The default is 1.0.0.0</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.HelpAttributes">
            <summary>
            This is used to get a collection of additional Help 2 attributes
            that will be added to each generated help topic.
            </summary>
            <remarks>The attributes are added by a custom build component in
            the BuildAssembler step.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.MSHelpViewerSdkLinkType">
            <summary>
            This is used to get or set the type of links used to reference
            other help topics referring to framework (SDK) help topics in
            MS Help Viewer help files.
            </summary>
            <value>The default is to produce links to online MSDN content.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.CatalogProductId">
            <summary>
            This is used to get or set the catalog product ID to use for the
            installation script.
            </summary>
            <remarks>The default if not specified will be "VS"</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.CatalogVersion">
            <summary>
            This is used to get or set the catalog version number to use for the
            installation script.
            </summary>
            <remarks>The default if not specified will be "100"</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.VendorName">
            <summary>
            This is used to get or set the vendor name for the help viewer file
            </summary>
            <remarks>The default if not specified will be "Vendor Name"</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.ProductTitle">
            <summary>
            This is used to get or set the product title for the help viewer file
            </summary>
            <remarks>The default if not specified will be the value of the
            <see cref="P:SandcastleBuilder.Utils.SandcastleProject.HelpTitle"/> property.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.SelfBranded">
            <summary>
            This is used to get or set whether or not the help file is self-branded
            </summary>
            <remarks>Typically, this should be set to true.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.TopicVersion">
            <summary>
            This is used to get or set the topic version for each topic in the help file
            </summary>
            <remarks>The default is "100".</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.TocParentId">
            <summary>
            This is used to get or set the table of contents parent for each root
            topic in the help file.
            </summary>
            <remarks>The default is "-1" to show the root topics in the root of
            the main table of content.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.TocParentVersion">
            <summary>
            This is used to get or set the topic version of the <see cref="P:SandcastleBuilder.Utils.SandcastleProject.TocParentId"/> topic
            </summary>
            <remarks>The default is "100".</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.TocOrder">
            <summary>
            This is used to get or set the sort order for conceptual content so
            that it appears within its parent in the correct position.
            </summary>
            <remarks>The default is -1 to let the build engine determine the best
            value to use based on the other project properties.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.WebsiteSdkLinkType">
            <summary>
            This is used to get or set the type of links used to reference
            other help topics referring to framework (SDK) help topics in
            HTML Help 1 help files.
            </summary>
            <value>The default is to produce links to online MSDN content.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.ShowMissingNamespaces">
            <summary>
            This is used to get or set whether or not missing namespace
            comments are indicated in the help file.
            </summary>
            <value>Set this to true to add a message to the help topic
            to indicate that the &lt;summary&gt; tag is missing.  A message
            is also written to the log file.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.ShowMissingSummaries">
            <summary>
            This is used to get or set whether or not missing &lt;summary&gt;
            tags are indicated in the help file.
            </summary>
            <value>Set this to true to add a message to the help topic
            to indicate that the &lt;summary&gt; tag is missing.  A message
            is also written to the log file.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.ShowMissingParams">
            <summary>
            This is used to get or set whether or not missing &lt;param&gt;
            tags are indicated in the help file.
            </summary>
            <value>Set this to true to add a message to the help topic
            to indicate that a &lt;param&gt; tag is missing.  A message
            is also written to the log file.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.ShowMissingTypeParams">
            <summary>
            This is used to get or set whether or not missing &lt;typeparam&gt;
            tags on generic types and methods are indicated in the help file.
            </summary>
            <value>Set this to true to add a message to the help topic
            to indicate that a &lt;typeparam&gt; tag is missing from a generic
            type or method.  A message is also written to the log file.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.ShowMissingReturns">
            <summary>
            This is used to get or set whether or not missing &lt;returns&gt;
            tags are indicated in the help file.
            </summary>
            <value>Set this to true to add a message to the help topic
            to indicate that the &lt;returns&gt; tag is missing.  A message
            is also written to the log file.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.ShowMissingValues">
            <summary>
            This is used to get or set whether or not missing &lt;value&gt;
            tags are indicated in the help file.
            </summary>
            <value>Set this to true to add a message to the help topic
            to indicate that the &lt;value&gt; tag is missing.  A message
            is also written to the log file.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.ShowMissingRemarks">
            <summary>
            This is used to get or set whether or not missing &lt;remarks&gt;
            tags are indicated in the help file.
            </summary>
            <value>Set this to true to add a message to the help topic
            to indicate that the &lt;remarks&gt; tag is missing.  A message
            is also written to the log file.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.AutoDocumentConstructors">
            <summary>
            This is used to get or set whether or not constructors are
            automatically documented if they are missing the &lt;summary&gt;
            tag and for classes with compiler generated constructors.
            </summary>
            <value>Set this to true to automatically add default text for the
            &lt;summary&gt; tag on constructors that are missing it and for
            classes with a compiler generated constructor.  If set to false
            and <see cref="P:SandcastleBuilder.Utils.SandcastleProject.ShowMissingSummaries"/> is true, a "missing summary"
            warning will appear instead.  A message is also written to the log
            file.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.AutoDocumentDisposeMethods">
            <summary>
            This is used to get or set whether or not dispose methods are
            automatically documented if they are missing the &lt;summary&gt;
            tag and for classes with compiler generated dispose methods.
            </summary>
            <value>Set this to true to automatically add default text for the
            &lt;summary&gt; tag on dispose methods that are missing it and for
            classes with compiler generated dispose methods.  If set to false
            and <see cref="P:SandcastleBuilder.Utils.SandcastleProject.ShowMissingSummaries"/> is true, a "missing summary"
            warning will appear instead.  A message is also written to the log
            file.  If a <c>Dispose(Boolean)</c> method is present, its parameter
            will also be auto-documented if necessary.  If set to false and
            <see cref="P:SandcastleBuilder.Utils.SandcastleProject.ShowMissingParams"/> is true, a "missing parameter"
            message will appear instead.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.ShowMissingIncludeTargets">
            <summary>
            This is used to get or set whether or not missing &lt;include&gt;
            tag target documentation is indicated in the help file.
            </summary>
            <value>Set this to true to add a message to the help topic
            to indicate that the &lt;include&gt; tag's target documentation is
            missing.  A message is also written to the log file.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.DocumentAttributes">
            <summary>
            This is used to get or set whether or not attributes on types and
            members are documented in the syntax portion of the help file.
            </summary>
            <value>Set to true to document attributes or false to hide them</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.DocumentExplicitInterfaceImplementations">
            <summary>
            This is used to get or set whether or not explicit interface
            implementations are documented.
            </summary>
            <value>Set to true to document explicit interface implementations
            or false to hide them.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.DocumentInheritedMembers">
            <summary>
            This is used to get or set whether or not inherited members
            are documented.
            </summary>
            <value>Set to true to document inherited members or false to
            hide them.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.DocumentInheritedFrameworkMembers">
            <summary>
            This is used to get or set whether or not inherited framework
            members are documented.
            </summary>
            <value>Set to true to document inherited framework members or
            false to hide them.  For this to work,
            <see cref="P:SandcastleBuilder.Utils.SandcastleProject.DocumentInheritedMembers"/> must also be enabled.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.DocumentInheritedFrameworkPrivateMembers">
            <summary>
            This is used to get or set whether or not inherited private
            framework members are documented.
            </summary>
            <value>Set to true to document inherited private framework members
            or false to hide them.  For this to work,
            <see cref="P:SandcastleBuilder.Utils.SandcastleProject.DocumentInheritedFrameworkMembers"/> and
            <see cref="P:SandcastleBuilder.Utils.SandcastleProject.DocumentPrivates"/> must also be enabled.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.DocumentInheritedFrameworkInternalMembers">
            <summary>
            This is used to get or set whether or not inherited internal
            framework members are documented.
            </summary>
            <value>Set to true to document inherited internal framework members
            or false to hide them.  For this to work,
            <see cref="P:SandcastleBuilder.Utils.SandcastleProject.DocumentInheritedFrameworkMembers"/> and
            <see cref="P:SandcastleBuilder.Utils.SandcastleProject.DocumentInternals"/> must also be enabled.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.DocumentInternals">
            <summary>
            This is used to get or set whether or not internal members are
            documented in the help file.
            </summary>
            <value>Set to true to document internal members or false to hide
            them</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.DocumentPrivates">
            <summary>
            This is used to get or set whether or not private members are
            documented in the help file.
            </summary>
            <value>Set to true to document private members or false to hide
            them</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.DocumentPrivateFields">
            <summary>
            This is used to get or set whether or not private fields are
            documented in the help file.
            </summary>
            <value>Set to true to document private fields or false to hide
            them.  For this to work, <see cref="P:SandcastleBuilder.Utils.SandcastleProject.DocumentPrivates"/> must
            also be enabled.</value>
            <remarks>Private fields are most often used to back properties
            and do not have documentation.  With this set to false, they
            are omitted from the help file to reduce unnecessary clutter.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.DocumentProtected">
            <summary>
            This is used to get or set whether or not protected members are
            documented in the help file.
            </summary>
            <value>Set to true to document protected members or false to hide
            them</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.DocumentProtectedInternalAsProtected">
            <summary>
            This is used to get or set whether or not "protected internal"
            members are documented as "protected" only in the help file.
            </summary>
            <value>Set to true to document "protected internal" members
            as "protected" only or false to document them normally.  This
            option is ignored if <see cref="P:SandcastleBuilder.Utils.SandcastleProject.DocumentProtected"/> is false.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.DocumentSealedProtected">
            <summary>
            This is used to get or set whether or not protected members of
            sealed classes are documented in the help file.
            </summary>
            <value>Set to true to document protected members of sealed classes
            or false to hide them. For this to work,
            <see cref="P:SandcastleBuilder.Utils.SandcastleProject.DocumentProtected"/> must also be enabled.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.ApiFilter">
            <summary>
            This is used to get the API filter collection.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.SandcastleProject.BasePath">
            <inheritdoc />
        </member>
        <member name="E:SandcastleBuilder.Utils.SandcastleProject.QueryEditProjectFile">
            <summary>
            This event is raised when a property is about to be changed to see
            if the project file can be edited.
            </summary>
            <remarks>If the project file cannot be edited, the handler should
            cancel the event so that the property is not changed.</remarks>
        </member>
        <member name="E:SandcastleBuilder.Utils.SandcastleProject.ProjectPropertyChanged">
            <summary>
            This event is raised when a property is changed
            </summary>
        </member>
        <member name="E:SandcastleBuilder.Utils.SandcastleProject.DirtyChanged">
            <summary>
            This event is raised when the dirty property changes
            </summary>
        </member>
        <member name="E:SandcastleBuilder.Utils.SandcastleProject.DocumentationSourcesChanged">
            <summary>
            This event is raised when the assembly list is modified
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.PlugIn.PlugInConfiguration">
            <summary>
            This collection class is used to hold a plug-in's configuration and
            enabled state.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.PlugInConfiguration.#ctor(System.Boolean,System.String,SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Internal constructor
            </summary>
            <param name="isEnabled">The enabled state</param>
            <param name="configuration">The configuration</param>
            <param name="project">The owning project</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.PlugInConfiguration.Enabled">
            <summary>
            This is used to get or set the plug-in's enabled state
            </summary>
            <value>If set to false, the plug-in will not be used in the build</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.PlugInConfiguration.Configuration">
            <summary>
            This is used to get or set the plug-in's configuration information
            </summary>
            <value>This should be an XML fragment.  The root node should be
            named <b>configuration</b>.</value>
        </member>
        <member name="T:SandcastleBuilder.Utils.MSHelpAttr">
            <summary>
            This represents an MS Help 2 attribute that can be added to the XML
            data island in each help topic generated by BuildAssembler.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpAttr.#ctor(System.String,System.String,SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Internal constructor
            </summary>
            <param name="name">The attribute name</param>
            <param name="value">The attribute value</param>
            <param name="project">The owning project</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpAttr.CompareTo(SandcastleBuilder.Utils.MSHelpAttr)">
            <summary>
            Compares this instance to another instance and returns an
            indication of their relative values.
            </summary>
            <param name="other">A MSHelpAttr object to compare</param>
            <returns>Returns -1 if this instance is less than the
            value, 0 if they are equal, or 1 if this instance is
            greater than the value or the value is null.</returns>
            <remarks>Entries are sorted by name and then value</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpAttr.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpAttr.GetHashCode">
            <summary>
            Get a hash code for this item
            </summary>
            <returns>Returns the hash code for the attribute name and value.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpAttr.ToString">
            <summary>
            Return a string representation of the item
            </summary>
            <returns>Returns the item in its XML format</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSHelpAttr.AttributeName">
            <summary>
            This is used to get or set the attribute name
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSHelpAttr.AttributeValue">
            <summary>
            This is used to get or set the attribute value
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.MSBuild.Build1xHelpFile">
            <summary>
            This task is used to run HHC.EXE which is used to compile a Help 1
            (CHM) help file.
            </summary>
            <remarks>Support is provided for wrapping the tool in a call to an
            application such as SBAppLocale.exe to workaround encoding issues with
            the Help 1 compiler.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.Build1xHelpFile.ValidateParameters">
            <summary>
            Validate the parameters
            </summary>
            <returns>True if the parameters are valid, false if not</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.Build1xHelpFile.GenerateFullPathToTool">
            <summary>
            This returns the full path to the tool
            </summary>
            <returns>The full path to the tool</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.Build1xHelpFile.GenerateCommandLineCommands">
            <summary>
            Generate the command line parameters
            </summary>
            <returns>The command line parameters</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.Build1xHelpFile.Execute">
            <summary>
            This is overridden to set the working folder before executing
            the task and to invert the result returned from the help compiler.
            </summary>
            <returns>True if successful or false on failure</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.Build1xHelpFile.HandleTaskExecutionErrors">
            <summary>
            This is overridden to invert the result of the HHC exit code
            </summary>
            <returns>True on success, false on failure.  HXCOMP is backwards
            and returns 0 on failures and 1 on success.  We invert the result
            to be consistent with other tasks.</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.Build1xHelpFile.ToolName">
            <summary>
            This read-only property returns the tool name (HHC.EXE or the
            value of <see cref="P:SandcastleBuilder.Utils.MSBuild.Build1xHelpFile.LocalizeApp"/> if specified).
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.Build1xHelpFile.StandardErrorLoggingImportance">
            <summary>
            This is overridden to force all standard error info to be logged
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.Build1xHelpFile.StandardOutputLoggingImportance">
            <summary>
            This is overridden to force all standard output info to be logged
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.Build1xHelpFile.WorkingFolder">
            <summary>
            This is used to pass in the working folder where the files are
            located.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.Build1xHelpFile.HelpCompilerFolder">
            <summary>
            This is used to pass in the path to the help compiler
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.Build1xHelpFile.HelpProjectName">
            <summary>
            This is used to pass in the help project filename
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.Build1xHelpFile.LocalizeApp">
            <summary>
            This is used to pass in the name of the application to use as the
            localization wrapper.
            </summary>
            <remarks>This is optional.  If specified, it will be used to run
            the help compiler to work around encoding issues.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.Build1xHelpFile.LanguageId">
            <summary>
            This is used to get or set the language ID for the localization
            tool (see cref="LocalizeApp" /&gt;).
            </summary>
            <remarks>This is optional.  If not specified, it defaults to 1033.
            It is ignored if <see cref="P:SandcastleBuilder.Utils.MSBuild.Build1xHelpFile.LocalizeApp"/> is not set.</remarks>
        </member>
        <member name="T:SandcastleBuilder.Utils.InheritedDocumentation.CommentsCacheEventArgs">
            <summary>
            This is used by the comments cache to report a warning message
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.InheritedDocumentation.CommentsCacheEventArgs.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="text">The message text</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.InheritedDocumentation.CommentsCacheEventArgs.Message">
            <summary>
            The message to report
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.MSHelpAttrCollectionTypeConverter">
            <summary>
            This is used to give a more descriptive message in the property
            grid for the <see cref="T:SandcastleBuilder.Utils.MSHelpAttrCollection"/>.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpAttrCollectionTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpAttrCollectionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.ComponentConfigurationEditor">
            <summary>
            This is a type editor that displays the
            <see cref="T:SandcastleBuilder.Utils.Design.ComponentConfigurationEditorDlg"/> to edit the build
            component configurations.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ComponentConfigurationEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This is overridden to edit the value using the
            <see cref="T:SandcastleBuilder.Utils.Design.ComponentConfigurationEditorDlg"/> dialog.
            </summary>
            <param name="context">The descriptor context</param>
            <param name="provider">The provider</param>
            <param name="value">The component configuration dictionary as an
            object</param>
            <returns>The edited component configuration dictionary as an
            object</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ComponentConfigurationEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to specify the editor's edit style
            </summary>
            <param name="context">The descriptor context</param>
            <returns>Always returns <b>Modal</b> as long as there is a context
            and an instance.  Otherwise, it returns <b>None</b>.</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.ApiFilterEditor">
            <summary>
            This is a type editor that displays the <see cref="T:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg"/>
            to edit the API filter items for a project.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This is overridden to edit the value using the
            <see cref="T:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg"/> dialog.
            </summary>
            <param name="context">The descriptor context</param>
            <param name="provider">The provider</param>
            <param name="value">The API filter collection as an object</param>
            <returns>The edited API filter collection as an object</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to specify the editor's edit style
            </summary>
            <param name="context">The descriptor context</param>
            <returns>Always returns <b>Modal</b> as long as there is a context
            and an instance.  Otherwise, it returns <b>None</b>.</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.ConceptualContent.CodeReference">
            <summary>
            This represents a conceptual content CodeReference that can be used to insert
            a common item, value, or construct into topics.
            </summary>
            <remarks>This class is serializable so that it can be copied to the
            clipboard.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.CodeReference.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="refId">The reference ID</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.CodeReference.ToCodeReference">
            <summary>
            Convert the token to its <c>&lt;codeReference&gt;</c> element form
            </summary>
            <returns>The token in its <c>&lt;codeReference&gt;</c> element form</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.CodeReference.Id">
            <summary>
            This is used to get or set the CodeReference name
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.BuildEngine.BuildProgressEventArgs">
            <summary>
            This is a custom event arguments class for the
            <see cref="E:SandcastleBuilder.Utils.BuildEngine.BuildProcess.BuildProgress"/> event.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.BuildProgressEventArgs.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProgressEventArgs.BuildStep">
            <summary>
            Get the current build step of the build process
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProgressEventArgs.Message">
            <summary>
            Get the message associated with the progress report
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.BuildProgressEventArgs.HasCompleted">
            <summary>
            Get a flag indicating whether or not the build has completed
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.ProjectSummaryEditor">
            <summary>
            This is a type editor that displays the
            <see cref="T:SandcastleBuilder.Utils.Design.ProjectSummaryEditorDlg"/> to edit the project summary.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ProjectSummaryEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This is overridden to edit the value using the
            <see cref="T:SandcastleBuilder.Utils.Design.ProjectSummaryEditorDlg"/> dialog.
            </summary>
            <param name="context">The descriptor context</param>
            <param name="provider">The provider</param>
            <param name="value">The project summary text as an object</param>
            <returns>The edited project summary text as an object</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ProjectSummaryEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to specify the editor's edit style
            </summary>
            <param name="context">The descriptor context</param>
            <returns>Always returns <b>Modal</b> as long as there is a context
            and an instance.  Otherwise, it returns <b>None</b>.</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.BuildEngine.XmlCommentsFileCollection">
            <summary>
            This collection class is used to hold the XML comments files
            during the build process.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.XmlCommentsFileCollection.Save">
            <summary>
            Save the comments files
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.XmlCommentsFileCollection.FindMember(System.String)">
            <summary>
            Search all comments files for the specified member.  If not found,
            add the blank member to the first file.
            </summary>
            <param name="memberName">The member name for which to search.</param>
            <returns>The XML node of the found or added member</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.XmlCommentsFileCollection.ReplaceNamespaceDocEntries">
            <summary>
            This will search for all type member comments where the ID
            contains <b>NamespaceDoc</b> and convert them to namespace entries
            for the containing namespace.
            </summary>
            <remarks>The converted ID effectively converts the comments into
            comments for the class's containing namespace.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.XmlCommentsFileCollection.CommentFileList(System.String,System.Boolean)">
            <summary>
            Returns a list of the comment file paths in a format suitable
            for inserting into a Sandcastle Configuration file.
            </summary>
            <param name="workingFolder">The working folder path</param>
            <param name="forInheritedDocs">True if generating the list for the
            inherited documentation tool or false for sandcastle.config.</param>
            <returns>The comment file list XML tags</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.XmlCommentsFileCollection.ContainsInheritedDocumentation">
            <summary>
            This read-only property returns true if any of the comments files
            contain an &lt;inheritdoc /&gt; tag indicating that the Inherited
            Documentation tool will need to be ran.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.DocumentationSourceCollection">
            <summary>
            This collection class is used to hold the documentation sources
            </summary>
            <remarks>A documentation source is an assembly, an XML comments file,
            a Visual Studio project (C#, VB.NET, or J#), or a Visual Studio
            solution containing one or more C#, VB.NET or J# projects.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.DocumentationSourceCollection.#ctor(SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Internal constructor
            </summary>
            <param name="project">The project that owns the collection</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.DocumentationSourceCollection.Sort">
            <summary>
            This is used to sort the collection in ascending order.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.DocumentationSourceCollection.FromXml(System.String)">
            <summary>
            This is used to load existing documentation sources from the
            project file.
            </summary>
            <param name="docSources">The documentation source items</param>
            <remarks>The information is stored as an XML fragment</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.DocumentationSourceCollection.ToXml">
            <summary>
            This is used to write the documentation source info to an XML
            fragment ready for storing in the project file.
            </summary>
            <returns>The XML fragment containing the documentation sources</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.DocumentationSourceCollection.Add(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Add a new item to the collection
            </summary>
            <param name="filename">The filename to add</param>
            <param name="config">The configuration to use for projects</param>
            <param name="platform">The platform to use for projects</param>
            <param name="subFolders">True to include subfolders, false to
            only search the top-level folder.</param>
            <returns>The <see cref="T:SandcastleBuilder.Utils.DocumentationSource"/> added to the
            project or the existing item if the filename already exists in the
            collection.</returns>
            <remarks>The <see cref="T:SandcastleBuilder.Utils.DocumentationSource"/> constructor is
            internal so that we control creation of the items and can
            associate them with the project.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.DocumentationSourceCollection.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This is overridden to mark the collection as dirty when it changes
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.DocumentationSourceCollection.IsDirty">
            <summary>
            This is used to get or set the dirty state of the collection
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.DocumentationSourceCollection.Assemblies">
            <summary>
            This read-only property returns a list of assemblies in the
            collection.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.DocumentationSourceCollection.CommentsFiles">
            <summary>
            This read-only property returns a list of XML comments files in the
            collection.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.PlugIn.PlugInManager">
            <summary>
            This class is used to manage the set of known plug-ins.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.PlugInManager.LoadPlugIns">
            <summary>
            Load the build plug-ins found in the Components and Plug-Ins
            folder and its subfolders.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.PlugInManager.IsSupported(System.String)">
            <summary>
            This is used to determine if a plug-in exists with the specified
            key and can be used.
            </summary>
            <param name="key">The key for the plug-in</param>
            <returns>True if the plug-in exits and can be used.</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.PlugInManager.PlugIns">
            <summary>
            This returns a dictionary containing the loaded plug-ins.
            </summary>
            <value>The dictionary keys are the plug-in names.</value>
        </member>
        <member name="T:SandcastleBuilder.Utils.Gac.ASM_CACHE_FLAGS">
            <summary>
            This defines the different cache types that can be used
            </summary>
            <exclude/>
        </member>
        <member name="T:SandcastleBuilder.Utils.Gac.ASM_DISPLAY_FLAGS">
            <summary>
            This defines the items that GetDisplayName returns
            </summary>
            <exclude/>
        </member>
        <member name="T:SandcastleBuilder.Utils.Gac.ASM_CMP_FLAGS">
            <summary>
            This defines the parts to use when comparing assembly information
            </summary>
            <exclude/>
        </member>
        <member name="T:SandcastleBuilder.Utils.Gac.ASM_NAME">
            <summary>
            This defines the various ID values used for assembly properties
            </summary>
            <exclude/>
        </member>
        <member name="T:SandcastleBuilder.Utils.Gac.IAssemblyName">
            <summary>
            This is used to represent an assembly name
            </summary>
            <exclude/>
        </member>
        <member name="T:SandcastleBuilder.Utils.Gac.IAssemblyEnum">
            <summary>
            This is used to enumerate the assemblies in the GAC
            </summary>
            <exclude/>
        </member>
        <member name="T:SandcastleBuilder.Utils.Gac.NativeMethods">
            <summary>
            This defines the one and only method we need in the help file builder
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Gac.NativeMethods.CreateAssemblyEnum(SandcastleBuilder.Utils.Gac.IAssemblyEnum@,System.IntPtr,SandcastleBuilder.Utils.Gac.IAssemblyName,SandcastleBuilder.Utils.Gac.ASM_CACHE_FLAGS,System.IntPtr)">
            <summary>
            This is used to obtain an instance of the assembly enumerator
            </summary>
            <param name="ppEnum">A reference that will end up containing the
            IAssemblyEnum interface.</param>
            <param name="pUnkReserved">Reserved.  Must always be null.</param>
            <param name="pName">An assembly name that is used to filter the
            enumeration.  This can be null to enumerate all assemblies in the
            GAC.</param>
            <param name="dwFlags">Specify one (and only one) ASM_CACHE_FLAGS
            value.</param>
            <param name="pvReserved">Reserved.  Must always be null.</param>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg">
            <summary>
            This form is used to edit the API filter collection
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.buildProcess_BuildStepChanged(System.Object,SandcastleBuilder.Utils.BuildEngine.BuildProgressEventArgs)">
            <summary>
            This is called by the build process thread to update the main
            window with the current build step.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.buildProcess_BuildProgress(System.Object,SandcastleBuilder.Utils.BuildEngine.BuildProgressEventArgs)">
            <summary>
            This is called by the build process thread to update the main
            window with information about its progress.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.ConvertApiFilter(SandcastleBuilder.Utils.ApiFilterCollection)">
            <summary>
            This is used to convert the API filter from the build into a
            dictionary so that it is easier to look up the entries.
            </summary>
            <param name="filter">The filter collection to search for project
            level exclusions.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.LoadNamespaces">
            <summary>
            This is used to load the reflection information file and to load
            the root namespace nodes into the tree view.
            </summary>
            <remarks>The namespace nodes and type nodes are loaded on demand
            to reduce the time needed to create the tree view and to conserve
            some memory for extremely large builds.
            <p/>Documented APIs are loaded into the first root node.  Inherited
            APIs are loaded into the second node.  By splitting the inherited
            stuff out, we can optimze the API filter and allow the user to get
            rid of unwanted inherited members with a single selection.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.AddTypes(System.Windows.Forms.TreeNode)">
            <summary>
            Add all types found in the specified namespace node to the
            specified tree node.
            </summary>
            <param name="parentNode">The parent tree node to which they are
            added.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.AddBaseTypes(System.Windows.Forms.TreeNode)">
            <summary>
            Add all base types found in the specified namespace node to the
            specified tree node.
            </summary>
            <param name="parentNode">The parent tree node to which they are
            added.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.AddMembers(System.Windows.Forms.TreeNode)">
            <summary>
            Add all members found in the specified type node to the specified
            tree node.
            </summary>
            <param name="parentNode">The parent tree node to which they are
            added.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.AddBaseMembers(System.Windows.Forms.TreeNode)">
            <summary>
            Add all inherited members found in the specified type node to the
            specified tree node.
            </summary>
            <param name="parentNode">The parent tree node to which they are
            added.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.OptimizeCheckedState(System.Windows.Forms.TreeNode,System.Boolean)">
            <summary>
            Examine the nodes and optimize the state of the filter based on
            various conditions.
            </summary>
            <param name="currentNode">The node in which the checked state
            changed.</param>
            <param name="setChildren">Set the checked state of all child
            nodes to the parent node's state if true</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.SearchForMember(System.String,System.Windows.Forms.TreeNode)">
            <summary>
            Search the children of the specified tree node looking for the
            given API member name.
            </summary>
            <param name="memberName">The member name for which to search</param>
            <param name="root">The root node to search</param>
            <returns>The tree node matching the given ID or null if not found</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.AddNamespaceFilter(System.Windows.Forms.TreeNode)">
            <summary>
            This is used to add namespace filters to the API filter
            </summary>
            <param name="root">The tree node from which to start</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.AddChildFilter(SandcastleBuilder.Utils.ApiFilter,System.Windows.Forms.TreeNodeCollection,System.Boolean)">
            <summary>
            This will add child filter entries for each tree node where the
            checked state matches the given state.
            </summary>
            <param name="filter">The filter to which the entries are added</param>
            <param name="nodes">The tree nodes to scan</param>
            <param name="state">The check state to match</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.AllChildrenMatchParentCheckState(System.Windows.Forms.TreeNodeCollection,System.Boolean)">
            <summary>
            This is used to see if the given node and all of its children match
            the specified state.
            </summary>
            <param name="nodes">The nodes to check</param>
            <param name="state">The state to match</param>
            <returns>True if all children's checked states match the parent
            node's checked state, false if not.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.#ctor(SandcastleBuilder.Utils.ApiFilterCollection)">
            <summary>
            Constructor
            </summary>
            <param name="filter">The item collection to edit</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.ApiFilterEditorDlg_Load(System.Object,System.EventArgs)">
            <summary>
            This is used to start the background build process from which
            we will get the information to load the tree view.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.ApiFilterEditorDlg_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Shut down the build process thread and clean up on exit
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.btnClose_Click(System.Object,System.EventArgs)">
            <summary>
            Refresh the collection and close the form
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.btnHelp_Click(System.Object,System.EventArgs)">
            <summary>
            View help for this form
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.btnReset_Click(System.Object,System.EventArgs)">
            <summary>
            Reset the API filter by clearing its content and closing the form
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.tvApiList_BeforeExpand(System.Object,System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            This is used to load child tree nodes on demand which speeds up
            the initial form load for extremely large projects.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.tvApiList_BeforeCheck(System.Object,System.Windows.Forms.TreeViewCancelEventArgs)">
            <summary>
            Ignore attempts to uncheck the root nodes, namespace and type nodes
            in the inherited APIs, and nodes that are excluded via other project
            settings (i.e. namespace comments and <code>&lt;exclude/&gt;</code>
            tags.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
            <remarks>Unchecking a root node would get rid of everything.
            Unchecking a namespace or type for an inherited API may
            inadvertently get rid of something that is needed.  Project
            excludes will be removed regardless of the API filter setting so
            must remain excluded.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.tvApiList_AfterCheck(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            Optimize the filter when a node checked state changes
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.btnFind_Click(System.Object,System.EventArgs)">
            <summary>
            Search for members that match the search conditions
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.btnGoto_Click(System.Object,System.EventArgs)">
            <summary>
            Goto the selected member in the tree view
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.btnIncludeExclude_Click(System.Object,System.EventArgs)">
            <summary>
            Include or exclude the selected members
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.lvSearchResults_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Double-clicking an item is the same as clicking Goto
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="F:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.ApiVisibility">
            <summary>
            This is used to indicate the visibility of a member in the node
            information type below.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.ApiVisibility.Public">
            <summary>The member is public</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.ApiVisibility.Protected">
            <summary>The member is protected</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.ApiVisibility.Internal">
            <summary>The member is internal (Friend)</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.ApiVisibility.Private">
            <summary>The member is private</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.NodeInfo">
            <summary>
            This is used to associate additional information with each tree
            node to make it easier to look stuff up.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.NodeInfo.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="text">The text for the tree view</param>
            <param name="apiId">The API ID</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.NodeInfo.DetermineApiEntryType">
            <summary>
            This will determine the API entry type and visibility based on
            the information in the reflection information node.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.NodeInfo.AppendTemplatesToNodeText">
            <summary>
            If this API node contains template information, add that
            info to the node's display text.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.NodeInfo.EntryTypeFromId(System.Char,System.String)">
            <summary>
            Determine the API entry type from the ID and possible the
            subgroup.
            </summary>
            <param name="apiType">The type character to convert</param>
            <param name="subgroup">The subgroup to use</param>
            <returns>An <see cref="T:SandcastleBuilder.Utils.ApiEntryType"/> indicating the entry
            type.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.NodeInfo.DetermineVisibility(System.Char,System.Xml.XmlNode)">
            <summary>
            Determine the visibility from the API node information
            </summary>
            <param name="apiType">The API type character from the ID</param>
            <param name="node">The API node information</param>
            <returns>An <see cref="T:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.ApiVisibility"/> indicating the entry's
            visibility.</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.NodeInfo.NodeText">
            <summary>
            Get or set the text to display in the tree view
            </summary>
            <value>This will be the full namespace name or the type
            or member name without the namespace.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.NodeInfo.Id">
            <summary>
            This read-only property is used to get the API ID (the
            namespace, type, or member name).
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.NodeInfo.FilterName">
            <summary>
            For types, this will be set to the filter name to use if the
            class is nested within another class.
            </summary>
            <remarks>In such cases, the parent class name(s) must prefix
            the type so that it can be correctly excluded or included.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.NodeInfo.ApiNode">
            <summary>
            Get or set the API node from the reflection information file
            </summary>
            <remarks>This will also set the <see cref="P:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.NodeInfo.EntryType"/>
            based on the reflection information in the node.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.NodeInfo.EntryType">
            <summary>
            This read-only property is used to get the API entry type for
            this node.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.NodeInfo.Visibility">
            <summary>
            This read-only property is used to get the visibility of this
            node.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ApiFilterEditorDlg.NodeInfo.IsProjectExclude">
            <summary>
            Get or set whether or not the entry is a project exclude
            </summary>
            <remarks>If excluded via the Namespace Comments project option
            or an <code>&lt;exclude /&gt;</code> tag, this property will
            be set to true and the node cannot be marked as exposed.  It
            is also used to disallow changes to some of the fixed and
            inherited API entry nodes.</remarks>
        </member>
        <member name="T:SandcastleBuilder.Utils.CollectionTocStyle">
            <summary>
            This public enumerated type defines the collection table of contents
            style for MS Help 2 collections.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.CollectionTocStyle.Hierarchical">
            <summary>The collection content will be grouped under a root
            node.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.CollectionTocStyle.Flat">
            <summary>The collection content will be listed at the root
            level.</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.BuildComponent.ComponentPosition">
            <summary>
            This is used to define the position of a custom build component within
            the Sandcastle configuration file.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildComponent.ComponentPosition.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildComponent.ComponentPosition.#ctor(System.Xml.XPath.XPathNavigator)">
            <summary>
            Constructor
            </summary>
            <param name="config">The XPath navigator containing the configuration</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.ComponentPosition.Place">
            <summary>
            This read-only property returns the placement value
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.ComponentPosition.Id">
            <summary>
            This read-only property returns the ID of the component
            </summary>
            <remarks>If not specified, use <see cref="P:SandcastleBuilder.Utils.BuildComponent.ComponentPosition.TypeName"/>.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.ComponentPosition.TypeName">
            <summary>
            This read-only property returns the type name of the component
            </summary>
            <remarks>If not specified, use <see cref="P:SandcastleBuilder.Utils.BuildComponent.ComponentPosition.Id"/>.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.ComponentPosition.Instance">
            <summary>
            This read-only property returns the instance of the component
            to replace, insert before, or insert after.
            </summary>
            <remarks>If not specified 1 is assumed.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.ComponentPosition.AdjustedInstance">
            <summary>
            This property is used to get or set the instance of the component
            to replace, insert before, or insert after adjusted for other
            components that have already been processed.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.BuildComponent.ComponentPosition.Placement">
            <summary>
            This enumeration defines the placement values
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildComponent.ComponentPosition.Placement.Before">
            <summary>Place the component before the one indicated.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildComponent.ComponentPosition.Placement.After">
            <summary>Place the component after the one indicated.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildComponent.ComponentPosition.Placement.Start">
            <summary>Insert the component at the start of the configuration
            file.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildComponent.ComponentPosition.Placement.End">
            <summary>Insert the component at the end of the configuration
            file.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildComponent.ComponentPosition.Placement.Replace">
            <summary>Replace the indicated component configuration with
            this one.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildComponent.ComponentPosition.Placement.NotUsed">
            <summary>The component is not used in this configuration</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.DynamicReadOnlyPropertyDescriptor">
            <summary>
            This property descriptor can be used to alter the read-only state of a
            property in a property grid at runtime based on other conditions.
            </summary>
            <remarks>To use it, derive a new class and override the
            <see cref="P:SandcastleBuilder.Utils.Design.DynamicReadOnlyPropertyDescriptor.IsReadOnly"/> property.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.DynamicReadOnlyPropertyDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Constructor
            </summary>
            <param name="typeDescriptor">The type descriptor</param>
            <param name="propertyDescriptor">The property descriptor</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.DynamicReadOnlyPropertyDescriptor.CanResetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.DynamicReadOnlyPropertyDescriptor.GetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.DynamicReadOnlyPropertyDescriptor.ResetValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.DynamicReadOnlyPropertyDescriptor.SetValue(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.DynamicReadOnlyPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.DynamicReadOnlyPropertyDescriptor.TypeDescriptor">
            <summary>
            This is used to get the associated type descriptor
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.DynamicReadOnlyPropertyDescriptor.PropertyDescriptor">
            <summary>
            This is used to get the property descriptor wrapped by this class
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.DynamicReadOnlyPropertyDescriptor.ComponentType">
            <inheritdoc />
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.DynamicReadOnlyPropertyDescriptor.IsReadOnly">
            <inheritdoc />
            <remarks>Derived classes must override this method</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.DynamicReadOnlyPropertyDescriptor.PropertyType">
            <inheritdoc />
        </member>
        <member name="T:SandcastleBuilder.Utils.Conversion.ConvertFromNDoc">
            <summary>
            This class is used to convert NDoc 1.x project files to the MSBuild
            format project files used by the help file builder.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromNDoc.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="oldProjectFile">The old project filename</param>
            <param name="folder">The folder in which to place the new project
            and its related files.  This cannot be the same folder as the
            old project file.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromNDoc.ConvertProject">
            <summary>
            This is used to perform the actual conversion
            </summary>
            <returns>The new project filename on success.  An exception is
            thrown if the conversion fails.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromNDoc.ConvertAdditionalContent(System.String)">
            <summary>
            Add additional content to the project
            </summary>
            <param name="folder">The folder containing the content</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.Conversion.ConvertFromNDoc.Reader">
            <summary>
            An XML reader isn't used by this converter
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.ConceptualContent.ResourceItem">
            <summary>
            This represents a Sandcastle transformation resource item that can be
            used to insert a common item, value, or construct into generated topics.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ResourceItem.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="file">The file containing the resource item</param>
            <param name="id">The item ID</param>
            <param name="value">The item value</param>
            <param name="isOverride">True if this is an override, false if not</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ResourceItem.SourceFile">
            <summary>
            This is used to get or set the name of the file containing the
            resource item.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ResourceItem.Id">
            <summary>
            This read-only property is used to get the item ID
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ResourceItem.Value">
            <summary>
            This is used to get or set the item value
            </summary>
            <value>The value can contain help file builder replacement tags.
            These will be replaced at build time with the appropriate project
            value.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ResourceItem.IsOverridden">
            <summary>
            This is used to get or set whether or not the item has been edited
            and thus overrides a default item with the same ID.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.FolderDialogAttribute">
            <summary>
            This attribute is used to associate folder dialog parameters with a
            class property for use in editing it in a property grid.
            </summary>
            <seealso cref="T:SandcastleBuilder.Utils.Design.FolderPathStringEditor"/>
            <seealso cref="T:SandcastleBuilder.Utils.Design.FolderPathObjectEditor"/>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FolderDialogAttribute.#ctor(System.String,System.Boolean,System.Environment.SpecialFolder,System.Environment.SpecialFolder)">
            <summary>
            Constructor
            </summary>
            <param name="description">The description for the folder dialog</param>
            <param name="showNewFolderButton">True to show the New Folder
            button or false to hide it.</param>
            <param name="rootFolder">The root folder used to limit browsing.</param>
            <param name="defaultFolder">The default folder from which to
            start browsing.</param>
            <overloads>There are three overloads for the constructor.</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FolderDialogAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="description">The description for the folder dialog</param>
            <remarks>The New Folder button is hidden and browsing starts
            at the desktop.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FolderDialogAttribute.#ctor(System.String,System.Environment.SpecialFolder)">
            <summary>
            Constructor
            </summary>
            <param name="description">The description for the folder dialog</param>
            <param name="defaultFolder">The default folder from which to
            start browsing.</param>
            <remarks>The New Folder button is hidden and browsing starts
            at the desktop.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.FolderDialogAttribute.Description">
            <summary>
            This is used to get the folder dialog description
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.FolderDialogAttribute.ShowNewFolderButton">
            <summary>
            This is used to get whether or not to show the New Folder button
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.FolderDialogAttribute.RootFolder">
            <summary>
            This is used to get the root folder used to limit browsing
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.FolderDialogAttribute.DefaultFolder">
            <summary>
            This is used to get the default folder from which to start browsing
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.MSBuild.XslTransform">
            <summary>
            This task is used to run XslTransform.exe which is used to run various
            XSL transformations on the Sandcastle data files.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.XslTransform.ValidateParameters">
            <summary>
            Validate the parameters
            </summary>
            <returns>True if the parameters are valid, false if not</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.XslTransform.GenerateFullPathToTool">
            <summary>
            This returns the full path to the tool
            </summary>
            <returns>The full path to the tool</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.XslTransform.GenerateCommandLineCommands">
            <summary>
            Generate the command line parameters
            </summary>
            <returns>The command line parameters</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.XslTransform.GetWorkingDirectory">
            <summary>
            This is overridden to return the working folder for the build
            </summary>
            <returns>The working folder for the build</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.XslTransform.ToolName">
            <summary>
            This read-only property returns the tool name (XslTransform.exe)
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.XslTransform.StandardErrorLoggingImportance">
            <summary>
            This is overridden to force all standard error info to be logged
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.XslTransform.StandardOutputLoggingImportance">
            <summary>
            This is overridden to force all standard output info to be logged
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.XslTransform.SandcastlePath">
            <summary>
            This is used to pass in the path to the Sandcastle tools
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.XslTransform.InputFile">
            <summary>
            This is used to pass in the input filename
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.XslTransform.OutputFile">
            <summary>
            This is used to pass in the output filename
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.XslTransform.Transformations">
            <summary>
            This is used to pass in the list of transformations to run
            </summary>
            <remarks>Separate multiple transforms with a semi-colon.  Relative
            paths are assumed to refer to Sandcastle transformations and will
            be fully qualified with the <see cref="P:SandcastleBuilder.Utils.MSBuild.XslTransform.SandcastlePath"/> value.
            Absolute paths are assumed to be custom transforms and the path is
            not modified.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.XslTransform.WorkingFolder">
            <summary>
            This is used to pass in the working folder where the files are
            located.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.XslTransform.Arguments">
            <summary>
            This is used to pass in any optional XSL transform arguments
            </summary>
            <value>The optional XSL transform arguments in the form
            "argName=argValue".  Separate multiple arguments with a
            semi-colon.</value>
        </member>
        <member name="T:SandcastleBuilder.Utils.InheritedDocumentation.InheritedDocsException">
            <summary>
            This exception class is thrown by the application if it encounters an
            unrecoverable error.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.InheritedDocumentation.InheritedDocsException.#ctor">
            <summary>
            Default constructor.
            </summary>
            <overloads>There are three overloads for the constructor</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.InheritedDocumentation.InheritedDocsException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.InheritedDocumentation.InheritedDocsException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.InheritedDocumentation.InheritedDocsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.ConfigurationEditorDlg">
            <summary>
            This form is used to edit a build component configuration as XML text.
            This is used for components that have to built-in configuration method.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.Design.ConfigurationEditorDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ConfigurationEditorDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ConfigurationEditorDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ConfigurationEditorDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ConfigurationEditorDlg.btnClose_Click(System.Object,System.EventArgs)">
            <summary>
            Close the form without saving
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ConfigurationEditorDlg.btnOK_Click(System.Object,System.EventArgs)">
            <summary>
            Save the changes
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ConfigurationEditorDlg.txtConfiguration_Enter(System.Object,System.EventArgs)">
            <summary>
            Clear the text selection on entry to prevent accidental
            deletion of the text.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ConfigurationEditorDlg.Configuration">
            <summary>
            This is used to set or get the configuration text
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.ConceptualContent.ContentType">
            <summary>
            This defines the content types that can be edited
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ConceptualContent.ContentType.CodeSnippets">
            <summary>Code snippets</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ConceptualContent.ContentType.Images">
            <summary>Edit image references</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ConceptualContent.ContentType.Tokens">
            <summary>Edit tokens</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ConceptualContent.ContentType.Topics">
            <summary>Edit topics</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.BuildComponent.BuildComponentManager">
            <summary>
            This class is used to manage the set of third party build components
            including language syntax filters.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildComponent.BuildComponentManager.SetPaths">
            <summary>
            Set the paths used to find component configuration files and
            assemblies.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildComponent.BuildComponentManager.LoadBuildComponents">
            <summary>
            Load the build components found in the Components and Plug-Ins
            folder and its subfolders.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildComponent.BuildComponentManager.LoadSyntaxFilters">
            <summary>
            Load the syntax filter information found in the Components and
            Plug-Ins folder and its subfolders.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildComponent.BuildComponentManager.ResolveComponentPath(System.String)">
            <summary>
            This is used to resolve replacement tags and environment variables
            in a build component's assembly path and return the actual path
            to it.
            </summary>
            <param name="path">The path to resolve</param>
            <returns>The actual absolute path to the assembly</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildComponent.BuildComponentManager.SyntaxFiltersFrom(System.String)">
            <summary>
            This is used to return a collection of syntax filters based on
            the comma-separated list of IDs passed to the method.
            </summary>
            <param name="filterIds">A comma-separated list of syntax filter
            ID values</param>
            <returns>A collection containing <see cref="T:SandcastleBuilder.Utils.BuildComponent.SyntaxFilterInfo"/>
            entries for each syntax filter ID found.</returns>
            <remarks>The following special IDs are also recognized: None = No
            filters, All = all filters, AllButUsage = All but syntax filters
            with "Usage" in their ID (i.e. VisualBasicUsage), Standard = C#,
            VB.NET, and C++ only.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildComponent.BuildComponentManager.SyntaxFilterGeneratorsFrom(System.String)">
            <summary>
            This returns the syntax generator XML elements to insert into a
            BuildAssembler configuration file for the comma-separated list of
            syntax filter IDs.
            </summary>
            <param name="filterIds">A comma-separated list of syntax filter
            ID values</param>
            <returns>A string containing the generator XML elements for the
            specified syntax filter IDs.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildComponent.BuildComponentManager.SyntaxFilterLanguagesFrom(System.String)">
            <summary>
            This returns the syntax language XML elements to insert into a
            BuildAssembler configuration file for the comma-separated list of
            syntax filter IDs.
            </summary>
            <param name="filterIds">A comma-separated list of syntax filter
            ID values</param>
            <returns>A string containing the language XML elements for the
            specified syntax filter IDs.</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentManager.DefaultSyntaxFilter">
            <summary>
            This returns the default syntax filter setting
            </summary>
            <value>This returns "Standard" to add the standard C#, VB.NET and
            C++ syntax filter to each API topic.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentManager.BuildComponentsFolder">
            <summary>
            This read-only property returns the build components folder
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentManager.SandcastlePath">
            <summary>
            This is used to set or get the Sandcastle installation folder
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentManager.BuildComponents">
            <summary>
            This returns a dictionary containing the loaded build component
            information.
            </summary>
            <value>The dictionary keys are the component IDs.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentManager.SyntaxFilters">
            <summary>
            This returns a dictionary containing the loaded language syntax
            filter build component information.
            </summary>
            <value>The dictionary keys are the syntax filter IDs.</value>
        </member>
        <member name="T:SandcastleBuilder.Utils.Controls.StatusBarTextProvider">
            <summary>
            This is an <see cref="T:System.ComponentModel.IExtenderProvider"/> component that allows you
            to add status bar text for menu items and form controls.  When built
            for use with .NET 2.0, it also supports adding status bar text for
            menu strip, tool strip, and status strip components.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.#ctor">
            <summary>
            Default constructor
            </summary>
            <overloads>There are two overloads for the constructor</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructor.  This one takes a reference to a container.
            </summary>
            <param name="container">The container for the component</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">True to release both managed and unmanaged
            resources, false to just release unmanaged resources.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.CanExtend(System.Object)">
            <summary>
            This is implemented to determine if the component can be extended
            with the extra properties.
            </summary>
            <param name="extendee">The object to check</param>
            <returns>True if it can be extended, false if not</returns>
            <remarks><see cref="T:System.Windows.Forms.MenuItem"/> components and everything derived
            from <b>ToolStripItem</b> (.NET 2.0) and
            <see cref="T:System.Windows.Forms.Control"/> are extended with the <b>StatusBarText</b>
            and <b>ShowAsBlank</b> properties with the following exceptions:
            <b>Form</b>, <b>Label</b>, <b>PictureBox</b>, <b>ProgressBar</b>,
            <b>ScrollBar</b>, <b>Splitter</b>, <b>StatusBar</b>,
            <b>ToolBar</b>, <b>ToolStrip</b> (.NET 2.0) and controls derived
            from them.  The <b>Form</b> contain controls and the other controls
            cannot receive the focus needed to display the text so there is no
            point in giving them status bar text.  The exception to the above
            rule is <b>LinkLabel</b> which can receive the focus and thus can
            be extended.  <b>ToolStripItem</b> components are only supported
            when built for use with .NET 2.0.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.GetStatusBarText(System.ComponentModel.Component)">
            <summary>
            This is used to retrieve the status bar text for a component.
            </summary>
            <param name="comp">The component for which to get the status bar
            text</param>
            <returns>The message string if found or null if not found</returns>
            <exception cref="T:System.ArgumentException">This is thrown if the component
            is null or if it is not a menu item, control, or a tool strip item.
            </exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.SetStatusBarText(System.ComponentModel.Component,System.String)">
            <summary>
            This stores the status bar text for the specified component.
            </summary>
            <param name="comp">The component associated with the message</param>
            <param name="message">The status bar text for the component</param>
            <remarks>The designer converts strings containing nothing but
            spaces to empty strings and won't serialize them to code.  If you
            want a blank string to display, use <see cref="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.SetShowAsBlank(System.ComponentModel.Component,System.Boolean)"/>
            to set the "show as blank" flag to true instead.</remarks>
            <exception cref="T:System.ArgumentException">This is thrown if the component
            is null or if it is not a menu item, control, or a tool strip item.
            </exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.GetShowAsBlank(System.ComponentModel.Component)">
            <summary>
            This is used to retrieve the "show as blank" flag for a menu item
            or control.
            </summary>
            <param name="comp">The item for which to get the flag</param>
            <returns>True if it will show a blank status bar message or false
            if not.</returns>
            <exception cref="T:System.ArgumentException">This is thrown if the component
            is null or if it is not a menu item, control, or a tool strip item.
            </exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.SetShowAsBlank(System.ComponentModel.Component,System.Boolean)">
            <summary>
            This stores the "show as blank" flag for the specified component.
            </summary>
            <param name="comp">The component associated with the property</param>
            <param name="showBlank">The flag value for the component</param>
            <remarks>The designer converts strings containing nothing but
            spaces to empty strings and this equates to the default and the
            value is not serialized to code. If you want a blank string to
            display, set this property to true instead.  This property takes
            precedence over the <b>StatusBarText</b> property.</remarks>
            <exception cref="T:System.ArgumentException">This is thrown if the component
            is null or if it is not a menu item, control, or a tool strip item.
            </exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InitializeProgressBar(System.Int32)">
            <summary>
            This can be used to initialize the status strip progress bar
            controls.
            </summary>
            <param name="maximum">The maximum value</param>
            <overloads>There are six overloads for this method.</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InitializeProgressBar(System.Int32,System.String)">
            <summary>
            This can be used to initialize the status strip progress bar
            controls.
            </summary>
            <param name="maximum">The maximum value</param>
            <param name="progressNote">A note for the progress note status
            label control.  If null, the current text is left alone.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InitializeProgressBar(System.Int32,System.Int32)">
            <summary>
            This can be used to initialize the status strip progress bar
            controls.
            </summary>
            <param name="minimum">The minimum value</param>
            <param name="maximum">The maximum value</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InitializeProgressBar(System.Int32,System.Int32,System.Int32)">
            <summary>
            This can be used to initialize the status strip progress bar
            controls.
            </summary>
            <param name="minimum">The minimum value</param>
            <param name="maximum">The maximum value</param>
            <param name="current">The current value</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InitializeProgressBar(System.Int32,System.Int32,System.String)">
            <summary>
            This can be used to initialize the status strip progress bar
            controls.
            </summary>
            <param name="minimum">The minimum value</param>
            <param name="maximum">The maximum value</param>
            <param name="progressNote">A note for the progress note status
            label control.  If null, the current text is left alone.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InitializeProgressBar(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            This can be used to initialize the status strip progress bar
            controls.
            </summary>
            <param name="minimum">The minimum value</param>
            <param name="maximum">The maximum value</param>
            <param name="current">The current value</param>
            <param name="step">The step value for the progress bar</param>
            <param name="progressNote">A note for the progress note status
            label control.  If null, the current text is left alone.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.UpdateProgress">
            <summary>
            This can be used to update the progress bar with a new value
            </summary>
            <remarks>This version updates the progress by the step
            value.</remarks>
            <overloads>There are four overloads for this method</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.UpdateProgress(System.String)">
            <summary>
            This can be used to update the progress bar with a new value
            </summary>
            <param name="progressNote">A note for the progress note status
            label control.</param>
            <remarks>This version updates the progress by the step
            value and updates the progress note.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.UpdateProgress(System.Int32)">
            <summary>
            This can be used to update the progress bar with a new value
            </summary>
            <param name="current">The current value</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.UpdateProgress(System.Int32,System.String)">
            <summary>
            This can be used to update the progress bar with a new value
            </summary>
            <param name="current">The current value</param>
            <param name="progressNote">A note for the progress note status
            label control.  If null, the current text is left alone.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.ResetProgressBar">
            <summary>
            This can be used to reset the status strip progress bar
            to its minimum value.
            </summary>
            <remarks>This version resets the progress bar to zero and
            clears the progress note.</remarks>
            <overloads>There are two overloads for this method.</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.ResetProgressBar(System.String)">
            <summary>
            This can be used to reset the status strip progress bar
            to its minimum value and display a new progress message.
            </summary>
            <param name="progressNote">The progress note to display in
            the progress note status label.  If set to null, the
            message is cleared.</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.ApplicationStatusBar">
             <summary>
             This is used to set or get the default status bar component to use
             for displaying the status bar text messages.
             </summary>
             <value>This property is static and must be set at some point
             during application initialization.  This component will be used
             unless the <see cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InstanceStatusBar"/> property is set to
             override it.
             </value>
             <seealso cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.ApplicationDisplayPanel"/>
             <seealso cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InstanceStatusBar"/>
             <seealso cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InstanceDisplayPanel"/>
             <example>
             <code>
             // Define the default status bar to use in the main form's
             // constructor
             public MainForm()
             {
                 InitializeComponent();
            
                 //=========
                 // .NET 1.1
                 //=========
                 // Tell the StatusBarTextProvider component the status bar
                 // to use.
                 StatusBarTextProvider.ApplicationStatusBar = sbStatusBar;
            
                 // You can also use any panel you like.  The default is zero
                 // (the left-most panel).  For the demo, we'll use the one
                 // in the middle.
                 StatusBarTextProvider.ApplicationDisplayPanel = 1;
            
                 //=========
                 // .NET 2.0
                 //=========
                 // Tell the StatusBarTextProvider component the component
                 // to use to display the text.  When using a tool strip
                 // component, the ApplicationDisplayPanel property is ignored.
                 StatusBarTextProvider.ApplicationStatusBar = tslStatusText;
            
                 // Define the status label and progress bar too.  This allows
                 // easy access to those items from anywhere within the
                 // application.
                 StatusBarTextProvider.StatusLabel = tslProgressNote;
                 StatusBarTextProvider.ProgressBar = tspbProgressBar;
             }
             </code>
             <code lang="vbnet">
             ' Define the default status bar to use in the main form's
             ' constructor
             Public Sub New()
                 MyBase.New()
            
                 InitializeComponent()
            
                 '=========
                 ' .NET 1.1
                 '=========
                 ' Tell the StatusBarTextProvider component the status bar
                 ' to use.
                 StatusBarTextProvider.ApplicationStatusBar = sbStatusBar;
            
                 ' You can also use any panel you like.  The default is zero
                 ' (the left-most panel).  For the demo, we'll use the one
                 ' in the middle.
                 StatusBarTextProvider.ApplicationDisplayPanel = 1;
            
                 '=========
                 ' .NET 2.0
                 '=========
                 ' Tell the StatusBarTextProvider component the component
                 ' to use to display the text.  When using a tool strip
                 ' component, the ApplicationDisplayPanel property is ignored.
                 StatusBarTextProvider.ApplicationStatusBar = tslStatusText;
            
                 ' Define the status label and progress bar too.  This allows
                 ' easy access to those items from anywhere within the
                 ' application.
                 StatusBarTextProvider.StatusLabel = tslProgressNote;
                 StatusBarTextProvider.ProgressBar = tspbProgressBar;
             End Sub
             </code>
             </example>
             <exception cref="T:System.ArgumentException">This is thrown if the object
             is not a status bar control or a tool strip item.</exception>
        </member>
        <member name="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.ApplicationDisplayPanel">
            <summary>
            This is used to set or get the status bar panel in which to
            display the messages in the common application status bar.
            </summary>
            <value>This property is static and must be set at some point
            during application initialization.  This display panel will be
            used unless the <see cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InstanceStatusBar"/> property is set
            to override the status bar used.  In that case, the
            <see cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InstanceDisplayPanel"/> is used instead.
            <p/>The default is zero (the first panel).  If the status bar does
            not have panels, the index exceeds the panel count, or the status
            bar's <see cref="P:System.Windows.Forms.StatusBar.ShowPanels"/>
            property is false, messages will be shown in the status bar's
            <b>Text</b> property instead.  This property is ignored if using a
            tool strip item to display the text.</value>
            <seealso cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.ApplicationStatusBar"/>
            <seealso cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InstanceStatusBar"/>
            <seealso cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InstanceDisplayPanel"/>
        </member>
        <member name="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.ApplicationDefaultText">
            <summary>
            This is used to set or get the default text to show when no item
            has the focus or no status text for the application status bar.
            </summary>
            <value>By default, it will be set to the text in the selected
            status bar component.  If you set it to a different value, set
            this property after specifying the status bar control to use.
            </value>
        </member>
        <member name="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.StatusLabel">
            <summary>
            This is used to get or set the tool strip status label component
            that can be used to display a status message in conjunction with
            the <see cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.ProgressBar"/> component.
            </summary>
            <remarks>This property is only available when used with .NET 2.0.
            </remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.ProgressBar">
            <summary>
            This is used to get or set the tool strip progress bar component
            that can be used to display progress through a long running task.
            </summary>
            <remarks>This can be used in conjunction with
            <see cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.StatusLabel"/>.  This property is only available when
            used with .NET 2.0.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InstanceStatusBar">
            <summary>
            This is used to get or set the status bar component to use for this
            instance.
            </summary>
            <value>If not set or set to null, it will use the status bar
            control assigned to the <see cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.ApplicationStatusBar"/>
            property.</value>
            <seealso cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.ApplicationStatusBar"/>
            <seealso cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.ApplicationDisplayPanel"/>
            <seealso cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InstanceDisplayPanel"/>
            <exception cref="T:System.ArgumentException">This is thrown if the object
            is not a status bar control or a tool strip item.</exception>
        </member>
        <member name="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InstanceDisplayPanel">
            <summary>
            This is used to set or get the status bar panel in which to
            display the messages when the <see cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InstanceStatusBar"/>
            property is set to a status bar.
            </summary>
            <value>The default is zero (the first panel).  If the status
            bar does not have panels, the index exceeds the panel count,
            or the status bar's
            <see cref="P:System.Windows.Forms.StatusBar.ShowPanels"/> property
            is false, messages will be shown in the status bar's <b>Text</b>
            property instead.  If using the <see cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.ApplicationStatusBar"/>,
            this property is ignored.  It is also ignored if using a tool
            strip item to display the text.</value>
            <seealso cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.ApplicationStatusBar"/>
            <seealso cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.ApplicationDisplayPanel"/>
            <seealso cref="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InstanceStatusBar"/>
        </member>
        <member name="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.InstanceDefaultText">
            <summary>
            This is used to set or get the default text to show when no item
            has the focus or no status text for the instance status bar.
            </summary>
            <value>By default, it will be set to the text in the selected
            status bar component.  If set to a different value, set this
            property after specifying the status bar control to use.
            </value>
        </member>
        <member name="T:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.PropertyOptions">
            <summary>
            This class contains the options for the items that need status bar
            text.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.PropertyOptions.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="msg">The message text to display</param>
            <overloads>There are two overloads for the constructor</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.PropertyOptions.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="showBlank">The "show as blank" flag</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.PropertyOptions.Message">
            <summary>
            Set or get the message text
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Controls.StatusBarTextProvider.PropertyOptions.ShowAsBlank">
            <summary>
            The "show as blank" flag
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.ProjectPropertyChangedEventArgs">
            <summary>
            This event arguments class is used to specify which project property
            changed along with the old and new values.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ProjectPropertyChangedEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The property name</param>
            <param name="oldVal">The old value</param>
            <param name="newVal">The new value</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.ProjectPropertyChangedEventArgs.PropertyName">
            <summary>
            This read-only property returns the property name
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ProjectPropertyChangedEventArgs.OldValue">
            <summary>
            This read-only property returns the old value
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ProjectPropertyChangedEventArgs.NewValue">
            <summary>
            This read-only property returns the new value
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.MSBuild.MSBuildProject">
            <summary>
            This is a simple wrapper around an MSBuild project that is used to
            extract information from it during a help file build.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.MSBuildProject.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="projectFile">The MSBuild project to load</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.MSBuildProject.Finalize">
            <summary>
            This handles garbage collection to ensure proper disposal of the
            MSBuild project if not done explicity with <see cref="M:SandcastleBuilder.Utils.MSBuild.MSBuildProject.Dispose"/>.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.MSBuildProject.Dispose">
            <summary>
            This implements the Dispose() interface to properly dispose of
            the MSBuild project object.
            </summary>
            <overloads>There are two overloads for this method.</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.MSBuildProject.Dispose(System.Boolean)">
            <summary>
            This can be overridden by derived classes to add their own
            disposal code if necessary.
            </summary>
            <param name="disposing">Pass true to dispose of the managed
            and unmanaged resources or false to just dispose of the
            unmanaged resources.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.MSBuildProject.SetConfiguration(System.String,System.String,System.String)">
            <summary>
            This is used to set the active configuration and platform used when
            evaluating the properties.
            </summary>
            <param name="configuration">The active configuration</param>
            <param name="platform">The active platform</param>
            <param name="outDir">The output directory</param>
            <remarks>If the platform is set to any variation of "Any CPU" and
            it isn't found in the project, it will be converted to "AnyCPU"
            (no space).  This works around an issue with Team Build that
            includes the space even though it should not be present.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.MSBuildProject.SetSolutionMacros(System.String)">
            <summary>
            This is used to set the Visual Studio solution macros based on the
            specified project name.
            </summary>
            <param name="solutionName">The solution name to use</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.MSBuildProject.CloneReferenceInfo(System.Collections.Generic.Dictionary{System.String,System.Tuple{System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}}}})">
            <summary>
            Clone the project's reference information and add it to the
            given dictionary.
            </summary>
            <param name="references">The dictionary used to contain the
            cloned reference information</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.MSBuildProject.ProjectFile">
            <summary>
            This is used to get the underlying MSBuild project file reference
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.MSBuildProject.AssemblyName">
            <summary>
            This is used to get the assembly name
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.MSBuildProject.XmlCommentsFile">
            <summary>
            This is used to get the XML comments file name
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.MSBuildProject.TargetFrameworkVersion">
            <summary>
            This is used to get the target framework type and version
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.MSBuildProject.ProjectGuid">
            <summary>
            This is used to get the project GUID
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.InheritedDocumentation.IndexedCommentsFile">
            <summary>
            This represents an indexed XML comments file
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.InheritedDocumentation.IndexedCommentsFile.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filename">The name of the XML comments file to index</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.InheritedDocumentation.IndexedCommentsFile.GetContent(System.String)">
            <summary>
            Get the XML comments for the given key
            </summary>
            <param name="key">The key for the comments</param>
            <returns>An <see cref="T:System.Xml.XPath.XPathNavigator"/> for the comments or null
            if not found.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.InheritedDocumentation.IndexedCommentsFile.GetKeys">
            <summary>
            Return all keys in this file
            </summary>
            <returns>A string array containing the keys</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.InheritedDocumentation.IndexedCommentsFile.Filename">
            <summary>
            This read-only property returns the comments filename
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.InheritedDocumentation.IndexedCommentsFile.Count">
            <summary>
            This read-only property returns the number of items in the index
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.FolderPathTypeConverter">
            <summary>
            This type converter is used to convert a FolderPath object to and from
            a string so that it can be edited in a
            <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FolderPathTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FolderPathTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FolderPathTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:SandcastleBuilder.Utils.ConceptualContent.Topic">
            <summary>
            This represents a conceptual content topic.
            </summary>
            <remarks>This class is serializable so that it can be copied to the
            clipboard.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.Topic.ShouldSerializeHelpAttributes">
            <summary>
            This is used to see if the <see cref="P:SandcastleBuilder.Utils.ConceptualContent.Topic.HelpAttributes"/> property
            should be serialized.
            </summary>
            <returns>True to serialize it, false if it matches the default
            and should not be serialized.</returns>
            <remarks>We do not allow resetting this property as it is a
            collection and we don't want to lose all items accidentally.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.Topic.ShouldSerializeKeywords">
            <summary>
            This is used to see if the <see cref="P:SandcastleBuilder.Utils.ConceptualContent.Topic.Keywords"/> property should
            be serialized.
            </summary>
            <returns>True to serialize it, false if it matches the default
            and should not be serialized.</returns>
            <remarks>We do not allow resetting this property as it is a
            collection and we don't want to lose all items accidentally.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.Topic.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.Topic.childList_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Mark the project as dirty if the contained lists change
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
            <remarks>This may not be the best way to handle this.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.Topic.ReadXml(System.Xml.XmlReader)">
            <summary>
            This is used to load the topic information from the project
            file.
            </summary>
            <param name="xr">The XML text reader from which the information
            is loaded.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.Topic.WriteXml(System.Xml.XmlWriter)">
            <summary>
            This is used to save the topic information to the project file
            </summary>
            <param name="xw">The XML text writer to which the information
            is written.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.Topic.WriteCompanionFile(System.String,SandcastleBuilder.Utils.BuildEngine.BuildProcess)">
            <summary>
            This is used to create the companion file used by the build
            component that resolves conceptual links.
            </summary>
            <param name="folder">The folder in which to place the file</param>
            <param name="builder">The build process</param>
            <remarks>The file will be named using the ID and a ".xml"
            extension.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.Topic.WriteMetadata(System.Xml.XmlWriter,SandcastleBuilder.Utils.BuildEngine.BuildProcess)">
            <summary>
            Write out the topic metadata
            </summary>
            <param name="writer">The writer to which the metadata is written</param>
            <param name="builder">The build process</param>
            <remarks>This will recursively write out metadata for sub-topics
            as well.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.Topic.WriteManifest(System.Xml.XmlWriter,SandcastleBuilder.Utils.BuildEngine.BuildProcess)">
            <summary>
            Write out the <b>BuildAssembler</b> manifest entry
            </summary>
            <param name="writer">The XML writer to which the entry is written</param>
            <param name="builder">The build process</param>
            <remarks>This will recursively write out entries for sub-topics
            as well.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.Topic.ToLink(System.String)">
            <summary>
            Convert the topic to its <c>&lt;link&gt;</c> element form
            </summary>
            <param name="innerText">Optional inner text</param>
            <returns>The topic in its <c>&lt;link&gt;</c> element form</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.Topic.ToAnchor(System.String)">
            <summary>
            Convert the topic to its <c>&lt;a&gt;</c> element form
            </summary>
            <param name="innerText">Optional inner text</param>
            <returns>The topic in its <c>&lt;a&gt;</c> element form</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.Parent">
            <summary>
            This is used to track the topic's parent collection
            </summary>
            <remarks>This is used by the designer to move items around within
            the collection.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.TopicFile">
            <summary>
            This is used to get or set the topic file information related to
            the topic.
            </summary>
            <value>If there is no topic file, this topic serves as a container
            node for its sub-topics and no content will be displayed for it
            when selected in the help file's table of contents.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.NoTopicFile">
            <summary>
            This read-only property returns true if there is no associated
            topic file by choice rather than it not being found.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.ContentId">
            <summary>
            This is used to get the content ID from the content layout file.
            </summary>
            <remarks>This should match an ID from a project file.  If not,
            it will serve as an container node with no associated topic.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.Id">
            <summary>
            This is used to get the unique ID of the topic
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.RevisionNumber">
            <summary>
            This is used to get the topic's revision number
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.TopicFilename">
            <summary>
            This is used to get the filename of the related project file (if any)
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.DocumentType">
            <summary>
            This read-only property is used to get the document type
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.Title">
            <summary>
            This is used to get the required title that should be used for the
            topic.
            </summary>
            <value>If not set, the topic filename without a path or extension
            is used.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.TocTitle">
            <summary>
            This is used to get or set the topic's optional table of contents
            title.
            </summary>
            <value>This can be used to provide a different topic title in the
            table of contents.  If not set, it will be set to the
            <see cref="P:SandcastleBuilder.Utils.ConceptualContent.Topic.Title"/> value.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.LinkText">
            <summary>
            This is used to get or set the topic's optional link text.
            </summary>
            <value>This can be used to provide different text that is used in
            links that refer to the topic.  If not set, it will be set to the
            <see cref="P:SandcastleBuilder.Utils.ConceptualContent.Topic.Title"/> value.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.Visible">
            <summary>
            This is used to get or set whether or not the topic is visible
            in the table of contents.
            </summary>
            <value>If set to false, the item will still be added to the
            help file but to be accessible, a link to it must appear in
            one of the other topics.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.HelpAttributes">
            <summary>
            This is used to get the additional attributes that will be added
            to MAML topic.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.Keywords">
            <summary>
            This is used to get the index keywords that will be added to the
            MAML topic.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.DisplayTitle">
            <summary>
            This read-only property is used to get a title for display
            (i.e. in the designer).
            </summary>
            <value>If there is a <see cref="P:SandcastleBuilder.Utils.ConceptualContent.Topic.TocTitle"/> specified, it is used.
            If not, the <see cref="P:SandcastleBuilder.Utils.ConceptualContent.Topic.Title"/> value is used.  If it does not
            contain a value, the filename without the path and extension is
            used.  If the file has not been specified, does not exist, the
            document type is not recognized, or it is invalid (i.e. badly
            formed), it returns an appropriate message describing the
            problem.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.Subtopics">
            <summary>
            This is used to get the sub-topics beneath this topic.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.IsDefaultTopic">
            <summary>
            This is used to when merging TOC files to determine the default
            topic.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.ApiParentMode">
            <summary>
            This is used to specify how API content is parented to this topic
            or the topic's parent
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Topic.IsMSHVRootContentContainer">
            <summary>
            This is used to get or set whether or not the topic will server as
            the root content container in MS Help Viewer output
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.ProjectFileConfiguration">
            <summary>
            This holds configuration settings for Visual Studio project file
            documentation sources
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ProjectFileConfiguration.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The project filename</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.ProjectFileConfiguration.ProjectFileName">
            <summary>
            This is used to get or set the project filename
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ProjectFileConfiguration.Configuration">
            <summary>
            This is used to get or set the configuration used for the build
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ProjectFileConfiguration.Platform">
            <summary>
            This is used to get or set the platform used for the build
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.MSHelp2SdkLinkType">
            <summary>
            This public enumerated type defines the type of links used to reference
            other help topics referring to framework (SDK) help topics in MS Help 2
            help files.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.MSHelp2SdkLinkType.None">
            <summary>No active links</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.MSHelp2SdkLinkType.Index">
            <summary>Index style links for use within an MS Help 2 help file.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.MSHelp2SdkLinkType.Msdn">
            <summary>Links to framework topics online at MSDN</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditor">
            <summary>
            This is a type editor that displays the <see cref="T:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg"/>
            to edit the user-defined properties in a project.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This is overridden to edit the value using the
            <see cref="T:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditorDlg"/> dialog.
            </summary>
            <param name="context">The descriptor context</param>
            <param name="provider">The provider</param>
            <param name="value">The help file builder project as an object</param>
            <returns>The help file builder project as an object</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.UserDefinedPropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to specify the editor's edit style
            </summary>
            <param name="context">The descriptor context</param>
            <returns>Always returns <b>Modal</b> as long as there is a context
            and an instance.  Otherwise, it returns <b>None</b>.</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.LanguageResourceConverter">
            <summary>
            This type converter allows you to select a culture from a list
            representing a set of available language resource folders.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.LanguageResourceConverter.GetCultureName(System.Globalization.CultureInfo)">
            <summary>
            This is overridden to return the display name so that the class
            works as it did in prior .NET versions.
            </summary>
            <param name="culture">The culture for which to get the name</param>
            <returns>The culture's display name</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.LanguageResourceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to return the values for the type converter's
            dropdown list.
            </summary>
            <param name="context">The format context object</param>
            <returns>Returns the standard values for the type</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.LanguageResourceConverter.CultureInfoComparer">
            <summary>
            This is used to compare two culture info objects by display name
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.LanguageResourceConverter.CultureInfoComparer.Compare(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Compare two items
            </summary>
            <param name="x">The first item to compare</param>
            <param name="y">The second item to compare</param>
            <returns>-1 if item 1 is less than item 2, 0 if they are equal,
            or 1 if item 1 is greater than item 2.</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.PlugInConfigurationEditorDlg">
            <summary>
            This is used to select and edit the plug-in configurations.
            </summary>
            <remarks>To be editable, the plug-in assembly must be present in
            the <b>.\Plug-Ins</b> folder or a subfolder beneath it.  The plug-ins
            folder is found under the common application data folder.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PlugInConfigurationEditorDlg.#ctor(SandcastleBuilder.Utils.PlugIn.PlugInConfigurationDictionary)">
            <summary>
            Constructor
            </summary>
            <param name="configs">The current configurations</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PlugInConfigurationEditorDlg.btnClose_Click(System.Object,System.EventArgs)">
            <summary>
            Close this form
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PlugInConfigurationEditorDlg.lbAvailablePlugIns_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Update the plug-in details when the selected index changes
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PlugInConfigurationEditorDlg.lbProjectPlugIns_ItemCheck(System.Object,System.Windows.Forms.ItemCheckEventArgs)">
            <summary>
            Update the enabled state of the plug-in based on its checked state
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PlugInConfigurationEditorDlg.btnAddPlugIn_Click(System.Object,System.EventArgs)">
            <summary>
            Add the selected plug-in to the project with a default
            configuration.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PlugInConfigurationEditorDlg.btnConfigure_Click(System.Object,System.EventArgs)">
            <summary>
            Edit the selected plug-in's project configuration
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PlugInConfigurationEditorDlg.btnDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Delete the selected plug-in from the project
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PlugInConfigurationEditorDlg.btnHelp_Click(System.Object,System.EventArgs)">
            <summary>
            View help for this form
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="F:SandcastleBuilder.Utils.Design.PlugInConfigurationEditorDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PlugInConfigurationEditorDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PlugInConfigurationEditorDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Controls.DividerGroupBox">
            <summary>
            This is a simple derived group box control that draws the label text
            followed by a dividing line to the right of the text but no other
            surrounding border.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.DividerGroupBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.DividerGroupBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This is overridden to draw the text and the dividing line
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="T:SandcastleBuilder.Utils.DocumentType">
            <summary>
            This public enumerated type defines the conceptual document types
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.None">
            <summary>Unknown document type or empty container node</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.NotFound">
            <summary>File not found</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.Invalid">
            <summary>Invalid document (i.e. bad format, parsing errors)</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperConceptualDocument">
            <summary>Conceptual document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperErrorMessageDocument">
            <summary>Error Message document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperGlossaryDocument">
            <summary>Glossary document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperHowToDocument">
            <summary>How To document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperOrientationDocument">
            <summary>Orientation document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.CodeEntityDocument">
            <summary>Reference List document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperReferenceWithSyntaxDocument">
            <summary>Reference With Syntax document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperReferenceWithoutSyntaxDocument">
            <summary>Reference Without Syntax document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperSampleDocument">
            <summary>Sample Document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperSDKTechnologyOverviewArchitectureDocument">
            <summary>SDK Technology Overview Architechture document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperSDKTechnologyOverviewCodeDirectoryDocument">
            <summary>SDK Technology Overview Code Directory document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperSDKTechnologyOverviewOrientationDocument">
            <summary>SDK Technology Overview Orientation document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperSDKTechnologyOverviewScenariosDocument">
            <summary>SDK Technology Overview Scenarios document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperSDKTechnologyOverviewTechnologySummaryDocument">
            <summary>SDK Technology Overview Technology Summary document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperTroubleshootingDocument">
            <summary>Troubleshooting document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperUIReferenceDocument">
            <summary>User Interface Reference document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperWalkthroughDocument">
            <summary>Walkthrough document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperWhitePaperDocument">
            <summary>Whitepaper document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.DeveloperXmlReference">
            <summary>XML Reference document</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.DocumentType.Html">
            <summary>Raw HTML</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.BuildComponent.BuildComponentConfiguration">
            <summary>
            This collection class is used to hold the additional content items
            for a project.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildComponent.BuildComponentConfiguration.#ctor(System.Boolean,System.String,SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Internal constructor
            </summary>
            <param name="isEnabled">The enabled state</param>
            <param name="configuration">The configuration</param>
            <param name="project">The owning project</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentConfiguration.Enabled">
            <summary>
            This is used to get or set the build component's enabled state
            </summary>
            <value>If set to false, the component will not be used in the
            build.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentConfiguration.Configuration">
            <summary>
            This is used to get or set the component's configuration
            information.
            </summary>
            <value>This should be an XML fragment.  The root node should be
            named <b>configuration</b>.</value>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.ProjectSummaryEditorDlg">
            <summary>
            This form is used to edit the project summary comments.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.Design.ProjectSummaryEditorDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ProjectSummaryEditorDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ProjectSummaryEditorDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ProjectSummaryEditorDlg.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ProjectSummaryEditorDlg.txtSummary_Enter(System.Object,System.EventArgs)">
            <summary>
            Clear the selection to prevent accidental deletion of the text
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ProjectSummaryEditorDlg.Summary">
            <summary>
            Get or set the project summary comments
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.BuildComponent.SyntaxFilterInfo">
            <summary>
            This class contains information about the loaded language syntax filter
            build components.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildComponent.SyntaxFilterInfo.#ctor(System.Xml.XPath.XPathNavigator)">
            <summary>
            Constructor
            </summary>
            <param name="component">The XPath navigator containing the syntax
            filter component's configuration information</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.SyntaxFilterInfo.Id">
            <summary>
            This read-only property returns the ID of the syntax filter
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.SyntaxFilterInfo.SortOrder">
            <summary>
            This read-only property returns the sort order of the syntax filter
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.SyntaxFilterInfo.AlternateNames">
            <summary>
            This read-only property returns an optional list of alternate names
            that will map to this syntax filter.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.SyntaxFilterInfo.GeneratorXml">
            <summary>
            This read-only property returns the XML to use for the generator
            XML node in the build component configuration file.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.SyntaxFilterInfo.LanguageXml">
            <summary>
            This read-only property returns the XML to use for the language
            XML node in the build component configuration file.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Controls.RefreshableItemListBox">
            <summary>
            This is a a simple derived list box in which you can refresh a
            specified item to show updates to the text displayed in the list box
            for the item.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.RefreshableItemListBox.Refresh(System.Int32)">
            <summary>
            Refresh the specified item in the list box
            </summary>
            <param name="index">The index of the item to refresh</param>
        </member>
        <member name="T:SandcastleBuilder.Utils.ProjectReferenceItem">
            <summary>
            This represents a project reference item that can be used by
            <b>MRefBuilder</b> to locate assembly dependencies for the assemblies
            being documented.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ProjectReferenceItem.projectPath_PersistablePathChanging(System.Object,System.EventArgs)">
            <summary>
            This is used to handle changes in the <see cref="P:SandcastleBuilder.Utils.ProjectReferenceItem.ProjectPath"/>
            properties such that the hint path gets stored in the project file.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ProjectReferenceItem.GetProjectMetadata(System.Boolean)">
            <summary>
            This is used to get the build item meta data from the referenced
            project.
            </summary>
            <param name="refresh">True to force the metadata to be refreshed,
            false to only retrieve it if it doesn't exist.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ProjectReferenceItem.#ctor(SandcastleBuilder.Utils.ProjectElement)">
            <summary>
            Internal Constructor
            </summary>
            <param name="element">The project element</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.ProjectReferenceItem.ProjectPath">
            <summary>
            This is used to set or path to the project
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ProjectReferenceItem.HintPath">
            <summary>
            Hint path isn't applicable to project references
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ProjectReferenceItem.Reference">
            <summary>
            This is overridden to return the project name rather than the
            file path.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ProjectReferenceItem.Project">
            <summary>
            This is used to get the project reference's GUID
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ProjectReferenceItem.Name">
            <summary>
            This is used to get the project name
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.MSBuild.Build2xHelpFile">
            <summary>
            This task is used to run HXCOMP.EXE which is used to compile a Help 2
            (HxS) help file.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.Build2xHelpFile.ValidateParameters">
            <summary>
            Validate the parameters
            </summary>
            <returns>True if the parameters are valid, false if not</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.Build2xHelpFile.GenerateFullPathToTool">
            <summary>
            This returns the full path to the tool
            </summary>
            <returns>The full path to the tool</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.Build2xHelpFile.GenerateCommandLineCommands">
            <summary>
            Generate the command line parameters
            </summary>
            <returns>The command line parameters</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.Build2xHelpFile.Execute">
            <summary>
            This is overridden to set the working folder before executing
            the task and to dump the compiler log file after the build.
            </summary>
            <returns>True if successful or false on failure</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.Build2xHelpFile.HandleTaskExecutionErrors">
            <summary>
            This is overridden to invert the result of the HXCOMP exit code
            </summary>
            <returns>True on success, false on failure.  HXCOMP returns 0
            on success, 1 if warnings were issued (which is okay), and another
            non-zero value for failures.  We ignore the warning return code and
            treat it as successful.</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.Build2xHelpFile.ToolName">
            <summary>
            This read-only property returns the tool name (HXCOMP.EXE)
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.Build2xHelpFile.StandardErrorLoggingImportance">
            <summary>
            This is overridden to force all standard error info to be logged
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.Build2xHelpFile.StandardOutputLoggingImportance">
            <summary>
            This is overridden to force all standard output info to be logged
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.Build2xHelpFile.WorkingFolder">
            <summary>
            This is used to pass in the working folder where the files are
            located.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.Build2xHelpFile.HelpCompilerFolder">
            <summary>
            This is used to pass in the path to the help compiler
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.Build2xHelpFile.HtmlHelpName">
            <summary>
            This is used to pass in the name of the help file (no path or
            extension).
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.MSHelpKeywordCollectionTypeConverter">
            <summary>
            This is used to give a more descriptive message in the property
            grid for the <see cref="T:SandcastleBuilder.Utils.MSHelpKeywordCollection"/>.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpKeywordCollectionTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpKeywordCollectionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.ContentFileEditorCollection">
            <summary>
            This collection class is used to hold the additional content file
            editor definitions.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ContentFileEditorCollection.#ctor">
            <summary>
            Constructor
            </summary>
            <overloads>There are two overloads for the constructor</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ContentFileEditorCollection.#ctor(SandcastleBuilder.Utils.Design.ContentFileEditorCollection)">
            <summary>
            Clone the items in another collection to create this one.
            </summary>
            <param name="editors">The collection to clone</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ContentFileEditorCollection.AddRange(SandcastleBuilder.Utils.Design.ContentFileEditorCollection)">
            <summary>
            Add a range of items from another collection
            </summary>
            <param name="range">The range of items to add</param>
            <remarks>The entries are not cloned.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ContentFileEditorCollection.Sort">
            <summary>
            Sort the collection by editor description
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ContentFileEditorCollection.LaunchEditorFor(System.String,System.String)">
            <summary>
            Search the list of content file editors and launch the appropriate
            one for the specified file.
            </summary>
            <param name="filename">The filename to edit</param>
            <param name="projectFile">The fully qualified name of the current
            project file.</param>
            <returns>True if successful, false if not.  <see cref="P:SandcastleBuilder.Utils.Design.ContentFileEditorCollection.LastError"/>
            can be used to obtain details if it does fail.</returns>
            <remarks>If an editor is not defined, an attempt is made to launch
            the file using the OS shell with the Edit verb.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ContentFileEditorCollection.GlobalEditors">
            <summary>
            This returns the reference to the global content file editor
            collection.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ContentFileEditorCollection.LastError">
            <summary>
            If <see cref="M:SandcastleBuilder.Utils.Design.ContentFileEditorCollection.LaunchEditorFor(System.String,System.String)"/> returns false, this can be used to
            retrieve the exception describing why it failed.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Conversion.ConvertConceptualContent">
            <summary>
            This class is used to convert conceptual content settings in version
            1.7.0.0 and prior SHFB project files to the new MSBuild format.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertConceptualContent.#ctor(SandcastleBuilder.Utils.Conversion.ConvertFromShfbFile)">
            <summary>
            Constructor
            </summary>
            <param name="projectConverter">The project converter object</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertConceptualContent.ConvertContent">
            <summary>
            This is used to convert the conceptual content from the old project
            into the format required by the new project.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertConceptualContent.CreateTokenFile">
            <summary>
            This converts the token entries to a token file and adds it to
            the project.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertConceptualContent.AddImageFiles">
            <summary>
            This adds all image files to the project
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertConceptualContent.CreateContentFile">
            <summary>
            This converts the topic entries to a content file and adds it to
            the project.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertConceptualContent.ConvertTopic(System.Xml.XmlReader,System.Xml.XmlWriter,SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Convert a conceptual content topic and all of its children
            </summary>
            <param name="xr">The XML reader containing the topics</param>
            <param name="xw">The XML writer to which they are written</param>
            <param name="project">The project to which the files are added</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertConceptualContent.ConvertTopic(System.String,System.String,System.String,System.Int32)">
            <summary>
            Convert a conceptual topic to the new format
            </summary>
            <param name="source">The source file</param>
            <param name="dest">The destination file</param>
            <param name="id">The topic ID</param>
            <param name="revision">The revision number</param>
        </member>
        <member name="T:SandcastleBuilder.Utils.ConceptualContent.ITableOfContents">
            <summary>
            This interface is used to interact with project files that can generate
            table of contents entries.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ITableOfContents.GenerateTableOfContents(SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection,SandcastleBuilder.Utils.IBasePathProvider)">
            <summary>
            Generate the table of contents for the conceptual topics
            </summary>
            <param name="toc">The table of contents collection</param>
            <param name="pathProvider">The base path provider</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ITableOfContents.ContentLayoutFile">
            <summary>
            Get the content layout <see cref="T:SandcastleBuilder.Utils.FileItem"/>
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.XPath.ResolveNameFunction">
             <summary>
             This class is a custom XPath function used to convert an API name into
             its more readable form used for searching.
             </summary>
             <remarks>The function should be passed an XML node containing the
             necessary information used to obtain the name and convert it into the
             searchable format along with a boolean indicating whether or not the
             name should be fully qualified with the namespace and type.</remarks>
             <example>
             <example>
             Some examples of XPath queries using the function:
             <code lang="none">
             //apis/api[matches-regex(resolve-name(node(), boolean(false),
             'utils.*proj', boolean(true))
            
             //apis/api[matches-regex(resolve-name(node(), boolean(true)),
             'Proj|Filt|Excep', boolean(false))
             </code>
             </example>
             </example>
        </member>
        <member name="M:SandcastleBuilder.Utils.XPath.ResolveNameFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
            <summary>
            This is called to invoke the <b>resolve-name</b> method.
            </summary>
            <param name="xsltContext">The XSLT context for the function call</param>
            <param name="args">The arguments for the function call</param>
            <param name="docContext">The context node for the function call</param>
            <returns>An object representing the return value of the function
            (the name string).</returns>
            <exception cref="T:System.ArgumentException">This is thrown if the
            number of arguments for the function is not two.</exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.XPath.ResolveNameFunction.ReplaceTypeTemplateMarker(System.Xml.XmlNode,System.String)">
            <summary>
            This is used to replace the template marker in a type name
            </summary>
            <param name="apiNode">The API node to use</param>
            <param name="nodeText">The node text to modify</param>
            <returns>The updated node text</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.XPath.ResolveNameFunction.ArgTypes">
            <summary>
            Gets the supplied XPath types for the function's argument list.
            This information can be used to discover the signature of the
            function which allows you to differentiate between overloaded
            functions.
            </summary>
            <value>Always returns an array with a <b>Navigator</b> type
            and a Boolean type entry.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.XPath.ResolveNameFunction.Minargs">
            <summary>
            Gets the minimum number of arguments for the function. This enables
            the user to differentiate between overloaded functions.
            </summary>
            <value>Always returns two</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.XPath.ResolveNameFunction.Maxargs">
            <summary>
            Gets the maximum number of arguments for the function. This enables
            the user to differentiate between overloaded functions.
            </summary>
            <value>Always returns two</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.XPath.ResolveNameFunction.ReturnType">
            <summary>
            Gets the XPath type returned by the function
            </summary>
            <value>Always returns String</value>
        </member>
        <member name="T:SandcastleBuilder.Utils.BuildEngine.XmlCommentsFile">
            <summary>
            This represents an XML comment file and is used when searching for and
            adding missing documentation tag information.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.XmlCommentsFile.comments_NodeChanged(System.Object,System.Xml.XmlNodeChangedEventArgs)">
            <summary>
            Mark the file as modified if a node is changed
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.XmlCommentsFile.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="filename">The XML comments filename</param>
            <exception cref="T:System.ArgumentNullException">This is thrown if the
            filename is null or an empty string.</exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.XmlCommentsFile.Save">
            <summary>
            Save the comments file if it was modified
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.XmlCommentsFile.FixupComments">
            <summary>
            This is called to fixup the comments for C++ compiler generated
            XML comments files.
            </summary>
            <remarks>The C++ compiler generates method signatures that differ
            from the other .NET compilers for methods that take generics as
            parameters.  These methods fail to get documented as they do not
            match the output of <b>MRefBuilder</b>.  The C# and VB.NET
            compilers generate names that do match it and this option is not
            needed for comments files generated by them.  The C++ compiler
            also has problems resolving references to some members if it
            hasn't seen them yet.  These are prefixed with "!:" which is
            removed by the fix-up code.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.XmlCommentsFile.SourcePath">
            <summary>
            This read-only property is used to get the source path of the file
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.XmlCommentsFile.Comments">
            <summary>
            This is used to load the comments file on first use
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildEngine.XmlCommentsFile.Members">
            <summary>
            This read-only property is used to get the root members node
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.PlugIn.ExecutionPointCollection">
            <summary>
            This collection class holds execution point information for a plug-in
            process.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.ExecutionPointCollection.AddRange(System.Collections.Generic.IEnumerable{SandcastleBuilder.Utils.PlugIn.ExecutionPoint})">
            <summary>
            Add a range of items to the collection
            </summary>
            <param name="range">An enumerable range of items to add</param>
            <returns>The collection to which the items were added</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.ExecutionPointCollection.RunsAt(SandcastleBuilder.Utils.BuildEngine.BuildStep,SandcastleBuilder.Utils.PlugIn.ExecutionBehaviors)">
            <summary>
            This is used to determine if the collection contains an entry for
            the specified build step and behavior.
            </summary>
            <param name="step">The build step</param>
            <param name="behavior">The behavior</param>
            <returns>True if the collection contains an entry for the specified
            build step and behavior or false if it does not.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.ExecutionPointCollection.PriorityFor(SandcastleBuilder.Utils.BuildEngine.BuildStep,SandcastleBuilder.Utils.PlugIn.ExecutionBehaviors)">
            <summary>
            This is used to obtain the execution priority for a plug-in
            in the given build step and behavior.
            </summary>
            <param name="step">The build step</param>
            <param name="behavior">The behavior</param>
            <returns>The execution priority is used to determine the order in
            which the plug-ins will be executed.  Those with a higher priority
            value will be executed before those with a lower value.  Those with
            an identical priority may be executed in any order within their
            group.</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.PlugIn.ExecutionPoint">
            <summary>
            This class defines when a plug-in gets executed during the build
            process.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.ExecutionPoint.#ctor(SandcastleBuilder.Utils.BuildEngine.BuildStep,SandcastleBuilder.Utils.PlugIn.ExecutionBehaviors)">
            <summary>
            Constructor
            </summary>
            <param name="plugInBuildStep">The step in which the plug-in
            should run.</param>
            <param name="plugInBehavior">The behavior of the plug-in when it
            is ran.</param>
            <exception cref="T:System.ArgumentException">This is thrown if an attempt
            is made to set the Before or After behavior with the InsteadOf
            behavior.  It is also thrown for invalid combinations of build
            step and behavior, i.e. Initializing with Before or InsteadOf.
            See the help file for a full list.</exception>
            <overloads>There are two overloads for the constructor.</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.ExecutionPoint.#ctor(SandcastleBuilder.Utils.BuildEngine.BuildStep,SandcastleBuilder.Utils.PlugIn.ExecutionBehaviors,System.Int32)">
            <summary>
            This constructor is used to set a specific execution priority.
            </summary>
            <param name="plugInBuildStep">The step in which the plug-in
            should run.</param>
            <param name="plugInBehavior">The behavior of the plug-in when it
            is ran.</param>
            <param name="plugInPriority">The execution priority for the
            plug-in.</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.ExecutionPoint.BuildStep">
            <summary>
            This read-only property returns the build step in which the
            plug-in will run.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.ExecutionPoint.Behavior">
            <summary>
            This read-only property returns the execution behavior of the
            plug-in.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.ExecutionPoint.Priority">
            <summary>
            This read-only property returns the execution priority of the
            plug-in.
            </summary>
            <value>Plug-ins with a higher priority value will execute before
            those with a lower priority value.  If not specified, the default
            is 1,000.</value>
        </member>
        <member name="T:SandcastleBuilder.Utils.MSHelpKeyword">
            <summary>
            This represents an MS Help 2 index keyword that can be added to the XML
            data island in each help topic generated by BuildAssembler.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpKeyword.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>The index name defaults to "K"</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpKeyword.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="indexName">The index name</param>
            <param name="keywordTerm">The index term</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpKeyword.CompareTo(SandcastleBuilder.Utils.MSHelpKeyword)">
            <summary>
            Compares this instance to another instance and returns an
            indication of their relative values.
            </summary>
            <param name="other">A MSHelpKeyword object to compare</param>
            <returns>Returns -1 if this instance is less than the
            value, 0 if they are equal, or 1 if this instance is
            greater than the value or the value is null.</returns>
            <remarks>Entries are sorted by name and then value</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpKeyword.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpKeyword.GetHashCode">
            <summary>
            Get a hash code for this item
            </summary>
            <returns>Returns the hash code for the index name and term.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSHelpKeyword.ToString">
            <summary>
            Return a string representation of the item
            </summary>
            <returns>Returns the item in its XML format</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSHelpKeyword.Index">
            <summary>
            This is used to get or set the index name
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSHelpKeyword.Term">
            <summary>
            This is used to get or set the index term
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.MSBuild.CleanHelp">
            <summary>
            This task is used to clean (remove) help file output from the last
            build.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.CleanHelp.Execute">
            <summary>
            This is used to execute the task and clean the output folder
            </summary>
            <returns>True on success or false on failure.</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.CleanHelp.ProjectFile">
            <summary>
            This is used to pass in the project filename
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.CleanHelp.OutputPath">
            <summary>
            This is used to pass in the output path that needs to be cleaned
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.CleanHelp.WorkingPath">
            <summary>
            This is used to pass in the optional working path that needs to be
            cleaned.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.CleanHelp.LogFileLocation">
            <summary>
            This is used to pass in the optional log filename that needs
            to be cleaned.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.FolderPath">
            <summary>
            This class is used to represent a folder path.  Support is included for
            treating the path as fixed or relative and for expanding environment
            variables in the path name.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.FilePath">
            <summary>
            This class is used to represent a file path.  Support is included for
            treating the path as fixed or relative and for expanding environment
            variables in the path name.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.FilePath.OnPersistablePathChanging(System.EventArgs)">
            <summary>
            This raises the <see cref="E:SandcastleBuilder.Utils.FilePath.PersistablePathChanging"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.FilePath.OnPersistablePathChanged(System.EventArgs)">
            <summary>
            This raises the <see cref="E:SandcastleBuilder.Utils.FilePath.PersistablePathChanged"/> event
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.FilePath.op_Implicit(SandcastleBuilder.Utils.FilePath)~System.String">
             <summary>
             This is used to handle an implicit conversion from a
             <see cref="T:SandcastleBuilder.Utils.FilePath"/> object to a string.
             </summary>
             <param name="filePath">The <see cref="T:SandcastleBuilder.Utils.FilePath"/> to convert.</param>
             <returns>The file path as a relative or absolute path string
             based on its current settings.</returns>
             <example>
             <code lang="cs">
             FilePath filePath = new FilePath(@"%APPDATA%\TestApp\App.config");
             
             // The FilePath object is automatically converted to a string
             // representing the expanded, fully qualified path.
             string pathString = filePath;
             </code>
             <code lang="vbnet">
             Dim filePath As New FilePath("%APPDATA%\TestApp\App.config")
            
             ' The FilePath object is automatically converted to a string
             ' representing the expanded, fully qualified path.
             Dim pathString As String = filePath
             </code>
             </example>
        </member>
        <member name="M:SandcastleBuilder.Utils.FilePath.op_Equality(SandcastleBuilder.Utils.FilePath,SandcastleBuilder.Utils.FilePath)">
            <summary>
            Overload for equal operator.
            </summary>
            <param name="firstPath">The first object to compare</param>
            <param name="secondPath">The second object to compare</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.FilePath.op_Inequality(SandcastleBuilder.Utils.FilePath,SandcastleBuilder.Utils.FilePath)">
            <summary>
            Overload for not equal operator.
            </summary>
            <param name="firstPath">The first object to compare</param>
            <param name="secondPath">The second object to compare</param>
            <returns>True if not equal, false if they are.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.FilePath.GetFullPath(System.String)">
            <summary>
            This returns the fully qualified path for the specified path.
            This version allows wildcards in the filename part if present.
            </summary>
            <param name="path">The path to expand</param>
            <returns>The fully qualified path name</returns>
            <remarks>The <b>System.IO.Path</b> version of
            <see cref="M:System.IO.Path.GetFullPath(System.String)"/> will throw an exception
            if the path contains wildcard characters.  This version does not.
            </remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.FilePath.AbsoluteToRelativePath(System.String,System.String)">
            <summary>
            This helper method can be used to convert an absolute path to one
            that is relative to the given base path.
            </summary>
            <param name="basePath">The base path</param>
            <param name="absolutePath">An absolute path</param>
            <returns>A path to the given absolute path that is relative to the
            given base path.</returns>
            <remarks>If the base path is null or empty, the current working
            folder is used.</remarks>
            <example>
            <code lang="cs">
            string basePath = @"E:\DotNet\CS\TestProject\Source";
            string absolutePath = @"E:\DotNet\CS\TestProject\Doc\Help.html";
            
            string relativePath = FilePath.AbsoluteToRelativePath(basePath,
                absolutePath);
            
            Console.WriteLine(relativePath);
            
            // Results in: ..\Doc\Help.html
            </code>
            <code lang="vbnet">
            Dim basePath As String = "E:\DotNet\CS\TestProject\Source"
            Dim absolutePath As String = "E:\DotNet\CS\TestProject\Doc\Help.html"
            
            Dim relativePath As String = _
                FilePath.AbsoluteToRelativePath(basePath, absolutePath);
            
            Console.WriteLine(relativePath)
            
            ' Results in: ..\Doc\Help.html
            </code>
            </example>
        </member>
        <member name="M:SandcastleBuilder.Utils.FilePath.RelativeToAbsolutePath(System.String,System.String)">
            <summary>
            This helper method can be used to convert a relative path to an
            absolute path based on the given base path.
            </summary>
            <param name="basePath">The base path</param>
            <param name="relativePath">A relative path</param>
            <returns>An absolute path</returns>
            <remarks>If the base path is null or empty, the current working
            folder is used.</remarks>
            <example>
            <code lang="cs">
            string basePath = @"E:\DotNet\CS\TestProject\Source";
            string relativePath = @"..\Doc\Help.html";
            
            string absolutePath = FilePath.RelativeToAbsolutePath(basePath,
                relativePath);
            
            Console.WriteLine(absolutePath);
            
            // Results in: E:\DotNet\CS\TestProject\Doc\Help.html
            </code>
            <code lang="vbnet">
            Dim basePath As String = "E:\DotNet\CS\TestProject\Source"
            Dim relativePath As String = "..\Doc\Help.html"
            
            Dim absolutePath As String = _
                FilePath.RelativeToAbsolutePath(basePath, relativePath);
            
            Console.WriteLine(absolutePath)
            
            ' Results in: E:\DotNet\CS\TestProject\Doc\Help.html
            </code>
            </example>
        </member>
        <member name="M:SandcastleBuilder.Utils.FilePath.ShouldSerializePath">
            <summary>
            This is used to prevent the Path property from showing as modified
            in the designer.
            </summary>
            <returns>Always returns false</returns>
            <remarks>The <see cref="P:SandcastleBuilder.Utils.FilePath.Path"/> property is mainly for display
            purposes in the designer but can be used for making changes to
            the expanded path if needed.  The <see cref="P:SandcastleBuilder.Utils.FilePath.PersistablePath"/>
            property is used as the display value in the designer.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.FilePath.#ctor(SandcastleBuilder.Utils.IBasePathProvider)">
            <summary>
            Default constructor.  The file path is undefined.
            </summary>
            <param name="provider">The base base provider</param>
            <overloads>There are three overloads for the constructor.</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.FilePath.#ctor(System.String,SandcastleBuilder.Utils.IBasePathProvider)">
            <summary>
            Constructor.  Assign the specified path.
            </summary>
            <param name="path">A relative or absolute path.</param>
            <param name="provider">The base base provider</param>
            <remarks>Unless <see cref="P:SandcastleBuilder.Utils.FilePath.IsFixedPath"/> is set to true,
            the path is always treated as a relative path.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.FilePath.#ctor(System.String,System.Boolean,SandcastleBuilder.Utils.IBasePathProvider)">
            <summary>
            Constructor.  Assign the specified path and fixed setting.
            </summary>
            <param name="path">A relative or absolute path.</param>
            <param name="isFixed">True to treat the path as fixed, false
            to treat it as a relative path.</param>
            <param name="provider">The base base provider</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.FilePath.ToString">
            <summary>
            Convert the file path to a string
            </summary>
            <returns>A fixed or relative path based on the current settings</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.FilePath.GetHashCode">
            <summary>
            Get a hash code for the file path object
            </summary>
            <returns>Returns the hash code of the <see cref="M:SandcastleBuilder.Utils.FilePath.ToString"/>
            value converted to lowercase.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.FilePath.Equals(System.Object)">
            <summary>
            This is overridden to allow proper comparison of file path objects.
            </summary>
            <param name="obj">The object to which this instance is
            compared.</param>
            <returns>Returns true if the object equals this instance, false
            if it does not.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.FilePath.Clone">
            <summary>
            This returns a clone of the object
            </summary>
            <returns>A clone of the object</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.FilePath.BasePathProvider">
            <summary>
            This is used to get the base path provider for the object.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.FilePath.BasePath">
            <summary>
            This returns the base path for the object
            </summary>
            <value>If no <see cref="T:SandcastleBuilder.Utils.IBasePathProvider"/> has been specified,
            this returns the current directory.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.FilePath.Path">
             <summary>
             This is used to get or set the path to use.
             </summary>
             <value>When set, if the path is not rooted (a relative path),
             <see cref="P:SandcastleBuilder.Utils.FilePath.IsFixedPath"/> is set to false.  If rooted (an absolute
             path), it is not changed.  This property always returns a fully
             qualified path but without any environment variable expansions.
             <p/>If set to a null or empty string, the file path is cleared and
             is considered to be undefined.</value>
             <note type="note">MSBuild environment variable references are
             also supported (i.e. $(DXROOT), $(OutputPath), etc.).  However,
             they will only be resolved if the <see cref="P:SandcastleBuilder.Utils.FilePath.BasePathProvider"/>
             resolves them.</note>
             <example>
             <code lang="cs">
             FilePath path = new FilePath();
            
             // Set it to a relative path
             path.Path = @"..\..\Test.txt";
            
             // Set it to an absolute path
             path.Path = @"C:\My Documents\Info.doc";
            
             // Set it to a path based on an environment variable
             path.Path = @"%HOMEDRIVE%%HOMEPATH%\Favorites\*.*";
             </code>
             <code lang="vbnet">
             Dim path As New FilePath()
            
             ' Set it to a relative path
             path.Path = "..\..\Test.txt"
            
             ' Set it to an absolute path
             path.Path = "C:\My Documents\Info.doc"
            
             ' Set it to a path based on an environment variable
             path.Path = "%HOMEDRIVE%%HOMEPATH%\Favorites\*.*"
             </code>
             </example>
        </member>
        <member name="P:SandcastleBuilder.Utils.FilePath.PersistablePath">
            <summary>
            This is used to retrieve the file path in a format suitable for
            persisting to storage based on the current settings.
            </summary>
            <remarks>If <see cref="P:SandcastleBuilder.Utils.FilePath.IsFixedPath"/> is true, an absolute path
            is always returned.  If false, the path is returned in a form that
            is relative to the path stored in the <see cref="P:SandcastleBuilder.Utils.FilePath.BasePath"/>
            property.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.FilePath.Exists">
            <summary>
            This read-only property can be used to determine whether or not
            the file path exists.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.FilePath.ExpandedPath">
            <summary>
            This read-only property is used to display the fully qualified
            path with environment variable expansions in the designer.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.FilePath.IsFixedPath">
            <summary>
            This is used to indicate whether or not the path will be treated
            as a relative or fixed path when converted retrieved via the
            <see cref="P:SandcastleBuilder.Utils.FilePath.PersistablePath"/> property.
            </summary>
            <value>If true, the path is returned as a fixed path when
            retrieved.  If false, it is returned as a path relative to the
            current value of the <see cref="P:SandcastleBuilder.Utils.FilePath.BasePath"/> property.</value>
        </member>
        <member name="E:SandcastleBuilder.Utils.FilePath.PersistablePathChanging">
            <summary>
            This event is raised when the persistable path is about to be
            changed.
            </summary>
        </member>
        <member name="E:SandcastleBuilder.Utils.FilePath.PersistablePathChanged">
            <summary>
            This event is raised when the persistable path changes
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.FolderPath.IsPathTerminated(System.String)">
            <summary>
            This can be used to find out if a path is terminated with a
            trailing backslash.
            </summary>
            <param name="path">The path to check</param>
            <returns>Returns true if it is, false if it is not.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.FolderPath.TerminatePath(System.String)">
            <summary>
            This can be used to ensure that a path is terminated with a
            trailing backslash.
            </summary>
            <param name="path">The path to check</param>
            <returns>The path with a trailing backslash added if necessary.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.FolderPath.ShouldSerializePath">
            <summary>
            This is used to prevent the Path property from showing as modified
            in the designer.
            </summary>
            <returns>Always returns false</returns>
            <remarks>The <see cref="P:SandcastleBuilder.Utils.FolderPath.Path"/> property is mainly for display
            purposes in the designer but can be used for making changes to
            the expanded path if needed.  The <see cref="P:SandcastleBuilder.Utils.FilePath.PersistablePath"/>
            property is used as the display value in the designer.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.FolderPath.#ctor(SandcastleBuilder.Utils.IBasePathProvider)">
            <summary>
            Default constructor.  The folder path is undefined.
            </summary>
            <param name="provider">The base path provider</param>
            <overloads>There are three overloads for the constructor.</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.FolderPath.#ctor(System.String,SandcastleBuilder.Utils.IBasePathProvider)">
            <summary>
            Constructor.  Assign the specified path.
            </summary>
            <param name="path">A relative or absolute path.</param>
            <param name="provider">The base path provider</param>
            <remarks>Unless <see cref="P:SandcastleBuilder.Utils.FilePath.IsFixedPath"/> is set to true,
            the path is always treated as a relative path.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.FolderPath.#ctor(System.String,System.Boolean,SandcastleBuilder.Utils.IBasePathProvider)">
            <summary>
            Constructor.  Assign the specified path and fixed setting.
            </summary>
            <param name="path">A relative or absolute path.</param>
            <param name="isFixed">True to treat the path as fixed, false
            to treat it as a relative path.</param>
            <param name="provider">The base path provider</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.FolderPath.Path">
             <summary>
             This is used to get or set the path.
             </summary>
             <value>When set, if the path is not rooted (a relative path),
             <see cref="P:SandcastleBuilder.Utils.FilePath.IsFixedPath"/> is set to false.  If rooted (an
             absolute path), it is not changed.  This property always returns a
             fully qualified path but without any environment variable
             expansions and terminated with a trailing backslash if needed.
             <p/>If set to a null or empty string, the folder path is cleared
             and is considered to be undefined.</value>
             <example>
             <code lang="cs">
             FolderPath path = new FolderPath();
             
             // Set it to a relative path
             path.Path = @"..\..\ProjectFolder";
             
             // Set it to an absolute path
             path.Path = @"C:\My Documents\ProjectDocs\";
             
             // Set it to a path based on an environment variable
             path.Path = @"%HOMEDRIVE%%HOMEPATH%\Favorites\";
             </code>
             <code lang="vbnet">
             Dim path As New FolderPath()
            
             ' Set it to a relative path
             path.Path = "..\..\ProjectFolder"
             
             ' Set it to an absolute path
             path.Path = "C:\My Documents\ProjectDocs\"
             
             ' Set it to a path based on an environment variable
             path.Path = "%HOMEDRIVE%%HOMEPATH%\Favorites\"
             </code>
             </example>
        </member>
        <member name="P:SandcastleBuilder.Utils.FolderPath.Exists">
            <summary>
            This read-only property can be used to determine whether or not
            the folder path exists.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.PresentationStyleTypeConverter">
            <summary>
            This type converter allows you to select a presentation style folder
            from those currently installed in the <b>.\Presentation</b> folder
            found in the main installation folder of Sandcastle.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PresentationStyleTypeConverter.InitializeStandardValues">
            <summary>
            This is used to get the standard values by searching for the
            .NET Framework versions installed on the current system.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PresentationStyleTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to return the values for the type converter's
            dropdown list.
            </summary>
            <param name="context">The format context object</param>
            <returns>Returns the standard values for the type</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PresentationStyleTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to indicate that the values are exclusive
            and values outside the list cannot be entered.
            </summary>
            <param name="context">The format context object</param>
            <returns>Always returns true</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PresentationStyleTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to indicate that standard values are supported
            and can be chosen from a list.
            </summary>
            <param name="context">The format context object</param>
            <returns>Always returns true</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PresentationStyleTypeConverter.IsPresent(System.String)">
            <summary>
            This is used to find out if the specified style is present on the
            system.
            </summary>
            <param name="style">The style for which to look</param>
            <returns>True if present, false if not found</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PresentationStyleTypeConverter.FirstMatching(System.String)">
            <summary>
            This is used to get the first style that matches case-insensitively
            or, failing that, starts with or contains the given value
            case-insensitively.
            </summary>
            <param name="style">The style for which to look</param>
            <returns>The best match or the first style if not found.</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.PresentationStyleTypeConverter.DefaultStyle">
            <summary>
            This returns the default style
            </summary>
            <value>Returns <b>vs2005</b> if present.  If not, it returns the
            first best match or, failing that, the first style in the list.</value>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.ComponentConfigurationDictionaryTypeConverter">
            <summary>
            This is used to give a more descriptive message in the property
            grid for the <see cref="T:SandcastleBuilder.Utils.BuildComponent.ComponentConfigurationDictionary"/>.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ComponentConfigurationDictionaryTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ComponentConfigurationDictionaryTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.ApiFilterCollectionTypeConverter">
            <summary>
            This is used to give a more descriptive message in the property
            grid for the <see cref="T:SandcastleBuilder.Utils.ApiFilterCollection"/>.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterCollectionTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ApiFilterCollectionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:SandcastleBuilder.Utils.ConceptualContent.TopicCollection">
            <summary>
            This collection class is used to hold the conceptual content topics
            for a project.
            </summary>
            <remarks>This class is serializable so that it can be copied to the
            clipboard.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.#ctor(SandcastleBuilder.Utils.FileItem)">
            <summary>
            Constructor
            </summary>
            <param name="file">The content layout file associated with the
            collection.</param>
            <remarks>Topics are not loaded until the <see cref="M:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.Load"/> method
            is called.  If the <b>file</b> parameter is null, this is assumed
            to be a child topic collection.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.Sort">
            <summary>
            This is used to sort the collection
            </summary>
            <remarks>Values are sorted by display title.  Comparisons are
            case-sensitive.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.Load">
            <summary>
            Load the collection from the related file
            </summary>
            <remarks>This will be done automatically at constructor.  This can
            be called to reload the collection if needed.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.MatchProjectFilesToTopics">
            <summary>
            This gets all possible content files from the project and attempts
            to match them to the topics in the collection by ID.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.Save">
            <summary>
            Save the topic collection to the related content layout file
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.ChildListChanged(SandcastleBuilder.Utils.ConceptualContent.Topic)">
            <summary>
            This is used by contained items to notify the parent that a child
            list changed and thus the collection should be marked as dirty.
            </summary>
            <param name="changedItem">The item that changed</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.SetTopic(SandcastleBuilder.Utils.ConceptualContent.TopicFile)">
            <summary>
            Set the topic file in any entry that has a matching ID
            </summary>
            <param name="topicFile">The topic file</param>
            <remarks>The IDs should be unique across all entries but, if a
            duplicate exists, this will help find it as we'll get a more
            descriptive error later in the build.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.GenerateConceptualTopics(System.String,SandcastleBuilder.Utils.BuildEngine.BuildProcess)">
            <summary>
            This creates copies of the conceptual topic files in the build
            process's working folder.
            </summary>
            <param name="folder">The folder in which to place the topic files</param>
            <param name="builder">The build process</param>
            <remarks>Each topic file will be named using its
            <see cref="P:SandcastleBuilder.Utils.ConceptualContent.Topic.Id"/>.  If necessary, its content will be
            wrapped in a <c>&lt;topic&gt;</c> element.  Sub-topics are written
            out recursively.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.AddTopicsFromFolder(System.String,System.String,SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Add all topics from the specified folder recursively to the
            collection and to the given project file.
            </summary>
            <param name="folder">The folder from which to get the files</param>
            <param name="basePath">The base path to remove from files copied
            from another folder into the project folder.  On the first call,
            this should match the <paramref name="folder"/> value.</param>
            <param name="project">The project to which the files are added</param>
            <remarks>Only actual conceptual content topic files are added.
            They must have a ".aml" extension and must be one of the valid
            <see cref="T:SandcastleBuilder.Utils.DocumentType">document types</see>.  Folders will be
            added as sub-topics recursively.  If a file with the same name
            as the folder exists, it will be associated with the container
            node.  If no such file exists, an empty container node is created.
            </remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.InsertItem(System.Int32,SandcastleBuilder.Utils.ConceptualContent.Topic)">
            <summary>
            This is overridden to set the inserted item's parent to this
            collection.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.SetItem(System.Int32,SandcastleBuilder.Utils.ConceptualContent.Topic)">
            <summary>
            This is overridden to set the inserted item's parent to this
            collection.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.RemoveItem(System.Int32)">
            <summary>
            This is overridden to clear the parent on the removed item
            </summary>
            <param name="index">The index of the item to remove</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.GenerateTableOfContents(SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection,SandcastleBuilder.Utils.IBasePathProvider)">
            <summary>
            Generate the table of contents for the conceptual topics
            </summary>
            <param name="toc">The table of contents collection</param>
            <param name="pathProvider">The base path provider</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.FileItem">
            <summary>
            This read-only property returns the project file item associated
            with the collection.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.DefaultTopic">
            <summary>
            This is used to get the default topic
            </summary>
            <value>It returns the default topic or null if one is not set</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.ApiContentInsertionPoint">
            <summary>
            This is used to get the topic at which the API table of contents is
            to be inserted or parented.
            </summary>
            <value>This will return null if no parent location has been set</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.MSHVRootContentContainer">
            <summary>
            This is used to get the topic that will serve as the root content
            container in MS Help Viewer output.
            </summary>
            <value>This will return null if one is not defined</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.Item(System.String)">
            <summary>
            This can be used to get a topic by its unique ID (case-insensitive)
            </summary>
            <param name="id">The ID of the item to get.</param>
            <value>Returns the topic with the specified
            <see cref="P:SandcastleBuilder.Utils.ConceptualContent.Topic.Id"/> or null if not found.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TopicCollection.ContentLayoutFile">
            <summary>
            This is used to get the build item related to the content layout
            file containing the collection items.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.ConceptualContent.TopicFile">
            <summary>
            This class represents a conceptual content topic file
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TopicFile.#ctor(SandcastleBuilder.Utils.FileItem)">
            <summary>
            Constructor
            </summary>
            <param name="file">The file build item from the project</param>
            <exception cref="T:System.ArgumentNullException">This is thrown if the file
            item is null.</exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TopicFile.ParseContent(System.Boolean)">
            <summary>
            This will parse the file content and extract the document type,
            unique ID, and revision number.
            </summary>
            <param name="reparse">If false and the file has already been
            parsed, the method just returns.  If true, the file is reparsed
            to refresh the information.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TopicFile.ParseIdFromHtml">
            <summary>
            This is used to parse the ID and revision number from an HTML file
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TopicFile.FileItem">
            <summary>
            This is used to get or set the file build item
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TopicFile.Name">
            <summary>
            Get the name of the file without the path
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TopicFile.FullPath">
            <summary>
            Get the full path to the file
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TopicFile.Id">
            <summary>
            This is used to get the unique ID of the topic
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TopicFile.RevisionNumber">
            <summary>
            This is used to get the topic's revision number
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TopicFile.DocumentType">
            <summary>
            This read-only property is used to get the document type
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TopicFile.ErrorMessage">
            <summary>
            This read-only property is used to return the error message if
            <see cref="P:SandcastleBuilder.Utils.ConceptualContent.TopicFile.DocumentType"/> returns <b>Invalid</b>.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditor">
            <summary>
            This is a type editor that displays the
            <see cref="T:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg"/> to edit the namespace
            summaries for a project.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This is overridden to edit the value using the
            <see cref="T:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditorDlg"/> dialog.
            </summary>
            <param name="context">The descriptor context</param>
            <param name="provider">The provider</param>
            <param name="value">The namespace summary item collection as an
            object</param>
            <returns>The edited namespace summary item collection as an object</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to specify the editor's edit style
            </summary>
            <param name="context">The descriptor context</param>
            <returns>Always returns <b>Modal</b> as long as there is a context
            and an instance.  Otherwise, it returns <b>None</b>.</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.BuildEngine.FullTextIndex">
            <summary>
            This is a really basic implementation of an algorithm used to create
            a full-text index of the website pages so that they can be searched
            using the ASP.NET web pages.
            </summary>
            <remarks>So that an assembly does not have to be deployed to
            deserialize the index information, the index information is represented
            using built-in data types (string and long).
            </remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.FullTextIndex.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Constructor
            </summary>
            <param name="exclusions">The file containing common word
            exclusions.  The file should contain one work per line in
            lowercase.  These words will not appear in the index.</param>
            <param name="language">The culture information</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.FullTextIndex.CreateFullTextIndex(System.String)">
            <summary>
            Create a full-text index from web pages found in the specified
            file path.
            </summary>
            <param name="filePath">The path containing the files to index</param>
            <remarks>Words in the exclusion list, those that are less than
            three characters long, and anything starting with a digit will
            not appear in the index.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildEngine.FullTextIndex.SaveIndex(System.String)">
            <summary>
            Save the index information to the specified location.
            </summary>
            <param name="indexPath">The path to which the index files are
            saved.</param>
            <remarks>Binary serialization is used to save the index data.</remarks>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.MSHelpAttrEditor">
            <summary>
            This is a type editor that displays the
            <see cref="T:SandcastleBuilder.Utils.Design.MSHelpAttrEditorDlg"/> to edit the help attribute
            items for a project or topic.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpAttrEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This is overridden to edit the value using the
            <see cref="T:SandcastleBuilder.Utils.Design.MSHelpAttrEditorDlg"/> dialog.
            </summary>
            <param name="context">The descriptor context</param>
            <param name="provider">The provider</param>
            <param name="value">The help attribute item collection as an object</param>
            <returns>The edited help attribute item collection as an object</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpAttrEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to specify the editor's edit style
            </summary>
            <param name="context">The descriptor context</param>
            <returns>Always returns <b>Modal</b> as long as there is a context
            and an instance.  Otherwise, it returns <b>None</b>.</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.Conversion.ConvertFromSandcastleGui">
            <summary>
            This class is used to convert Stephan Smetsers Sandcastle GUI project
            files to the MSBuild format project files used by the help file builder.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromSandcastleGui.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="oldProjectFile">The old project filename</param>
            <param name="folder">The folder in which to place the new project
            and its related files.  This cannot be the same folder as the
            old project file.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromSandcastleGui.ConvertProject">
            <summary>
            This is used to perform the actual conversion
            </summary>
            <returns>The new project filename on success.  An exception is
            thrown if the conversion fails.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromSandcastleGui.ConvertAdditionalContent(System.String)">
            <summary>
            Add additional content to the project
            </summary>
            <param name="folder">The folder containing the content</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.Conversion.ConvertFromSandcastleGui.Reader">
            <summary>
            An XML reader isn't used by this converter
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Conversion.ConvertFromDocProject">
            <summary>
            This class is used to convert DocProject project files to the MSBuild
            format project files used by the help file builder.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromDocProject.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="oldProjectFile">The old project filename</param>
            <param name="folder">The folder in which to place the new project
            and its related files.  This cannot be the same folder as the
            old project file.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromDocProject.ConvertProject">
            <summary>
            This is used to perform the actual conversion
            </summary>
            <returns>The new project filename on success.  An exception is
            thrown if the conversion fails.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromDocProject.ImportProjectExtensionProperties">
            <summary>
            Parse project properties from the project extensions section
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromDocProject.ImportFile(System.Xml.XPath.XPathNavigator)">
            <summary>
            Import a file into the project
            </summary>
            <param name="buildItem">The file information</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromDocProject.ImportMediaFile(System.String)">
            <summary>
            Import image file information from a media content file.
            </summary>
            <param name="filename">The media content filename</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromDocProject.ImportCompanionFileInfo(System.String)">
            <summary>
            Import attribute information from a companion file
            </summary>
            <param name="filename">The companion filename</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromDocProject.CreateContentLayoutFile">
            <summary>
            Create a content layout file for the conceptual topics
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromDocProject.ConvertTopic(System.Xml.XmlReader,System.Xml.XmlWriter)">
            <summary>
            Convert a conceptual content topic and all of its children
            </summary>
            <param name="xr">The XML reader containing the topics</param>
            <param name="xw">The XML writer to which they are written</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromDocProject.CreateDefaultContentLayoutFile">
            <summary>
            Topic settings were found but no content layout file.  In such
            cases, this is called to create a default content layout file
            based on the settings alone.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Conversion.ConvertFromDocProject.Reader">
            <summary>
            An XML reader isn't used by this converter
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.NamespaceSummaryItemCollection">
            <summary>
            This collection class is used to hold the namespace summary items
            for a project.
            </summary>
            <remarks>Namespaces that appear in the assemblies but not in this
            list are documented by default and will appear without a namespace
            summary.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.NamespaceSummaryItemCollection.#ctor(SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Internal constructor
            </summary>
            <param name="project">The project that owns the collection</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.NamespaceSummaryItemCollection.Sort">
            <summary>
            This is used to sort the namespace items by name
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.NamespaceSummaryItemCollection.FromXml(System.String)">
            <summary>
            This is used to load existing namespace summary items from the
            project file.
            </summary>
            <param name="namespaceSummaries">The namespace summary items</param>
            <remarks>The information is stored as an XML fragment</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.NamespaceSummaryItemCollection.ToXml">
            <summary>
            This is used to write the namespace summary info to an XML
            fragment ready for storing in the project file.
            </summary>
            <returns>The XML fragment containing the namespace summary info</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.NamespaceSummaryItemCollection.Add(System.String,System.Boolean,System.String)">
            <summary>
            Add a new item to the collection
            </summary>
            <param name="name">The namespace name</param>
            <param name="isDocumented">True for documented, false for not
            documented</param>
            <param name="summary">The summary text</param>
            <returns>The <see cref="T:SandcastleBuilder.Utils.NamespaceSummaryItem"/> added to the
            project.  If the namespace already exists in the collection,
            the existing item is returned.</returns>
            <remarks>The <see cref="T:SandcastleBuilder.Utils.NamespaceSummaryItem"/> constructor is
            internal so that we control creation of the items and can
            associate them with the project.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.NamespaceSummaryItemCollection.CreateTemporaryItem(System.String)">
            <summary>
            Create a temporary item that isn't part of the project
            </summary>
            <param name="name">The namespace name</param>
            <returns>The <see cref="T:SandcastleBuilder.Utils.NamespaceSummaryItem"/> that can later
            be added to the project if necessary.</returns>
            <exception cref="T:System.ArgumentException">This is thrown if the given
            namespace already exists in the collection.</exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.NamespaceSummaryItemCollection.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This is overridden to mark the collection as dirty when it changes
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.NamespaceSummaryItemCollection.Project">
            <summary>
            This is used to get a reference to the project that owns the
            collection.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.NamespaceSummaryItemCollection.IsDirty">
            <summary>
            This is used to get or set the dirty state of the collection
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.NamespaceSummaryItemCollection.Item(System.String)">
            <summary>
            Indexer.  This can be used to retrieve the summary information
            for the specified namespace.
            </summary>
            <param name="name">The namespace for which to search</param>
            <returns>The namespace summary information if found or null if
            not found.</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.FileDialogType">
            <summary>
            The type of file dialog to display
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.Design.FileDialogType.FileOpen">
            <summary>Display a File Open dialog box</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.Design.FileDialogType.FileSave">
            <summary>Display a File Save dialog box</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.FileDialogAttribute">
            <summary>
            This attribute is used to associate file dialog parameters with a
            class property for use in editing it in a property grid.
            </summary>
            <seealso cref="T:SandcastleBuilder.Utils.Design.FilePathStringEditor"/>
            <seealso cref="T:SandcastleBuilder.Utils.Design.FilePathObjectEditor"/>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FileDialogAttribute.#ctor(System.String,System.String,SandcastleBuilder.Utils.Design.FileDialogType)">
            <summary>
            Constructor
            </summary>
            <param name="title">The title for the file dialog</param>
            <param name="filter">The filter to use for the file dialog</param>
            <param name="dialogType">The type of file dialog to display</param>
            <overloads>There are two overloads for the constructor.</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FileDialogAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="title">The title for the file dialog</param>
            <remarks>The filter defaults to "All Files (*.*)|*.*" and
            the dialog type defaults to <b>FileOpen</b></remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.FileDialogAttribute.Title">
            <summary>
            This is used to get the file dialog title
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.FileDialogAttribute.Filter">
            <summary>
            This is used to get the file dialog filter
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.FileDialogAttribute.DialogType">
            <summary>
            This is used to get the file dialog type
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.MSBuild.BuildHelp">
            <summary>
            This task is used to build help file output using the Sandcastle Help
            File Builder.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.BuildHelp.Execute">
            <summary>
            This is used to execute the task and perform the build
            </summary>
            <returns>True on success or false on failure.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.BuildHelp.GetCurrentProjectInstance">
            <summary>
            This is used to obtain project instance for the project that is
            currently being built.
            </summary>
            <returns>The project instance for the current project if possible
            or null if it could not be obtained.</returns>
            <remarks>When you run MSBuild.exe, it does not store the projects
            in the global project collection.  We could build the project
            without it but we lose the ability to use command line overrides
            and changes to user-defined properties.  As such we need to resort
            to reflection to get the current project information.  This is
            easier than in past MSBuild versions though.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.BuildHelp.buildProcess_BuildStepChanged(System.Object,SandcastleBuilder.Utils.BuildEngine.BuildProgressEventArgs)">
            <summary>
            This is called by the build process thread to update the
            application with the current build step.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.MSBuild.BuildHelp.buildProcess_BuildProgress(System.Object,SandcastleBuilder.Utils.BuildEngine.BuildProgressEventArgs)">
            <summary>
            This is called by the build process thread to update the
            task with information about progress.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildHelp.ProjectFile">
            <summary>
            This is used to pass in the project filename
            </summary>
            <remarks>Since <see cref="T:SandcastleBuilder.Utils.SandcastleProject"/> already wraps the
            MSBuild project, it seemed redundant to define each and every
            property on this task and map them to the project properties.  As
            such, this task will attempt to use the executing project to create
            the Sandcastle project instance.  If that fails or
            <see cref="P:SandcastleBuilder.Utils.MSBuild.BuildHelp.AlwaysLoadProject"/> is true, this file will be
            loaded instead.  The downside is that property overrides on the
            command line will be ignored.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildHelp.Configuration">
            <summary>
            This is used to pass in the configuration to use for the build
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildHelp.Platform">
            <summary>
            This is used to pass in the platform to use for the build
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildHelp.OutDir">
            <summary>
            This is used to specify the output directory containing the build
            output for solution and project documentation sources when using
            Team Build.
            </summary>
            <value>This property is optional.  If not specified, the default
            output path in project file documentation sources will be used.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildHelp.Verbose">
            <summary>
            This is used to set or get the output logging verbosity flag
            </summary>
            <value>This property is optional.  If set to false (the default),
            only build steps are written to the task log.  If set to true, all
            output from the build process is written to the task log.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildHelp.DumpLogOnFailure">
            <summary>
            This is used to set or get whether the log file is dumped to the
            task log if the help file project build fails.
            </summary>
            <value>This property is optional.  If set to false (the default),
            the log is not dumped if the build fails.  If set to true, all
            output from the build process is written to the task log if the
            build fails.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildHelp.AlwaysLoadProject">
            <summary>
            This is used to specify whether or not to load the specified
            <see cref="P:SandcastleBuilder.Utils.MSBuild.BuildHelp.ProjectFile"/> rather than use the executing project.
            </summary>
            <value>This property is optional.  If set to false, the default,
            the executing project is used as the Sandcastle project to build.
            If set to true, the specified <see cref="P:SandcastleBuilder.Utils.MSBuild.BuildHelp.ProjectFile"/> is loaded.
            In such cases, command line property overrides are ignored.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildHelp.Help1Files">
            <summary>
            This is used to return a list of the HTML Help 1 (CHM) files that
            resulted from the build.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildHelp.Help2Files">
            <summary>
            This is used to return a list of the MS Help 2 (HxS) files that
            resulted from the build.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildHelp.HelpViewerFiles">
            <summary>
            This is used to return a list of the MS Help Viewer (MSHC) files
            that resulted from the build.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildHelp.WebsiteFiles">
            <summary>
            This is used to return a list of the website files that resulted
            from the build.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.MSBuild.BuildHelp.AllHelpFiles">
            <summary>
            This is used to return a list of all files that resulted from the
            build (all help formats).
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.EscapeValueAttribute">
            <summary>
            This is used to mark a property that needs its value escaped when
            stored in an MSBuild project file.
            </summary>
            <remarks>MSBuild requires that the following characters be escaped in
            property values unless they are intended to be interpreted by the
            build engine:  % * ? @ $ ( ) ; '.  In addition, this attribute will
            cause the values to be HTML encoded so that any HTML characters,
            especially tag delimiters are not interpreted.  MSBuild tends to add
            XML namespaces to things it thinks are XML elements.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.EscapeValueAttribute.Escape(System.String)">
            <summary>
            This is used to HTML encode and escape an MSBuild property value.
            </summary>
            <param name="unescapedValue">The unescaped value</param>
            <returns>The HTML encoded escaped value</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.EscapeValueAttribute.Unescape(System.String)">
            <summary>
            This is used to return an unescaped and HTML decoded MSBuild value
            </summary>
            <param name="escapedValue">The escaped value</param>
            <returns>The unescaped and HTML decoded value</returns>
            <remarks>MSBuild provides an escape method but no unescape method.
            Go figure.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.EscapeValueAttribute.OnEscapeMatch(System.Text.RegularExpressions.Match)">
            <summary>
            This is used to convert the match to its unescaped character
            </summary>
            <param name="m">The match</param>
            <returns>The unescaped character as a string</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.EscapeValueAttribute.HexToInt(System.Char)">
            <summary>
            Convert a hex character to its integer value
            </summary>
            <param name="h">The hex character</param>
            <returns>The integer value</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.BuildComponent.BuildComponentInfo">
            <summary>
            This class contains information about the loaded build components.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildComponent.BuildComponentInfo.#ctor(System.Xml.XPath.XPathNavigator)">
            <summary>
            Constructor
            </summary>
            <param name="component">The XPath navigator containing the
            component's configuration information</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentInfo.Id">
            <summary>
            This read-only property returns the ID of the build component
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentInfo.TypeName">
            <summary>
            This read-only property returns the type name of the component
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentInfo.AssemblyPath">
            <summary>
            This read-only property returns the path to the assembly containing
            the component
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentInfo.Copyright">
            <summary>
            This read-only property returns copyright information for the
            component.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentInfo.Version">
            <summary>
            This read-only property returns version information for the
            component.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentInfo.Description">
            <summary>
            This read-only property returns a description of the component
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentInfo.IsHidden">
            <summary>
            This read-only property returns the hidden flag
            </summary>
            <remarks>If hidden, the component will not be selectable from
            within the help file builder.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentInfo.IsValid">
            <summary>
            This read-only property returns true if the component configuration
            is valid or false if it is not.
            </summary>
            <remarks>If not valid, the component cannot be used.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentInfo.InvalidReason">
            <summary>
            If not valid, this read-only property returns the reason
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentInfo.ConfigureMethod">
            <summary>
            This read-only property returns the method name used to configure
            the component interactively from within the help file builder.
            </summary>
            <remarks>If not specifed, a default editor will be used to allow
            modifying the raw XML configuration text.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentInfo.DefaultConfiguration">
            <summary>
            This read-only property returns the default configuration for
            the component.
            </summary>
            <remarks>This will include the enclosing &lt;component&gt; tag.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentInfo.ReferenceBuildPosition">
            <summary>
            This read-only property returns the position of the component in
            the reference build configuration file (sandcastle.config).
            </summary>
            <remarks>If not defined, it will not be used.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentInfo.ConceptualBuildPosition">
            <summary>
            This read-only property returns the position of the component in
            the conceptual build configuration file (conceptual.config).
            </summary>
            <remarks>If not defined, it will not be used.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.BuildComponentInfo.Dependencies">
            <summary>
            This read-only property returns the collection of component IDs
            on which this component depends.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.ApiEntryType">
            <summary>
            This public enumerated type defines the API entry types that can be
            removed from the reflection information file.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ApiEntryType.None">
            <summary>An unknown entry</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ApiEntryType.Namespace">
            <summary>A namespace</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ApiEntryType.Class">
            <summary>A class</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ApiEntryType.Structure">
            <summary>An interface</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ApiEntryType.Interface">
            <summary>An interface</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ApiEntryType.Enumeration">
            <summary>An enumeration</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ApiEntryType.Delegate">
            <summary>A delegate</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ApiEntryType.Constructor">
            <summary>A constructor</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ApiEntryType.Method">
            <summary>A method</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ApiEntryType.Operator">
            <summary>An operator</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ApiEntryType.Property">
            <summary>A property</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ApiEntryType.Event">
            <summary>An event</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.ApiEntryType.Field">
            <summary>A field</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Conversion.ConvertFromMSExampleGui">
            <summary>
            This class is used to convert the Microsoft example Sandcastle GUI
            project files to the MSBuild format project files used by the help
            file builder.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromMSExampleGui.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="oldProjectFile">The old project filename</param>
            <param name="folder">The folder in which to place the new project
            and its related files.  This cannot be the same folder as the
            old project file.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Conversion.ConvertFromMSExampleGui.ConvertProject">
            <summary>
            This is used to perform the actual conversion
            </summary>
            <returns>The new project filename on success.  An exception is
            thrown if the conversion fails.</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.Conversion.ConvertFromMSExampleGui.Reader">
            <summary>
            An XML reader isn't used by this converter
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.ConceptualContent.CodeSnippetCollection">
            <summary>
            This collection class is used to hold the conceptual content code
            snippet information for an associated code snippets file.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.CodeSnippetCollection.#ctor(SandcastleBuilder.Utils.FileItem)">
            <summary>
            Constructor
            </summary>
            <param name="file">The code snippets file associated with the
            collection.</param>
            <remarks>Code snippets are not loaded until the <see cref="M:SandcastleBuilder.Utils.ConceptualContent.CodeSnippetCollection.Load"/>
            method is called.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.CodeSnippetCollection.Sort">
            <summary>
            This is used to sort the collection
            </summary>
            <remarks>Values are sorted by ID.  Comparisons are case-sensitive.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.CodeSnippetCollection.Load">
            <summary>
            Load the collection from the related file
            </summary>
            <remarks>This will be done automatically at constructor.  This can
            be called to reload the collection if needed.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.CodeSnippetCollection.CodeSnippetFile">
            <summary>
            This is used to get the build item related to the code snippet file
            containing the collection items.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.InheritedDocumentation.IndexedCommentsCache">
            <summary>
            This is used to cache indexed XML comments files
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.InheritedDocumentation.IndexedCommentsCache.OnReportWarning(SandcastleBuilder.Utils.InheritedDocumentation.CommentsCacheEventArgs)">
            <summary>
            This is used to raise the <see cref="E:SandcastleBuilder.Utils.InheritedDocumentation.IndexedCommentsCache.ReportWarning"/> event
            </summary>
            <param name="args">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.InheritedDocumentation.IndexedCommentsCache.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="size">The maximum size of the cache</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.InheritedDocumentation.IndexedCommentsCache.IndexCommentsFiles(System.String,System.String,System.Boolean,System.Collections.ObjectModel.Collection{System.Xml.XPath.XPathNavigator})">
            <summary>
            Index all comments files found in the specified folder.
            </summary>
            <param name="path">The path to search.  If null or empty, the
            current directory is assumed.</param>
            <param name="wildcard">The wildcard to use.  If null or empty,
            "*.xml" is assumed.</param>
            <param name="recurse">True to recurse subfolders or false to only
            use the given folder.</param>
            <param name="commentsFiles">Optional.  If not null, an
            <see cref="T:System.Xml.XPath.XPathDocument"/> is added to the collection for each
            file indexed.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.InheritedDocumentation.IndexedCommentsCache.GetComments(System.String)">
            <summary>
            Get the comments for the specified key
            </summary>
            <param name="key">The key for which to retrieve comments</param>
            <returns>An <see cref="T:System.Xml.XPath.XPathNavigator"/> for the comments or null
            if not found.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.InheritedDocumentation.IndexedCommentsCache.GetCommentsFile(System.String)">
            <summary>
            Get the comments file from the index cache that contains the given
            key.
            </summary>
            <param name="key">The key for which to retrieve the file</param>
            <returns>The indexed comments file or null if not found</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.InheritedDocumentation.IndexedCommentsCache.GetKeys">
            <summary>
            Return all keys in this index
            </summary>
            <returns>A string array containing the keys</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.InheritedDocumentation.IndexedCommentsCache.IndexCount">
            <summary>
            This read-only property returns the number of items indexed
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.InheritedDocumentation.IndexedCommentsCache.FilesIndexed">
            <summary>
            This read-only property returns the number of comments files
            that were indexed.
            </summary>
        </member>
        <member name="E:SandcastleBuilder.Utils.InheritedDocumentation.IndexedCommentsCache.ReportWarning">
            <summary>
            This is used by the cache to report duplicate key warnings
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.MSHelpKeywordEditor">
            <summary>
            This is a type editor that displays the
            <see cref="T:SandcastleBuilder.Utils.Design.MSHelpKeywordEditorDlg"/> to edit the help index keywords
            for a topic.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpKeywordEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This is overridden to edit the value using the
            <see cref="T:SandcastleBuilder.Utils.Design.MSHelpKeywordEditorDlg"/> dialog.
            </summary>
            <param name="context">The descriptor context</param>
            <param name="provider">The provider</param>
            <param name="value">The help index keyword collection as an object</param>
            <returns>The edited help index keyword collection as an object</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.MSHelpKeywordEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to specify the editor's edit style
            </summary>
            <param name="context">The descriptor context</param>
            <returns>Always returns <b>Modal</b> as long as there is a context
            and an instance.  Otherwise, it returns <b>None</b>.</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.FlagsEnumEditor">
            <summary>
            This is a type editor that displays a checked list box as the drop-down
            editor for an enumerated data type that represents a set of flags.
            This makes it easy to select multiple values with the drop-down.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FlagsEnumEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This is overridden to edit the value using a checked list box
            control as the drop-down editor.
            </summary>
            <param name="context">The descriptor context</param>
            <param name="provider">The provider</param>
            <param name="value">The enumerated type object to edit</param>
            <returns>The edited enumerated type object</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FlagsEnumEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            This is overridden to specify the editor's edit style
            </summary>
            <param name="context">The descriptor context</param>
            <returns>Always returns <b>DropDown</b> as long as there is a
            context and an instance.  Otherwise, it returns <b>None</b>.</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.FilePathTypeConverter">
            <summary>
            This type converter is used to convert a FilePath object to and from
            a string so that it can be edited in a
            <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FilePathTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FilePathTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FilePathTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.ContentFileEditor">
            <summary>
            This class represents an external application that is used to edit
            an additional content file.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ContentFileEditor.Clone">
            <summary>
            Clone this object
            </summary>
            <returns>A clone of the object</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ContentFileEditor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ContentFileEditor.IsEditorFor(System.String)">
            <summary>
            See if the given extension is a match for this file editor.
            </summary>
            <param name="extension">The extension to check</param>
            <returns>True if this is the editor for the given file extension
            or false if not.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.ContentFileEditor.ActualArguments(System.String,System.String)">
            <summary>
            Substitute actual values for the macro place holders
            </summary>
            <param name="contentItem">The content item</param>
            <param name="projectFile">The current project file</param>
            <returns>A string containing the actual arguments to pass to the
            editor application.</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ContentFileEditor.Description">
            <summary>
            This is used to get or set a description of the editor application
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ContentFileEditor.Extensions">
            <summary>
            This is used to get or set the filename extensions for which this
            content file editor will be used.
            </summary>
            <value>Separate the extensions with space, semi-colon, or a comma</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ContentFileEditor.Arguments">
            <summary>
            This is used to get or set the parameters to pass to the
            application.
            </summary>
            <remarks>The following macros can be used to subsitute item
            and path values into the argument string.
            <list type="table">
               <listheader>
                  <term>Macro Name</term>
                  <description>Value Used</description>
               </listheader>
               <item>
                  <term>$ContentItem</term>
                  <description>The full path to the content item to be
            edited</description>
               </item>
               <item>
                  <term>$ProjectFile</term>
                  <description>The fully qualified path and filename of the
            current project.</description>
               </item>
               <item>
                  <term>$ProjectFolder</term>
                  <description>The fully qualified path to the current
            project.</description>
               </item>
            </list>
            <p/>The macro names are case-insensitive.  Enclose arguments in
            double quotes if they may contain spaces.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ContentFileEditor.ApplicationPath">
            <summary>
            This is used to get or set the source path to the editor
            application.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ContentFileEditor.StartupFolder">
            <summary>
            This is used to set or get the startup folder used when launching
            the content file editor.
            </summary>
            <value>If not set, the current project's path is used.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ContentFileEditor.EditorDescription">
            <summary>
            This returns a description of the entry suitable for display in a
            bound list control.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ContentFileEditor.ApplicationPathSerializable">
            <summary>
            This property is used to serialize the application path
            </summary>
            <remarks><see cref="T:SandcastleBuilder.Utils.FilePath"/> is not serializable because it
            does not have a parameterless constructor.  This stands in for the
            <see cref="P:SandcastleBuilder.Utils.Design.ContentFileEditor.ApplicationPath"/> property when this class is
            serialized.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.Design.ContentFileEditor.StartupFolderSerializable">
            <summary>
            This property is used to serialize the startup folder
            </summary>
            <remarks><see cref="T:SandcastleBuilder.Utils.FolderPath"/> is not serializable because it
            does not have a parameterless constructor.  This stands in for the
            <see cref="P:SandcastleBuilder.Utils.Design.ContentFileEditor.StartupFolder"/> property when this class is
            serialized.</remarks>
        </member>
        <member name="T:SandcastleBuilder.Utils.ConceptualContent.Token">
            <summary>
            This represents a conceptual content token that can be used to insert
            a common item, value, or construct into topics.
            </summary>
            <remarks>This class is serializable so that it can be copied to the
            clipboard.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.Token.#ctor">
            <summary>
            Constructor
            </summary>
            <remarks>The token name defaults to "NoName"</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.Token.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The token name</param>
            <param name="value">The token value</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.Token.ToToken">
            <summary>
            Convert the token to its <c>&lt;token&gt;</c> element form
            </summary>
            <returns>The token in its <c>&lt;token&gt;</c> element form</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Token.TokenName">
            <summary>
            This is used to get or set the token name
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.Token.TokenValue">
            <summary>
            This is used to get or set the token value
            </summary>
            <value>The value can contain help file builder replacement tags.
            These will be replaced at build time with the appropriate project
            value.</value>
        </member>
        <member name="T:SandcastleBuilder.Utils.SdkLinkTarget">
            <summary>
            This public enumerated type defines the locations in which a browser
            window can be opened for the MSDN SDK links.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.SdkLinkTarget.Blank">
            <summary>The URL is loaded into a new unnamed window.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.SdkLinkTarget.Self">
            <summary>The current document is replaced with the specified
            URL.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.SdkLinkTarget.Parent">
            <summary>The URL is loaded into the current frame's parent. If
            the frame has no parent, this value acts like the value
            <b>Self</b>.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.SdkLinkTarget.Top">
            <summary>The URL replaces any framesets that may be loaded. If
            there are no framesets defined, this value acts like the value
            <b>Self</b>.</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.UserDefinedPropertyTypeConverter">
            <summary>
            This is used to give a more descriptive message in the property
            grid for the <see cref="P:SandcastleBuilder.Utils.SandcastleProject.UserDefinedProperties"/>
            project property.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.UserDefinedPropertyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.UserDefinedPropertyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection">
            <summary>
            This collection class is used to hold the table of contents entries for
            additional content items.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.#ctor">
            <summary>
            Default constructor
            </summary>
            <overloads>There are two overloads for the constructor</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.#ctor(SandcastleBuilder.Utils.FileItem)">
            <summary>
            Constructor
            </summary>
            <param name="siteMap">The site map file associated with the
            collection.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.Sort">
            <summary>
            This is used to sort the collection
            </summary>
            <remarks>All top level items and their children are sorted</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.ToString">
            <summary>
            Convert the table of contents entry and its children to a string
            </summary>
            <returns>The entries in HTML 1.x help format</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.ToString(SandcastleBuilder.Utils.HelpFileFormat)">
            <summary>
            Convert the table of contents entry and its children to a string
            in the specified help file format.
            </summary>
            <param name="format">The help file format to use</param>
            <returns>The entries in the specified help format</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.ConvertToString(SandcastleBuilder.Utils.HelpFileFormat,System.Text.StringBuilder)">
            <summary>
            This is used to convert the collection to a string and append it
            to the specified string builder.
            </summary>
            <param name="format">The help file format to use</param>
            <param name="sb">The string builder to which the information is
            appended.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.SaveToIntermediateTocFile(System.String,System.Int32,System.String)">
            <summary>
            This is used to save the TOC information to an intermediate TOC
            file used in the conceptual content build.
            </summary>
            <param name="rootContainerId">The ID of the root container topic if used</param>
            <param name="rootOrder">The TOC order for the root container topic if used</param>
            <param name="filename">The filename to use</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.FindDefaultTopic">
            <summary>
            This is used to locate the default topic if one exists
            </summary>
            <returns>The default topic if found or null if not found</returns>
            <remarks>The first entry found is returned.  Nodes are searched
            recursively.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.RemoveExcludedNodes(SandcastleBuilder.Utils.ConceptualContent.TocEntry)">
            <summary>
            This will remove excluded nodes from a TOC created off of the
            additional content items in a project.  In addition, it merges
            the information from folder entries into the folder nodes.
            </summary>
            <param name="parent">The parent node</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.Load">
            <summary>
            This is used to load the table of contents entries from the site
            map file associated with the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">This is thrown if a
            site map has not been associated with the collection.</exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.Save">
            <summary>
            This is used to save the table of contents entries to the site map
            file associated with the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">This is thrown if a
            site map has not been associated with the collection.</exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.Find(System.String)">
            <summary>
            Find a TOC entry with the same source filename
            </summary>
            <param name="sourceFilename">The source filename to match</param>
            <returns>The match TOC entry or null if not found</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.ResetSortOrder">
            <summary>
            Reset the sort order on all items in the collection
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.ChildListChanged(SandcastleBuilder.Utils.ConceptualContent.TocEntry)">
            <summary>
            This is used by contained items to notify the parent that a child
            list changed and thus the collection should be marked as dirty.
            </summary>
            <param name="changedItem">The item that changed</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.AddTopicsFromFolder(System.String,System.String,SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Add all topics from the specified folder recursively to the
            collection and to the given project file.
            </summary>
            <param name="folder">The folder from which to get the files</param>
            <param name="basePath">The base path to remove from files copied
            from another folder into the project folder.  On the first call,
            this should match the <paramref name="folder"/> value.</param>
            <param name="project">The project to which the files are added</param>
            <remarks>Only actual HTML content topic files are added.  They must
            have a ".htm?" extension.  Folders will be added as sub-topics
            recursively.  If a file with the same name as the folder exists,
            it will be associated with the container node.  If no such file
            exists, an empty container node is created.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.InsertItem(System.Int32,SandcastleBuilder.Utils.ConceptualContent.TocEntry)">
            <summary>
            This is overridden to set the inserted item's parent to this
            collection.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.SetItem(System.Int32,SandcastleBuilder.Utils.ConceptualContent.TocEntry)">
            <summary>
            This is overridden to set the inserted item's parent to this
            collection.
            </summary>
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.RemoveItem(System.Int32)">
            <summary>
            This is overridden to clear the parent on the removed item
            </summary>
            <param name="index">The index of the item to remove</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.GenerateTableOfContents(SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection,SandcastleBuilder.Utils.IBasePathProvider)">
            <summary>
            This is used to merge this TOC with another one
            </summary>
            <param name="toc">The table of contents collection</param>
            <param name="pathProvider">The base path provider</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.FileItem">
            <summary>
            This read-only property returns the project file item associated
            with the collection.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.DefaultTopic">
            <summary>
            This is used to get the default topic
            </summary>
            <value>It returns the default topic or null if one is not set</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.ApiContentInsertionPoint">
            <summary>
            This is used to get the topic at which the API table of contents is
            to be inserted or parented.
            </summary>
            <value>This will return null if no parent location has been set</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.ApiContentParent">
            <summary>
            This is used to get the parent item that will contain the API table
            of contents.
            </summary>
            <returns>The parent item or null if it is the root collection.</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.ApiContentParentCollection">
            <summary>
            This is used to get the parent collection that contains the item
            where the API table of contents is to be inserted.
            </summary>
            <returns>The parent collection if there is a location defined or
            null if there isn't one.</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.Item(System.String)">
            <summary>
            This can be used to get a topic by its unique ID (case-insensitive)
            </summary>
            <param name="id">The ID of the item to get.</param>
            <value>Returns the topic with the specified
            <see cref="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.Id"/> or null if not found.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntryCollection.ContentLayoutFile">
            <summary>
            This is used to get the site map file associated with the
            collection.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Properties.Resources.ProjectTemplate">
             <summary>
               Looks up a localized string similar to &lt;Project DefaultTargets=&quot;Build&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot; ToolsVersion=&quot;4.0&quot;&gt;
              &lt;PropertyGroup&gt;
                &lt;!-- The configuration and platform will be used to determine which
                     assemblies to include from solution and project documentation
                     sources --&gt;
                &lt;Configuration Condition=&quot; &apos;$(Configuration)&apos; == &apos;&apos; &quot;&gt;Debug&lt;/Configuration&gt;
                &lt;Platform Condition=&quot; &apos;$(Platform)&apos; == &apos;&apos; &quot;&gt;AnyCPU&lt;/Platform&gt;
            
                &lt;SchemaVersion&gt;2.0&lt;/SchemaVersion&gt;
                &lt;ProjectGuid&gt;$guid1 [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.PlugIn.IPlugIn">
            <summary>
            This interface defines the methods required to implement a build
            process plug-in for the Sandcastle Help File Builder.
            </summary>
            <remarks>Derived classes must also implement the
            <see cref="T:System.IDisposable"/> methods.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.IPlugIn.ConfigurePlugIn(SandcastleBuilder.Utils.SandcastleProject,System.String)">
            <summary>
            This method is used by the Sandcastle Help File Builder to let the
            plug-in perform its own configuration.
            </summary>
            <param name="project">A reference to the active project</param>
            <param name="currentConfig">The current configuration XML fragment</param>
            <returns>A string containing the new configuration XML fragment</returns>
            <remarks>The configuration data will be stored in the help file
            builder project.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.IPlugIn.Initialize(SandcastleBuilder.Utils.BuildEngine.BuildProcess,System.Xml.XPath.XPathNavigator)">
            <summary>
            This method is used to initialize the plug-in at the start of the
            build process.
            </summary>
            <param name="buildProcess">A reference to the current build
            process.</param>
            <param name="configuration">The configuration data that the plug-in
            should use to initialize itself.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.PlugIn.IPlugIn.Execute(SandcastleBuilder.Utils.PlugIn.ExecutionContext)">
            <summary>
            This method is used to execute the plug-in during the build process
            </summary>
            <param name="context">The current execution context</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.IPlugIn.Name">
            <summary>
            This read-only property returns a friendly name for the plug-in
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.IPlugIn.Version">
            <summary>
            This read-only property returns the version of the plug-in
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.IPlugIn.Copyright">
            <summary>
            This read-only property returns the copyright information for the
            plug-in.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.IPlugIn.Description">
            <summary>
            This read-only property returns a brief description of the plug-in
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.IPlugIn.RunsInPartialBuild">
            <summary>
            This read-only property returns true if the plug-in should run in
            a partial build or false if it should not.
            </summary>
            <value>If this returns false, the plug-in will not be loaded when
            a partial build is performed.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.PlugIn.IPlugIn.ExecutionPoints">
            <summary>
            This read-only property returns a collection of execution points
            that define when the plug-in should be invoked during the build
            process.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.ApiFilterCollection">
            <summary>
            This collection class is used to hold the API filter entries for
            MRefBuilder to remove.
            </summary>
            <remarks><note type="note">Unlike other collections in the project,
            this one is cleared and rebuilt if it changes.  As such, the contained
            items do not notify the project when they change as they are created
            anew each time the collection is rebuilt.</note></remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilterCollection.#ctor(SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Internal constructor
            </summary>
            <param name="project">The project that owns the collection</param>
            <remarks>Child collections do not contain a reference to the
            project file.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilterCollection.Sort">
            <summary>
            This is used to sort the collection
            </summary>
            <remarks>All top level items and their children are sorted by
            API entry type and then by name</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilterCollection.FromXml(System.String)">
            <summary>
            This is used to load existing API filter items from the project
            file.
            </summary>
            <param name="apiFilter">The API filter items</param>
            <remarks>The information is stored as an XML fragment</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilterCollection.ToXml">
            <summary>
            This is used to write the API filter info to an XML fragment ready
            for storing in the project file.
            </summary>
            <returns>The XML fragment containing the help attribute info</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilterCollection.MergeEntry(SandcastleBuilder.Utils.ApiEntryType,System.String,System.Boolean,System.Boolean)">
            <summary>
            This is used to merge an entry with the filter collection
            </summary>
            <param name="entryType">The entry type</param>
            <param name="fullName">The member's full name</param>
            <param name="isExposed">True to expose it, false to remove it</param>
            <param name="isProjectExclude">True if this is a project exclude
            (currently this will always be true).</param>
            <returns>True if merged without conflict or false if the merged
            member conflicted with an existing entry.  The existing entry
            will take precedence.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilterCollection.AddNamespaceChild(System.String,System.String,System.String,System.String)">
            <summary>
            Add a new type entry to this namespace collection
            </summary>
            <param name="fullName">The full name of the entry</param>
            <param name="nameSpace">The namespace</param>
            <param name="typeName">The type name</param>
            <param name="memberName">The member</param>
            <returns>True if merged without conflict or false if the merged
            member conflicted with an existing entry.  The existing entry
            will take precedence.</returns>
            <remarks>Entries added by this method are exclusions based on
            namespace comment or &lt;exclude/&gt; tag exclusions.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilterCollection.AddTypeChild(System.String,System.String,System.String)">
            <summary>
            Add a new member entry to this type collection
            </summary>
            <param name="fullName">The full name of the entry</param>
            <param name="typeName">The type name</param>
            <param name="memberName">The member</param>
            <returns>True if merged without conflict or false if the merged
            member conflicted with an existing entry.  The existing entry
            will take precedence.</returns>
            <remarks>Entries added by this method are exclusions based on
            namespace comment or &lt;exclude/&gt; tag exclusions.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilterCollection.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This is overridden to mark the collection as dirty when it changes
            </summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilterCollection.ToString">
            <summary>
            Convert the API filter entry and its children to a string
            </summary>
            <returns>The entries in the MRefBuilder API filter XML format</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilterCollection.Clone">
            <summary>
            Clone the API filter collection
            </summary>
            <returns>A clone of the collection</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.ApiFilterCollection.IsDirty">
            <summary>
            This is used to get or set the dirty state of the collection
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ApiFilterCollection.Project">
            <summary>
            This is used to get a reference to the project that owns the
            collection.
            </summary>
            <remarks>Child collections do not contain a reference to the
            project file.</remarks>
        </member>
        <member name="T:SandcastleBuilder.Utils.ApiFilter">
            <summary>
            This represents an API entry that is to be removed from the reflection
            information using MRefBuilder's namespace ripping feature.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilter.CompareTo(SandcastleBuilder.Utils.ApiFilter)">
            <summary>
            Compares this instance to another instance and returns an
            indication of their relative values.
            </summary>
            <param name="other">An ApiFilter object to compare</param>
            <returns>Returns -1 if this instance is less than the
            value, 0 if they are equal, or 1 if this instance is
            greater than the value or the value is null.</returns>
            <remarks>Entries are sorted by API entry type and full name</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilter.Clone">
            <summary>
            Clone the API filter
            </summary>
            <returns>A clone of the filter</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilter.#ctor">
            <summary>
            Constructor
            </summary>
            <overloads>There are two overloads for the constructor</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilter.#ctor(SandcastleBuilder.Utils.ApiEntryType,System.String,System.Boolean)">
            <summary>
            Constructor.  This takes the API type and the full name
            </summary>
            <param name="apiType">The API entry type</param>
            <param name="name">The fully qualified name</param>
            <param name="exposed">True to expose it, false to hide it</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilter.ConvertToString(System.Text.StringBuilder)">
            <summary>
            This is used to convert the entry and its children to a string
            ready for use in the MRefBuilder config file.
            </summary>
            <param name="sb">The string builder to which the information is
            appended.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilter.FromXml(System.Xml.XmlTextReader)">
            <summary>
            This is used to load the content item information from the project
            file.
            </summary>
            <param name="xr">The XML text reader from which the information
            is loaded.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilter.ToXml(System.Xml.XmlTextWriter)">
            <summary>
            This is used to save the content item information to the project
            file.
            </summary>
            <param name="xw">The XML text writer to which the information
            is written.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ApiFilter.ApiEntryTypeFromLetter(System.Char)">
            <summary>
            This is used to convert an API type letter to an
            <see cref="T:SandcastleBuilder.Utils.ApiEntryType"/> enumerated value.
            </summary>
            <param name="apiType">The letter to convert</param>
            <returns>The <b>ApiEntryType</b> represented by the letter</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.ApiFilter.EntryType">
            <summary>
            This is used to get or set the API entry type
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ApiFilter.FullName">
            <summary>
            This is used to get the fully qualified name of the API entry
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ApiFilter.FilterName">
            <summary>
            This is used to get the API filter name
            </summary>
            <value>For API entry types other than namespaces, this is the name
            without the namespace and, for methods properties, etc. the
            type.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ApiFilter.IsExposed">
            <summary>
            This is used to get or set whether or not the entry is exposed
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ApiFilter.IsProjectExclude">
            <summary>
            This is used to get or set whether or not the entry is excluded
            via the project (i.e. via the SHFB Namespaces option or an
            <code>&lt;exclude /&gt;</code> tag.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ApiFilter.Children">
            <summary>
            This returns the child API filter collection for this entry
            </summary>
            <value>For namespaces and types, if there are children, they
            represent the specific entries within the namespace or type
            to hide or expose.</value>
        </member>
        <member name="T:SandcastleBuilder.Utils.HelpFileFormat">
            <summary>
            This public enumerated type defines the type(s) of help file generated
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.HelpFileFormat.HtmlHelp1">
            <summary>HTML Help 1 (.chm) format built with HHC.EXE.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.HelpFileFormat.MSHelp2">
            <summary>MS Help 2 (.HxS) format built with HXCOMP.EXE.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.HelpFileFormat.MSHelpViewer">
            <summary>MS Help Viewer (.mshc) format, a ZIP file containing the
            help content.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.HelpFileFormat.Website">
            <summary>A website with a basic TOC and search panes.</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Gac.GacEnumerator">
            <summary>
            This class is used to get a list of assemblies in the Global Assembly
            Cache (GAC).
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.Gac.GacEnumerator.GacList">
            <summary>
            This static property is used to obtain a list containing the
            fully qualified names of all assemblies in the GAC.
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.VersionTypeConverter">
            <summary>
            This type converter converts between a string and a
            <see cref="T:System.Version"/> object and vice versa.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.VersionTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.VersionTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
            <returns>A <see cref="T:System.Version"/> object.  The value is
            always a four-part version number with any unused parts defaulted
            to zero.  If the new value is null or an empty string, null is
            returned.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.VersionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:SandcastleBuilder.Utils.BuildEngine.BuildStep">
            <summary>
            This public enumerated type defines the build steps used when reporting
            progress during a build.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.None">
            <summary>The build has not yet started.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.Initializing">
            <summary>Initializing to prepare for build.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.ClearWorkFolder">
            <summary>The working folder is about to be created or cleared.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.FindingTools">
            <summary>The builder is searching for Sandcastle and the
            HTML help compiler.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.ValidatingDocumentationSources">
            <summary>The documentation source information is being validated
            and copied to the build folder.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.GenerateSharedContent">
            <summary>The shared content files are being generated.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.GenerateApiFilter">
            <summary>Generate the API filter for MRefBuilder</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.GenerateReflectionInfo">
            <summary>The reflection information is being generated by
            <b>MRefBuilder</b>.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.GenerateNamespaceSummaries">
            <summary>Namespace summary information is being generated.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.ApplyVisibilityProperties">
            <summary>The Visibility category properties are being applied to
            the reflection information file to remove unwanted items.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.GenerateInheritedDocumentation">
            <summary>All <c>&lt;inheritDoc /&gt;</c> tags are being expanded.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.TransformReflectionInfo">
            <summary>The reflection information is being transformed by
            <b>XslTransform</b>.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.ModifyHelpTopicFilenames">
            <summary>Help topic filenames are being altered.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.CopyStandardContent">
            <summary>The standard help file content (art, scripts, and styles)
            is being copied to the help project folder.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.CopyConceptualContent">
            <summary>The conceptual content files are being copied.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.CreateConceptualTopicConfigs">
            <summary>The conceptual content topic configuration files are being
            generated.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.CopyAdditionalContent">
            <summary>The additional content files are being copied to the
            help project folder.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.MergeTablesOfContents">
            <summary>The conceptual and additional content tables of contents
            are being merged.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.GenerateIntermediateTableOfContents">
            <summary>The intermediate table of contents is being generated by
            <b>XslTransform</b>.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.CreateBuildAssemblerConfigs">
            <summary>The <b>sandcastle.config</b> <b>Conceptual.config</b>
            <b>BuildAssembler</b> files are being created.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.MergeCustomConfigs">
            <summary>Custom build component configurations are being merged
            into the <b>sandcastle.config</b> file.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.BuildConceptualTopics">
            <summary>Conceptual help file topics are being generated by
            <b>BuildAssembler</b>.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.BuildReferenceTopics">
            <summary>API reference help file topics are being generated by
            <b>BuildAssembler</b>.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.CombiningIntermediateTocFiles">
            <summary>The intermediate table of content files are being merged
            into a single file.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.ExtractingHtmlInfo">
            <summary>Title and keyword index information is being extracted for
            the HTML Help 1 TOC and index and/or website TOC.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.GenerateHelpFormatTableOfContents">
            <summary>The format-specific table of contents is being generated
            by <b>XslTransform</b>.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.GenerateHelpFileIndex">
            <summary>The help file index is being generated.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.GenerateHelpProject">
            <summary>The help project file is being generated.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.CompilingHelpFile">
            <summary>The help file project is being compiled.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.GenerateFullTextIndex">
            <summary>Generate full-text index for ASP.NET website search.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.CopyingWebsiteFiles">
            <summary>The website files are being copied to the output path.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.CleanIntermediates">
            <summary>The temporary help project files are being removed.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.Completed">
            <summary>The build has completed successfully.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.Canceled">
            <summary>The build was canceled by user request.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.BuildEngine.BuildStep.Failed">
            <summary>The build failed with an unexpected error.</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.MSHelpViewerSdkLinkType">
            <summary>
            This public enumerated type defines the type of links used to reference
            other help topics referring to framework (SDK) help topics in MS Help
            Viewer help files.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.MSHelpViewerSdkLinkType.None">
            <summary>No active links</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.MSHelpViewerSdkLinkType.Id">
            <summary>Id style links for use within an MS Help viewer help file</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.MSHelpViewerSdkLinkType.Msdn">
            <summary>Links to framework topics online at MSDN</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.HtmlSdkLinkType">
            <summary>
            This public enumerated type defines the type of links used to reference
            other help topics referring to framework (SDK) help topics in HTML Help
            1 and website help files.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.HtmlSdkLinkType.None">
            <summary>No active links</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.HtmlSdkLinkType.Msdn">
            <summary>Links to framework topics online at MSDN</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.BuildActionEnumConverter">
            <summary>
            This is used to limit which values are available to properties using
            <see cref="T:SandcastleBuilder.Utils.BuildAction"/> as their underlying type.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.BuildActionEnumConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.BuildActionEnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc />
            <remarks>Build actions that serve no purpose for selection
            are removed.</remarks>
        </member>
        <member name="T:SandcastleBuilder.Utils.ConceptualContent.TocEntry">
            <summary>
            This represents a table of contents entry.  This is used to build the
            table of contents entries for additional content items.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.CompareTo(SandcastleBuilder.Utils.ConceptualContent.TocEntry)">
            <summary>
            Compares this instance to another instance and returns an
            indication of their relative values.
            </summary>
            <param name="other">A TocEntry object to compare</param>
            <returns>Returns -1 if this instance is less than the
            value, 0 if they are equal, or 1 if this instance is
            greater than the value or the value is null.</returns>
            <remarks>The <see cref="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.SortOrder"/> property is compared first.
            If equal, the <see cref="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.Title"/> property is used.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.Clone">
            <summary>
            Clone this table of contents entry
            </summary>
            <returns>A clone of this table of contents entry</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.ResetSortOrder">
            <summary>
            Reset the sort order on this item and its children
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.childList_ListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Mark the project as dirty if the contained lists change
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
            <remarks>This may not be the best way to handle this.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.#ctor(SandcastleBuilder.Utils.IBasePathProvider)">
            <summary>
            Constructor
            </summary>
            <param name="basePathProvider">The base path provider</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.op_Equality(SandcastleBuilder.Utils.ConceptualContent.TocEntry,SandcastleBuilder.Utils.ConceptualContent.TocEntry)">
            <summary>
            Overload for equal operator
            </summary>
            <param name="t1">The first TOC entry object</param>
            <param name="t2">The second TOC entry object</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.op_Inequality(SandcastleBuilder.Utils.ConceptualContent.TocEntry,SandcastleBuilder.Utils.ConceptualContent.TocEntry)">
            <summary>
            Overload for not equal operator
            </summary>
            <param name="t1">The first TOC entry object</param>
            <param name="t2">The second TOC entry object</param>
            <returns>True if not equal, false if they are equal.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.op_LessThan(SandcastleBuilder.Utils.ConceptualContent.TocEntry,SandcastleBuilder.Utils.ConceptualContent.TocEntry)">
            <summary>
            Overload for less than operator
            </summary>
            <param name="t1">The first TOC entry object</param>
            <param name="t2">The second TOC entry object</param>
            <returns>True if t1 is less than t2, false if not.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.op_GreaterThan(SandcastleBuilder.Utils.ConceptualContent.TocEntry,SandcastleBuilder.Utils.ConceptualContent.TocEntry)">
            <summary>
            Overload for greater than operator
            </summary>
            <param name="t1">The first TOC entry object</param>
            <param name="t2">The second TOC entry object</param>
            <returns>True if t1 is greater than t2, false if not.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.GetHashCode">
            <summary>
            Get a hash code for this item
            </summary>
            <returns>Returns the hash code for the <see cref="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.ToString"/>
            value.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.ToString">
            <summary>
            Convert the table of contents entry and its children to a string
            </summary>
            <returns>The entries in HTML 1.x help format</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.ToString(SandcastleBuilder.Utils.HelpFileFormat)">
            <summary>
            Convert the table of contents entry and its children to a string
            in the specified help file format.
            </summary>
            <param name="format">The help file format to use</param>
            <returns>The entries in specified help format</returns>
            <exception cref="T:System.ArgumentException">This is thrown if the
            format is not <b>HtmlHelp1</b> or <b>MSHelp2</b>.</exception>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.ConvertToString(SandcastleBuilder.Utils.HelpFileFormat,System.Text.StringBuilder)">
            <summary>
            This is used to convert the collection to a string and append it
            to the specified string builder.
            </summary>
            <param name="format">The help file format to use</param>
            <param name="sb">The string builder to which the information is
            appended.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.ToAnchor(System.String)">
            <summary>
            Convert the entry to its <c>&lt;a&gt;</c> element form
            </summary>
            <param name="innerText">Optional inner text</param>
            <returns>The topic in its <c>&lt;a&gt;</c> element form</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.LoadSiteMapNode(System.Xml.XmlNode)">
            <summary>
            This will load information about the entry from the node and will
            also load all child nodes.
            </summary>
            <param name="site">The site map node to use for this entry</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.SaveAsSiteMapNode(System.Xml.XmlNode)">
            <summary>
            Save this node and its children to the specified root node as
            site map nodes.
            </summary>
            <param name="root">The root node to which the current entry
            is added.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.TocEntry.ContainsMatch(System.String)">
            <summary>
            See if this entry or one of its children is a match to the
            specified source filename.
            </summary>
            <param name="sourceFilename">The source filename to match</param>
            <returns>The match TOC entry or null if not found</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.Parent">
            <summary>
            This is used to track the topic's parent collection
            </summary>
            <remarks>This is used by the designer to move items around within
            the collection.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.BasePathProvider">
            <summary>
            This returns the <see cref="T:SandcastleBuilder.Utils.IBasePathProvider"/> for the entry.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.Children">
            <summary>
            This returns the child table of contents collection for this entry
            </summary>
            <value>If empty, this is a single item in the table of contents.
            If it has children, they are listed below this one.  A file may
            or may not be associated with this entry if it is a root node.</value>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.SourceFile">
            <summary>
            This is used to get or set the entry's source file path.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.DestinationFile">
            <summary>
            This is used to get or set the entry's destination file path.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.Id">
            <summary>
            The ID of the item when it represents a TOC entry from a content
            layout file.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.Title">
            <summary>
            This is used to get or set the entry's title in the table of
            contents.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.IncludePage">
            <summary>
            This is used to get or set whether or not the page will appear in
            the table of contents.
            </summary>
            <remarks>For root entries that have children, the node will appear
            in the table of contents but will have no page associated with it.
            The other options such as <see cref="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.SortOrder"/> will still have
            an effect.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.IsDefaultTopic">
            <summary>
            This is used to get or set whether or not the item is the default
            topic for the help file.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.HasLinks">
            <summary>
            This is used to get or set whether or not the topic has links that
            need to be resolved when the file is copied.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.NeedsColorizing">
            <summary>
            This is used to get or set whether or not the topic has
            <c>&lt;pre&gt;</c> blocks that have a <c>lang</c>
            attribute to indicate that they should be colorized.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.HasCodeBlocks">
            <summary>
            This is used to get or set whether or not the topic has
            <c>&lt;code /&gt;</c> blocks that need expanding.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.HasProjectTags">
            <summary>
            This is used to get or set whether or not the topic has tags
            that should be resolved to project options.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.ApiParentMode">
            <summary>
            This is used to get or set whether or not the table of contents is
            split after this entry.
            </summary>
            <remarks>This is only valid on root entries and the first one seen
            will cause all items from that tiem onward to appear below the API
            content.  All items prior to the entry will appear before the API
            content.  If used, the <c>ContentPlacement</c> project property
            will be ignored.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.TocEntry.SortOrder">
            <summary>
            This is used to get or set the sort order for the entry within
            its group.
            </summary>
            <value>Entries with identical sort order values will sort by
            title as well.  Items with no specific sort order will sort
            below those with a defined sort order.</value>
        </member>
        <member name="T:SandcastleBuilder.Utils.NamespaceSummaryItem">
            <summary>
            This represents a a namespace summary item that can be used to add
            comments to a namespace in the help file or exclude it completely
            from the help file.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.NamespaceSummaryItem.#ctor(System.String,System.Boolean,System.String,SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Internal constructor
            </summary>
            <param name="itemName">The namespace's name</param>
            <param name="documented">The flag indicating whether or not the
            namespace is to be documented.</param>
            <param name="summaryText">The summary text</param>
            <param name="project">The owning project</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.NamespaceSummaryItem.ToString">
            <summary>
            Return the namespace name as the string representation of the
            object.
            </summary>
            <returns>The namespace name</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.NamespaceSummaryItem.IsDocumented">
            <summary>
            This is used to get or set whether or not the namespace is included
            in the help file.
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.NamespaceSummaryItem.Summary">
            <summary>
            This is used to get or set the namespace summary comments
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.NamespaceSummaryItem.Name">
            <summary>
            This read-only property is used to get the namespace name
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.VisibleItems">
            <summary>
            This public enumerated type defines the optional visible items in the
            help file.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.VisibleItems.None">
            <summary>None of the optional items are visible.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.VisibleItems.Attributes">
            <summary>Document attributes.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.VisibleItems.ExplicitInterfaceImplementations">
            <summary>Document explicit interface implementations.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.VisibleItems.InheritedMembers">
            <summary>Document inherited members.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.VisibleItems.InheritedFrameworkMembers">
            <summary>Document inherited framework members.  For this to work,
            <b>InheritedMembers</b> must also be enabled.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.VisibleItems.Internals">
            <summary>Document internal members.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.VisibleItems.Privates">
            <summary>Document private members.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.VisibleItems.Protected">
            <summary>Document protected members.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.VisibleItems.ProtectedInternalAsProtected">
            <summary>Document "protected internal" members as "protected"
            only.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.VisibleItems.SealedProtected">
            <summary>Document protected members of sealed classes.  For this
            to work, <b>Protected</b> must also be enabled.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.VisibleItems.PrivateFields">
            <summary>Document private fields.  For this to work,
            <b>Privates</b> must also be enabled.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.VisibleItems.InheritedFrameworkPrivateMembers">
            <summary>Document inherited private framework members.  For this to
            work <b>InheritedFrameworkMembers</b> must also be enabled.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.VisibleItems.InheritedFrameworkInternalMembers">
            <summary>Document inherited internal framework members.  For this to
            work <b>InheritedFrameworkMembers</b> must also be enabled.</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.PlugIn.ExecutionBehaviors">
            <summary>
            This public enumerated type defines the execution behavior of a build
            process plug-in.
            </summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.PlugIn.ExecutionBehaviors.Before">
            <summary>Execute before the help file builder's normal
            processing.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.PlugIn.ExecutionBehaviors.After">
            <summary>Execute after the help file builder's normal
            processing.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.PlugIn.ExecutionBehaviors.BeforeAndAfter">
            <summary>Execute both before and after the help file builder's
            normal processing.</summary>
        </member>
        <member name="F:SandcastleBuilder.Utils.PlugIn.ExecutionBehaviors.InsteadOf">
            <summary>Execute instead of the help file builder's normal
            processing.  If this flag is set, Before and After are
            ignored.</summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.PlugInConfigurationDictionaryTypeConverter">
            <summary>
            This is used to give a more descriptive message in the property
            grid for the <see cref="T:SandcastleBuilder.Utils.PlugIn.PlugInConfigurationDictionary"/>.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PlugInConfigurationDictionaryTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.PlugInConfigurationDictionaryTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.FolderPathObjectEditor">
            <summary>
            This is a type editor that can display a folder browser dialog to
            allow selection of a folder path at design time.
            </summary>
            <remarks>This can be used in conjunction with the
            <see cref="T:SandcastleBuilder.Utils.Design.FolderDialogAttribute"/> to specify the folder browser
            dialog's properties.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.FolderPathObjectEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            This is overridden to edit the value using a folder browser dialog.
            </summary>
            <param name="context">The descriptor context</param>
            <param name="provider">The provider</param>
            <param name="value">The folder path as an object</param>
            <returns>The selected folder path as an object</returns>
        </member>
        <member name="T:SandcastleBuilder.Utils.Design.NamespaceSummaryItemCollectionTypeConverter">
            <summary>
            This is used to give a more descriptive message in the property
            grid for the <see cref="T:SandcastleBuilder.Utils.NamespaceSummaryItemCollection"/>.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemCollectionTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.Design.NamespaceSummaryItemCollectionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:SandcastleBuilder.Utils.Controls.CustomPropertyGrid">
            <summary>
            This is a custom property grid that allows you to set the initial
            width of the property name pane and has a context menu that allows
            you to hide the description pane and reset the selected property
            value.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.CustomPropertyGrid.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.CustomPropertyGrid.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">True to release both managed and unmanaged
            resources, false to just release unmanaged resources.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.CustomPropertyGrid.OnCreateControl">
            <summary>
            This is overridden to reset the pane width to the user-preferred
            width after creating the control.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.CustomPropertyGrid.ctxPropGrid_Opening(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            This updates the context menu based on the current property grid
            state before it is displayed.
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.CustomPropertyGrid.miReset_OnClick(System.Object,System.EventArgs)">
            <summary>
            Reset the value of the current property
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.CustomPropertyGrid.miShowDescription_OnClick(System.Object,System.EventArgs)">
            <summary>
            Show or hide the property description pane
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.Controls.CustomPropertyGrid.miCopyLabel_OnClick(System.Object,System.EventArgs)">
            <summary>
            Copy the current property's name to the clipboard
            </summary>
            <param name="sender">The sender of the event</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.Controls.CustomPropertyGrid.PropertyNamePaneWidth">
            <summary>
            This is used to set or get the width of the property name pane
            </summary>
            <remarks>Reflection is used to modify the pane width</remarks>
        </member>
        <member name="T:SandcastleBuilder.Utils.ConceptualContent.ImageReferenceCollection">
            <summary>
            This collection class is used to hold the conceptual content image
            references for a project.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ImageReferenceCollection.#ctor(SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Constructor
            </summary>
            <param name="project">The project file containing the image
            build items.</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ImageReferenceCollection.Sort">
            <summary>
            This is used to sort the collection
            </summary>
            <remarks>Values are sorted by display title and ID.  Comparisons
            are case-insensitive.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ImageReferenceCollection.SaveAsSharedContent(System.String,System.String,SandcastleBuilder.Utils.BuildEngine.BuildProcess)">
            <summary>
            Write the image reference collection to a map file ready for use
            by <b>BuildAssembler</b>.
            </summary>
            <param name="filename">The file to which the image reference
            collection is saved.</param>
            <param name="imagePath">The path to which the image files
            should be copied.</param>
            <param name="builder">The build process</param>
            <remarks>Images with their <see cref="P:SandcastleBuilder.Utils.ConceptualContent.ImageReference.CopyToMedia"/>
            property set to true are copied to the media folder immediately.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ImageReferenceCollection.Refresh">
            <summary>
            This is used to refresh the collection by loading the image
            build items from the project.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ImageReferenceCollection.FindId(System.String)">
            <summary>
            Find the image with the specified ID (case-insensitive).
            </summary>
            <param name="id">The ID to find</param>
            <returns>The image if found or null if not found</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ImageReferenceCollection.FindImageFile(System.String)">
            <summary>
            Find the image with the specified filename.
            </summary>
            <param name="filename">The filename to find</param>
            <returns>The image if found or null if not found</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ImageReferenceCollection.Item(System.String)">
            <summary>
            This can be used to get an image by its unique ID (case-sensitive)
            </summary>
            <param name="id">The ID of the item to get.</param>
            <value>Returns the image with the specified
            <see cref="P:SandcastleBuilder.Utils.ConceptualContent.ImageReference.Id"/> or null if not found.</value>
        </member>
        <member name="T:SandcastleBuilder.Utils.ConceptualContent.ConceptualContentSettings">
            <summary>
            This class is used to hold the conceptual content settings for a
            project during a build and for editing.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ConceptualContentSettings.#ctor(SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Constructor
            </summary>
            <param name="project">The project from which to load the settings</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ConceptualContentSettings.CopyContentFiles(SandcastleBuilder.Utils.BuildEngine.BuildProcess)">
            <summary>
            This is used to copy the additional content token, image, and
            topic files to the build folder.
            </summary>
            <param name="builder">The build process</param>
            <remarks>This will copy the code snippet file if specified, save
            token information to a shared content file called <b>_Tokens_.xml</b>
            in the build process's working folder, copy the image files to the
            <b>.\media</b> folder in the build process's working folder, save
            the media map to a file called <b>_MediaContent_.xml</b> in the
            build process's working folder, and save the topic files to the
            <b>.\ddueXml</b> folder in the build process's working folder.
            The topic files will have their content wrapped in a
            <c>&lt;topic&gt;</c> tag if needed and will be named using their
            <see cref="P:SandcastleBuilder.Utils.ConceptualContent.Topic.Id"/> value.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ConceptualContentSettings.CreateConfigurationFiles(SandcastleBuilder.Utils.BuildEngine.BuildProcess)">
            <summary>
            This is used to create the conceptual content build configuration
            files.
            </summary>
            <param name="builder">The build process</param>
            <remarks>This will create the companion files used to resolve
            conceptual links and the <b>_ContentMetadata_.xml</b> and
            <b>ConceptualManifest.xml</b> configuration files.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ConceptualContentSettings.CreateCompanionFiles(SandcastleBuilder.Utils.BuildEngine.BuildProcess)">
            <summary>
            This is used to create the companion files used to resolve
            conceptual links.
            </summary>
            <param name="builder">The build process</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ConceptualContentSettings.CreateContentMetadata(SandcastleBuilder.Utils.BuildEngine.BuildProcess)">
            <summary>
            Create the content metadata file
            </summary>
            <param name="builder">The build process</param>
            <remarks>The content metadata file contains metadata information
            for each topic such as its title, table of contents title, help
            attributes, and index keywords.  Help attributes are a combination
            of the project-level help attributes and any parsed from the topic
            file.  Any replacement tags in the token values will be replaced
            with the appropriate project values.
            <p/>A true MAML version of this file contains several extra
            attributes.  Since Sandcastle doesn't use them, I'm not going to
            waste time adding them.  The only stuff written is what is required
            by Sandcastle.  In addition, I'm putting the <c>title</c> and
            <c>PBM_FileVersion</c> item elements in here rather than use the
            separate companion files.  They all end up in the metadata section
            of the topic being built so this saves having two extra components
            in the configuration that do the same thing with different files.
            </remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.ConceptualContentSettings.CreateConceptualManifest(SandcastleBuilder.Utils.BuildEngine.BuildProcess)">
            <summary>
            Create the content metadata file
            </summary>
            <param name="builder">The build process</param>
            <remarks>The content metadata file contains metadata information
            for each topic such as its title, table of contents title, help
            attributes, and index keywords.  Help attributes are a combination
            of the project-level help attributes and any parsed from the topic
            file.  Any replacement tags in the token values will be replaced
            with the appropriate project values.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ConceptualContentSettings.ImageFiles">
            <summary>
            This is used to get the conceptual content image files
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ConceptualContentSettings.CodeSnippetFiles">
            <summary>
            This is used to get the conceptual content code snippet files
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ConceptualContentSettings.TokenFiles">
            <summary>
            This is used to get the conceptual content token files
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ConceptualContentSettings.ContentLayoutFiles">
            <summary>
            This is used to get the conceptual content layout files
            </summary>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.ConceptualContentSettings.Topics">
            <summary>
            This is used to get a collection of the conceptual content topics
            </summary>
            <remarks>Each item in the collection represents one content layout
            file from the project.</remarks>
        </member>
        <member name="T:SandcastleBuilder.Utils.ConceptualContent.CodeEntityReference">
            <summary>
            This represents a conceptual content CodeEntityReference that can be used to insert
            a common item, value, or construct into topics.
            </summary>
            <remarks>This class is serializable so that it can be copied to the
            clipboard.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.CodeEntityReference.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="refId">The reference ID</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.CodeEntityReference.ToCodeEntityReference">
            <summary>
            Convert the entity to its <c>&lt;codeEntityReference&gt;</c> element
            form
            </summary>
            <returns>The entity in its <c>&lt;codeEntityReference&gt;</c>
            element form</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.ConceptualContent.CodeEntityReference.ToSee">
            <summary>
            Convert the entity to its <c>&lt;see&gt;</c> element form
            </summary>
            <returns>The token in its <c>&lt;see&gt;</c> element form</returns>
        </member>
        <member name="P:SandcastleBuilder.Utils.ConceptualContent.CodeEntityReference.Id">
            <summary>
            This is used to get or set the CodeEntityReference name
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.BuildComponent.ComponentConfigurationDictionary">
            <summary>
            This dictionary class is used to hold the third party build component
            configuration properties for a project such as the Code Block Component.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildComponent.ComponentConfigurationDictionary.OnDictionaryChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            This raises the <see cref="E:SandcastleBuilder.Utils.BuildComponent.ComponentConfigurationDictionary.DictionaryChanged"/> event.
            </summary>
            <param name="e">The event arguments</param>
            <remarks>The dictionary doesn't raise events automatically so
            this is raised manually as needed.</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildComponent.ComponentConfigurationDictionary.#ctor(SandcastleBuilder.Utils.SandcastleProject)">
            <summary>
            Default constructor
            </summary>
            <param name="project">The project that owns the collection</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildComponent.ComponentConfigurationDictionary.FromXml(System.String)">
            <summary>
            This is used to load existing component configuration items from
            the project file.
            </summary>
            <param name="components">The component items</param>
            <remarks>The information is stored as an XML fragment</remarks>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildComponent.ComponentConfigurationDictionary.ToXml">
            <summary>
            This is used to write the component configuration info to an XML
            fragment ready for storing in the project file.
            </summary>
            <returns>The XML fragment containing the component configuration
            info.</returns>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuildComponent.ComponentConfigurationDictionary.Add(System.String,System.Boolean,System.String)">
            <summary>
            Add a new item to the dictionary
            </summary>
            <param name="id">The component ID</param>
            <param name="enabled">True for enabled, false disabled</param>
            <param name="config">The component configuration</param>
            <returns>The <see cref="T:SandcastleBuilder.Utils.BuildComponent.BuildComponentConfiguration"/> added to
            the project.  If the ID already exists in the collection, the
            existing item is returned.</returns>
            <remarks>The <see cref="T:SandcastleBuilder.Utils.BuildComponent.BuildComponentConfiguration"/> constructor
            is internal so that we control creation of the items and can
            associate them with the project.</remarks>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuildComponent.ComponentConfigurationDictionary.IsDirty">
            <summary>
            This is used to get or set the dirty state of the collection
            </summary>
        </member>
        <member name="E:SandcastleBuilder.Utils.BuildComponent.ComponentConfigurationDictionary.DictionaryChanged">
            <summary>
            This event is raised when the dictionary is modified
            </summary>
        </member>
        <member name="T:SandcastleBuilder.Utils.BuilderException">
            <summary>
            This exception class is thrown by the application if it encounters an
            unrecoverable error.
            </summary>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuilderException.#ctor">
            <summary>
            Default constructor.
            </summary>
            <overloads>There are six overloads for the constructor</overloads>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuilderException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.BuilderException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:SandcastleBuilder.Utils.BuilderException.#ctor(System.String,System.String)">
            <summary>
            This constructor takes an error code and a message string
            </summary>
            <param name="code">The error code.  The suggested format is
            one to four letters to identify the component or process followed
            by four digits, zero padded to the left, with no spaces.</param>
            <param name="message">The exception message</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuilderException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            This constructor takes an error code, a message string, and an
            inner exception.
            </summary>
            <param name="code">The error code.  The suggested format is
            one to four letters to identify the component or process followed
            by four digits, zero padded to the left, with no spaces.</param>
            <param name="message">The exception message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuilderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor for use with
            <see cref="T:System.Runtime.Serialization.ISerializable"/>.
            </summary>
            <param name="info">The serialization info object</param>
            <param name="context">The streaming context object</param>
        </member>
        <member name="M:SandcastleBuilder.Utils.BuilderException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This implements the <see cref="T:System.Runtime.Serialization.ISerializable"/>
            interface and adds the error code to the serialization information.
            </summary>
            <param name="info">The serialization info object</param>
            <param name="context">The streaming context</param>
        </member>
        <member name="P:SandcastleBuilder.Utils.BuilderException.ErrorCode">
            <summary>
            Get the error code associated with the exception
            </summary>
        </member>
    </members>
</doc>
