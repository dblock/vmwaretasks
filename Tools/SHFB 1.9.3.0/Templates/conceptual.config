<configuration>
  <dduetools>
    <builder>
      <components>

        <!-- Create skeleton document -->
        <component type="Microsoft.Ddue.Tools.CopyFromFileComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
          <data file="{@PresentationPath}Transforms\skeleton_conceptual.xml" />
          <copy source="/*" target="/" />
        </component>

        <!-- Copy in comments -->
        <component type="Microsoft.Ddue.Tools.CopyFromIndexComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
          <index name="comments" value="/topic" key="@id">
            <data files="ddueXml\*.xml" />
          </index>
          <copy name="comments" source="/topic" target="/document" />
        </component>

        <!-- resolve tokens -->
        <component type="Microsoft.Ddue.Tools.SharedContentComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
          <context prefix="ddue" name="http://ddue.schemas.microsoft.com/authoring/2003/5" />
          <content file="HelpFileBuilderTokens.tokens" />
{@TokenFiles}
          <replace elements="/*//ddue:token" item="string(.)" />
        </component>

        <!-- copy in metadata attributes -->
        <component type="Microsoft.Ddue.Tools.CopyFromIndexComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
          <index name="metadata" value="/metadata/topic" key="@id">
            <data files="_ContentMetadata_.xml" />
          </index>
          <copy name="metadata" source="*" target="/document/metadata" />
          <copy name="metadata" key="string('*')" source="*" target="/document/metadata" />
        </component>

        <!-- Resolve code snippets -->
        <component type="Microsoft.Ddue.Tools.ExampleComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
{@CodeSnippetsFiles}
          <colors language="VisualBasic">
            <color pattern="^\s*'[^\r\n]*" class="comment" />
            <color pattern="\&#34;[^&#34;\r\n]*\&#34;" class="literal" />
            <color pattern="\b((AddHandler)|(AddressOf)|(Alias)|(And)|(AndAlso)|(As)|(Boolean)|(ByRef)|(Byte)|(ByVal)|(Call)|(Case)|(Catch)|(CBool)|(CByte)|(CChar)|(CDate)|(CDec)|(CDbl)|(Char)|(CInt)|(Class)|(CLng)|(CObj)|(Const)|(Continue)|(CSByte)|(CShort)|(CSng)|(CStr)|(CType)|(CUInt)|(CULng)|(CUShort)|(Date)|(Decimal)|(Declare)|(Default)|(Delegate)|(Dim)|(DirectCast)|(Do)|(Double)|(Each)|(Else)|(ElseIf)|(End)|(EndIf)|(Enum)|(Erase)|(Error)|(Event)|(Exit)|(False)|(Finally)|(For)|(Friend)|(From)|(Function)|(Get)|(GetType)|(GetXMLNamespace)|(Global)|(GoSub)|(GoTo)|(Handles)|(If)|(Implements)|(Imports)|(In)|(Inherits)|(Integer)|(Interface)|(Is)|(IsNot)|(Let)|(Lib)|(Like)|(Long)|(Loop)|(Me)|(Mod)|(Module)|(MustInherit)|(MustOverride)|(MyBase)|(MyClass)|(Namespace)|(Narrowing)|(New)|(Next)|(Not)|(Nothing)|(NotInheritable)|(NotOverridable)|(Object)|(Of)|(On)|(Operator)|(Option)|(Optional)|(Or)|(OrElse)|(Overloads)|(Overridable)|(Overrides)|(ParamArray)|(Partial)|(Private)|(Property)|(Protected)|(Public)|(RaiseEvent)|(ReadOnly)|(ReDim)|(REM)|(RemoveHandler)|(Resume)|(Return)|(SByte)|(Select)|(Set)|(Shadows)|(Shared)|(Short)|(Single)|(Static)|(Step)|(Stop)|(String)|(Structure)|(Sub)|(SyncLock)|(Then)|(Throw)|(To)|(True)|(Try)|(TryCast)|(TypeOf)|(Variant)|(Wend)|(UInteger)|(ULong)|(UShort)|(Until)|(Using)|(When)|(Where)|(While)|(Widening)|(With)|(WithEvents)|(WriteOnly)|(Xor)|(#Const)|(#Else)|(#ElseIf)|(#End)|(#If))\b" class="keyword" />
          </colors>
          <colors language="CSharp">
             <color pattern="/\*(.|\n)+?\*/" class="comment" />
             <color pattern="\&#34;[^&#34;\r\n]*\&#34;" class="literal" />
             <color pattern="//[^\r\n]*" class="comment" />
             <color pattern="\b((abstract)|(as)|(ascending)|(base)|(bool)|(break)|(by)|(byte)|(case)|(catch)|(char)|(checked)|(class)|(const)|(continue)|(decimal)|(default)|(delegate)|(descending)|(do)|(double)|(else)|(enum)|(equals)|(event)|(explicit)|(extern)|(false)|(finally)|(fixed)|(float)|(for)|(foreach)|(from)|(get)|(goto)|(group)|(if)|(implicit)|(in)|(int)|(interface)|(internal)|(into)|(is)|(join)|(let)|(lock)|(long)|(namespace)|(new)|(null)|(object)|(operator)|(on)|(orderby)|(out)|(override)|(params)|(partial)|(private)|(protected)|(public)|(readonly)|(ref)|(return)|(sbyte)|(sealed)|(select)|(set)|(short)|(sizeof)|(stackalloc)|(static)|(string)|(struct)|(switch)|(this)|(throw)|(true)|(try)|(typeof)|(uint)|(ulong)|(unchecked)|(unsafe)|(ushort)|(using)|(value)|(var)|(vield)|(virtual)|(volatile)|(void)|(where)|(while))\b" class="keyword" />
          </colors>
          <colors language="ManagedCPlusPlus">
             <color pattern="/\*(.|\n)+?\*/" class="comment" />
             <color pattern="\&#34;[^&#34;\r\n]*\&#34;" class="literal" />
             <color pattern="//[^\r\n]*" class="comment" />
             <color pattern="\b((abstract)|(array)|(bool)|(break)|(case)|(catch)|(char)|(class)|(const)|(continue)|(default)|(delegate)|(delete)|(deprecated)|(dllexport)|(dllimport)|(do)|(double)|(else)|(enum)|(event)|(explicit)|(extern)|(false)|(finally)|(float)|(for)|(friend)|(gcnew)|(generic)|(goto)|(if)|(initonly)|(inline)|(int)|(interface)|(literal)|(long)|(mutable)|(naked)|(namespace)|(new)|(noinline)|(noreturn)|(nothrow)|(novtable)|(nullptr)|(operator)|(private)|(property)|(protected)|(public)|(ref)|(register)|(return)|(safecast)|(sealed)|(selectany)|(short)|(signed)|(sizeof)|(static)|(struct)|(switch)|(template)|(this)|(thread)|(throw)|(true)|(try)|(typedef)|(typeid)|(typename)|(union)|(unsigned)|(using)|(uuid)|(value)|(virtual)|(void)|(volatile)|(while))\b" class="keyword" />
          </colors>
          <colors language="FSharp">
             <color pattern="\(\*(.|\n)+?\*\)" class="comment" />"
             <color pattern="\&#34;[^&#34;\r\n]*\&#34;" class="literal" />
             <color pattern="//[^\r\n]*" class="comment" />
             <color pattern="\b((abstract)|(and)|(as)|(asr)|(assert)|(atomic)|(base)|(begin)|(break)|(checked)|(class)|(component)|(const)|(constraint)|(constructor)|(continue)|(default)|(delegate)|(do)|(done)|(downcast)|(downto)|(eager)|(elif)|(else)|(end)|(event)|(exception)|(extern)|(external)|(false)|(finally)|(fixed)|(for)|(fun)|(function)|(functor)|(global)|(if)|(in)|(include)|(inherit)|(inline)|(interface)|(internal)|(land)|(lazy)|(let)|(lor)|(lsl)|(lsr)|(lxor)|(match)|(member)|(method)|(mixin)|(mod)|(module)|(mutable)|(namespace)|(new)|(null)|(object)|(of)|(open)|(or)|(override)|(parallel)|(private)|(process)|(protected)|(public)|(pure)|(rec)|(return)|(sealed)|(sig)|(static)|(struct)|(tailcall)|(then)|(to)|(trait)|(true)|(try)|(type)|(upcast)|(use)|(val)|(virtual)|(void)|(volatile)|(when)|(while)|(with)|(yield))\b" class="keyword" />
          </colors>
        </component>

        <!-- Code block component configuration.  This must appear before the
             TransformComponent.  See also: PostTransformComponent. -->
        <component type="SandcastleBuilder.Components.CodeBlockComponent"
          assembly="{@SHFBFolder}SandcastleBuilder.Components.dll"
          id="Code Block Component">
            <!-- Base path for relative filenames in source attributes (optional) -->
            <basePath value="{@HtmlEncProjectFolder}" />

            <!-- Connect to language filter (optional).  If omitted,
                 language filtering is enabled by default. -->
            <languageFilter value="true" />

            <!-- Allow missing source files (Optional).  If omitted,
                 it will generate errors if referenced source files
                 are missing. -->
            <allowMissingSource value="false" />

            <!-- Remove region markers from imported code blocks.  If omitted,
                 region markers in imported code blocks are left alone. -->
            <removeRegionMarkers value="false" />

            <!-- Code colorizer options (required).
                   Attributes:
                      Language syntax configuration file (required)
                      XSLT style file (required)
                      "Copy" image file URL (required)
                      Default language (optional)
                      Enable line numbering (optional)
                      Enable outlining (optional)
                      Keep XML comment "see" tags within the code (optional)
                      Tab size override (optional, 0 = Use syntax file setting)
                      Use language name as default title (optional) -->
            <colorizer syntaxFile="{@SHFBFolder}Colorizer\highlight.xml"
                styleFile="{@SHFBFolder}Colorizer\highlight.xsl"
                copyImageUrl="../icons/CopyCode.gif"
                language="cs" numberLines="false" outlining="false"
                keepSeeTags="false" tabSize="0" defaultTitle="true" />
        </component>

        <!-- transform -->
        <component type="Microsoft.Ddue.Tools.TransformComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
          <transform file="{@PresentationPath}Transforms\main_conceptual.xsl">
            <argument key="metadata" value="true" />
            <argument key="languages">
{@SyntaxFiltersDropDown}
            </argument>
          </transform>
        </component>

        <!-- Post-transform component configuration.  This must appear after the
             TransformComponent.  See also: CodeBlockComponent. -->
        <component type="SandcastleBuilder.Components.PostTransformComponent"
          assembly="{@SHFBFolder}SandcastleBuilder.Components.dll"
          id="Post-transform Component">
          <!-- Code colorizer files (required).
                 Attributes:
                    Stylesheet file (required)
                    Script file (required)
                    "Copy" image file (required) -->
          <colorizer stylesheet="{@SHFBFolder}Colorizer\highlight.css"
              scriptFile="{@SHFBFolder}Colorizer\highlight.js"
              copyImage="{@SHFBFolder}Colorizer\CopyCode.gif" />

          <!-- Base output paths for the files (required).  These should match
               the parent folder of the output path of the HTML files (see
               each of the SaveComponent instances below). -->
          <outputPaths>
{@HelpFormatOutputPaths}
          </outputPaths>

          <!-- Logo image file (optional).  Filename is required. The height,
                 width, altText, placement, and alignment attributes are
                 optional. -->
          <logoFile filename="" height="0" width="0" altText=""
              placement="left" alignment="left" />
        </component>

        <!-- Multi-format output component.  This must wrap the component set
             unique to each output file format. -->
        <component type="SandcastleBuilder.Components.MultiFormatOutputComponent"
          assembly="{@SHFBFolder}SandcastleBuilder.Components.dll"
          id="Multi-format Output Component">
          <!-- This defines the formats to generate -->
          <build formats="{@HelpFileFormat}" />

          <!-- This defines the set of components for HTML Help 1 files -->
          <helpOutput format="HtmlHelp1">
            <!-- Resolve shared content -->
            <component type="Microsoft.Ddue.Tools.SharedContentComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
              <content file="{@PresentationPath}content\{@LanguageFolder}shared_content.xml" />
              <content file="{@PresentationPath}content\{@LanguageFolder}feedBack_content.xml" />
              <content file="{@PresentationPath}content\{@LanguageFolder}conceptual_content.xml" />
              <!-- These must be last in order to override other elements! -->
              <content file="SharedBuilderContent.xml" />
              <content file="PresentationStyleBuilderContent.xml" />
{@ResourceItemFiles}
            </component>

            <!-- Resolve art links -->
            <component type="Microsoft.Ddue.Tools.ResolveArtLinksComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
              <targets input="Media" baseOutput=".\Output\HtmlHelp1" outputPath="string('media')" link="../media" map="_MediaContent_.xml" />
            </component>

            <!-- Resolve conceptual links -->
            <component type="SandcastleBuilder.Components.ResolveConceptualLinksComponent"
              assembly="{@SHFBFolder}SandcastleBuilder.Components.dll"
              showBrokenLinkText="true">
                <targets base="xmlComp" type="Local" />
            </component>

            <!-- Resolve reference links -->
            <component type="Microsoft.Ddue.Tools.ResolveReferenceLinksComponent2"
              assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll"
              locale="{@Locale}" linkTarget="{@SdkLinkTarget}">
                <targets base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" type="{@HtmlSdkLinkType}" />
                <targets files="reflection.xml" type="Local" />
            </component>

            <!-- Save the result -->
            <component type="Microsoft.Ddue.Tools.SaveComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
              <save base="Output\HtmlHelp1\html" path="concat($key,'.htm')" indent="{@IndentHtml}" omit-xml-declaration="true"
                add-xhtml-namespace="false" />
            </component>
          </helpOutput>

          <!-- This defines the set of components for MS Help 2 files -->
          <helpOutput format="MSHelp2">
            <!-- Resolve shared content -->
            <component type="Microsoft.Ddue.Tools.SharedContentComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
              <content file="{@PresentationPath}content\{@LanguageFolder}shared_content.xml" />
              <content file="{@PresentationPath}content\{@LanguageFolder}feedBack_content.xml" />
              <content file="{@PresentationPath}content\{@LanguageFolder}conceptual_content.xml" />
              <!-- These must be last in order to override other elements! -->
              <content file="SharedBuilderContent.xml" />
              <content file="PresentationStyleBuilderContent.xml" />
{@ResourceItemFiles}
            </component>

            <!-- Insert additional MS Help 2 attributes -->
            <component id="MS Help 2 Attributes"
              type="SandcastleBuilder.Components.MSHelpAttrComponent"
              assembly="{@SHFBFolder}SandcastleBuilder.Components.dll">
{@HelpAttributes}
            </component>

            <!-- Resolve art links -->
            <component type="Microsoft.Ddue.Tools.ResolveArtLinksComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
              <targets input="Media" baseOutput=".\Output\MSHelp2" outputPath="string('media')" link="../media" map="_MediaContent_.xml" />
            </component>

            <!-- Resolve conceptual links -->
            <component type="SandcastleBuilder.Components.ResolveConceptualLinksComponent"
              assembly="{@SHFBFolder}SandcastleBuilder.Components.dll"
              showBrokenLinkText="true">
                <targets base="xmlComp" type="Index" />
            </component>

            <!-- Resolve reference links -->
            <component type="Microsoft.Ddue.Tools.ResolveReferenceLinksComponent2"
              assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll"
              locale="{@Locale}" linkTarget="{@SdkLinkTarget}">
                <targets base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" type="{@MSHelp2SDKLinkType}" />
                <targets files="reflection.xml" type="Index" />
            </component>

            <!-- Save the result -->
            <component type="Microsoft.Ddue.Tools.SaveComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
              <save base="Output\MSHelp2\html" path="concat($key,'.htm')" indent="{@IndentHtml}" omit-xml-declaration="true"
                add-xhtml-namespace="false" />
            </component>
          </helpOutput>

          <!-- This defines the set of components for MS Help Viewer files -->
          <helpOutput format="MSHelpViewer">
            <!-- Resolve shared content -->
            <component type="Microsoft.Ddue.Tools.SharedContentComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
              <content file="{@PresentationPath}content\{@LanguageFolder}shared_content_mshc.xml" />
              <content file="{@PresentationPath}content\{@LanguageFolder}feedBack_content.xml" />
              <content file="{@PresentationPath}content\{@LanguageFolder}conceptual_content.xml" />
              <!-- These must be last in order to override other elements! -->
              <content file="SharedBuilderContent.xml" />
              <content file="PresentationStyleBuilderContent.xml" />
{@ResourceItemFiles}
            </component>

            <!-- Resolve art links -->
            <component type="Microsoft.Ddue.Tools.ResolveArtLinksComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
              <targets input="Media" baseOutput=".\Output\MSHelpViewer" outputPath="string('media')" link="media" map="_MediaContent_.xml" />
            </component>

            <!-- Resolve conceptual links -->
            <component type="SandcastleBuilder.Components.ResolveConceptualLinksComponent"
              assembly="{@SHFBFolder}SandcastleBuilder.Components.dll"
              showBrokenLinkText="true">
                <targets base="xmlComp" type="Id" />
            </component>

            <!-- Resolve reference links -->
            <component type="Microsoft.Ddue.Tools.ResolveReferenceLinksComponent2"
              assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll"
              locale="{@Locale}" linkTarget="{@SdkLinkTarget}">
                <targets base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" type="{@MSHelpViewerSdkLinkType}" />
                <targets files="reflection.xml" type="Id" />
            </component>

            <!-- Add MS Help Viewer metadata -->
            <component type="SandcastleBuilder.Components.MSHCComponent"
              assembly="{@SHFBFolder}SandcastleBuilder.Components.dll">
              <data self-branded="{@SelfBranded}" topic-version="{@TopicVersion}" toc-file="_ConceptualTOC_.xml"
                toc-parent="{@TocParentId}" toc-parent-version="{@TocParentVersion}" locale="{@Locale}" />
            </component>

            <!-- Save the result -->
            <component type="Microsoft.Ddue.Tools.SaveComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
              <save base="Output\MSHelpViewer\html" path="concat($key,'.htm')" indent="{@IndentHtml}" omit-xml-declaration="false"
                add-xhtml-namespace="true" />
            </component>
          </helpOutput>

          <!-- This defines the set of components for websites -->
          <helpOutput format="Website">
            <!-- Resolve shared content -->
            <component type="Microsoft.Ddue.Tools.SharedContentComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
              <content file="{@PresentationPath}content\{@LanguageFolder}shared_content.xml" />
              <content file="{@PresentationPath}content\{@LanguageFolder}feedBack_content.xml" />
              <content file="{@PresentationPath}content\{@LanguageFolder}conceptual_content.xml" />
              <!-- These must be last in order to override other elements! -->
              <content file="SharedBuilderContent.xml" />
              <content file="PresentationStyleBuilderContent.xml" />
{@ResourceItemFiles}
            </component>

            <!-- Resolve art links -->
            <component type="Microsoft.Ddue.Tools.ResolveArtLinksComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
              <targets input="Media" baseOutput=".\Output\Website" outputPath="string('media')" link="../media" map="_MediaContent_.xml" />
            </component>

            <!-- Resolve conceptual links -->
            <component type="SandcastleBuilder.Components.ResolveConceptualLinksComponent"
              assembly="{@SHFBFolder}SandcastleBuilder.Components.dll"
              showBrokenLinkText="true">
                <targets base="xmlComp" type="Local" />
            </component>

            <!-- Resolve reference links -->
            <component type="Microsoft.Ddue.Tools.ResolveReferenceLinksComponent2"
              assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll"
              locale="{@Locale}" linkTarget="{@SdkLinkTarget}">
                <targets base="{@SandcastlePath}Data\Reflection" recurse="true" files="*.xml" type="{@WebsiteSdkLinkType}" />
                <targets files="reflection.xml" type="Local" />
            </component>

            <!-- Save the result -->
            <component type="Microsoft.Ddue.Tools.SaveComponent" assembly="{@SandcastlePath}ProductionTools\BuildComponents.dll">
              <save base="Output\Website\html" path="concat($key,'.htm')" indent="{@IndentHtml}" omit-xml-declaration="true"
                add-xhtml-namespace="false" />
            </component>
          </helpOutput>
        </component>

      </components>
    </builder>
  </dduetools>
</configuration>
